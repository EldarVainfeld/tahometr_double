
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000950  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000085  00800100  00800100  000009c4  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000003c2  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d63  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000043f  00000000  00000000  00001b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008e6  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000311  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000448  00000000  00000000  00002cf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	93 c1       	rjmp	.+806    	; 0x342 <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	9c c1       	rjmp	.+824    	; 0x364 <__vector_21>
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_clear_bss>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a5 38       	cpi	r26, 0x85	; 133
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	2d d0       	rcall	.+90     	; 0xd8 <main>
  7e:	66 c4       	rjmp	.+2252   	; 0x94c <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  82:	68 17       	cp	r22, r24
  84:	10 f4       	brcc	.+4      	; 0x8a <delta+0x8>
	{
		return (v1 - v2);
  86:	86 1b       	sub	r24, r22
  88:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  8a:	68 1b       	sub	r22, r24
  8c:	86 2f       	mov	r24, r22
	}
}
  8e:	08 95       	ret

00000090 <switch_sensor>:
void switch_sensor()
{
	if (sensor_id == 1)
  90:	80 91 84 01 	lds	r24, 0x0184
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	61 f4       	brne	.+24     	; 0xb0 <switch_sensor+0x20>
	{
		sensor_id = 0;
  98:	10 92 84 01 	sts	0x0184, r1
		locate(15);
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	c0 d2       	rcall	.+1408   	; 0x620 <locate>
		lcd_send_4b_mode((uchar)'1');
  a0:	81 e3       	ldi	r24, 0x31	; 49
  a2:	74 d2       	rcall	.+1256   	; 0x58c <lcd_send_4b_mode>
		locate(79);
  a4:	8f e4       	ldi	r24, 0x4F	; 79
  a6:	bc d2       	rcall	.+1400   	; 0x620 <locate>
		lcd_send_4b_mode((uchar)'_');
  a8:	8f e5       	ldi	r24, 0x5F	; 95
  aa:	70 d2       	rcall	.+1248   	; 0x58c <lcd_send_4b_mode>
		ADMUX = 2;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <switch_sensor+0x38>
	}
	else
	{
		sensor_id = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 84 01 	sts	0x0184, r24
		locate(15);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	b3 d2       	rcall	.+1382   	; 0x620 <locate>
		lcd_send_4b_mode((uchar)'_');
  ba:	8f e5       	ldi	r24, 0x5F	; 95
  bc:	67 d2       	rcall	.+1230   	; 0x58c <lcd_send_4b_mode>
		locate(79);
  be:	8f e4       	ldi	r24, 0x4F	; 79
  c0:	af d2       	rcall	.+1374   	; 0x620 <locate>
		lcd_send_4b_mode((uchar)'2');
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	63 d2       	rcall	.+1222   	; 0x58c <lcd_send_4b_mode>
		ADMUX = 3;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	80 93 7c 00 	sts	0x007C, r24
	}
	measurement_started = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 0a 01 	sts	0x010A, r24
	measurement_done = 0;
  d2:	10 92 7f 01 	sts	0x017F, r1
}
  d6:	08 95       	ret

000000d8 <main>:

int main()
{
  d8:	9f 92       	push	r9
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	df 93       	push	r29
  ec:	cf 93       	push	r28
  ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x18>
  f0:	00 d0       	rcall	.+0      	; 0xf2 <main+0x1a>
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	sensor_id = 0;
  f6:	10 92 84 01 	sts	0x0184, r1
	long time_count;
	long rpm_sum;

	uchar i, j;
	char animation[4];
	animation[0] = 0xD9;
  fa:	89 ed       	ldi	r24, 0xD9	; 217
  fc:	89 83       	std	Y+1, r24	; 0x01
	animation[1] = 0xC9;
  fe:	89 ec       	ldi	r24, 0xC9	; 201
 100:	8a 83       	std	Y+2, r24	; 0x02
	animation[2] = 0xDA;
 102:	8a ed       	ldi	r24, 0xDA	; 218
 104:	8b 83       	std	Y+3, r24	; 0x03
	animation[3] = 0xC8;
 106:	88 ec       	ldi	r24, 0xC8	; 200
 108:	8c 83       	std	Y+4, r24	; 0x04

	setup_timers();
 10a:	03 d1       	rcall	.+518    	; 0x312 <setup_timers>

	setup_io();
 10c:	12 d1       	rcall	.+548    	; 0x332 <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
 10e:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
 110:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
 112:	74 d2       	rcall	.+1256   	; 0x5fc <lcd_ini_sequence>
	LED_ON
 114:	57 9a       	sbi	0x0a, 7	; 10
 116:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
 118:	3c 9a       	sbi	0x07, 4	; 7
 11a:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
 11c:	55 9a       	sbi	0x0a, 5	; 10
	sei();
 11e:	78 94       	sei
	format(line1, line2);
 120:	84 e3       	ldi	r24, 0x34	; 52
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	66 e4       	ldi	r22, 0x46	; 70
 126:	70 e0       	ldi	r23, 0x00	; 0
 128:	a2 d2       	rcall	.+1348   	; 0x66e <format>
 12a:	eb e3       	ldi	r30, 0x3B	; 59
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
		gl_set[j].ain_th_low = 20;
 132:	64 e1       	ldi	r22, 0x14	; 20
		gl_set[j].ain_th_high = 45;
 134:	9d e2       	ldi	r25, 0x2D	; 45
 136:	4a e3       	ldi	r20, 0x3A	; 58
 138:	50 e0       	ldi	r21, 0x00	; 0
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
 13a:	f0 97       	sbiw	r30, 0x30	; 48
 13c:	10 82       	st	Z, r1
 13e:	11 82       	std	Z+1, r1	; 0x01
 140:	12 82       	std	Z+2, r1	; 0x02
 142:	13 82       	std	Z+3, r1	; 0x03
 144:	f0 96       	adiw	r30, 0x30	; 48
		gl_set[j].ain_th_low = 20;
 146:	61 83       	std	Z+1, r22	; 0x01
		gl_set[j].ain_th_high = 45;
 148:	92 83       	std	Z+2, r25	; 0x02
 14a:	24 9f       	mul	r18, r20
 14c:	d0 01       	movw	r26, r0
 14e:	25 9f       	mul	r18, r21
 150:	b0 0d       	add	r27, r0
 152:	34 9f       	mul	r19, r20
 154:	b0 0d       	add	r27, r0
 156:	11 24       	eor	r1, r1
 158:	a1 5f       	subi	r26, 0xF1	; 241
 15a:	be 4f       	sbci	r27, 0xFE	; 254
 15c:	80 e0       	ldi	r24, 0x00	; 0

		for (i = 0; i < MAX_NUM_MEAS; i++)
		{
			gl_set[j].rpm_his[i] = 0;
 15e:	1d 92       	st	X+, r1
 160:	1d 92       	st	X+, r1
 162:	1d 92       	st	X+, r1
 164:	1d 92       	st	X+, r1
	{
		gl_set[j].rpm_avg = 0;
		gl_set[j].ain_th_low = 20;
		gl_set[j].ain_th_high = 45;

		for (i = 0; i < MAX_NUM_MEAS; i++)
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	c9 f7       	brne	.-14     	; 0x15e <main+0x86>
		{
			gl_set[j].rpm_his[i] = 0;
		}
		gl_set[j].last_rpm_indx = 0;
 16c:	10 82       	st	Z, r1
		gl_set[j].anim_counter = 0;
 16e:	10 86       	std	Z+8, r1	; 0x08
		gl_set[j].anim_counter_old = 0;
 170:	11 86       	std	Z+9, r1	; 0x09
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	fa 96       	adiw	r30, 0x3a	; 58
	LCD_BL_ON
	LCD_CONTRAST_ON
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
 178:	22 30       	cpi	r18, 0x02	; 2
 17a:	31 05       	cpc	r19, r1
 17c:	f1 f6       	brne	.-68     	; 0x13a <main+0x62>
		gl_set[j].last_rpm_indx = 0;
		gl_set[j].anim_counter = 0;
		gl_set[j].anim_counter_old = 0;
	}
	
	LED_OFF;
 17e:	5f 98       	cbi	0x0b, 7	; 11
	switch_sensor();
 180:	87 df       	rcall	.-242    	; 0x90 <switch_sensor>
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 182:	8d ee       	ldi	r24, 0xED	; 237
 184:	80 93 7a 00 	sts	0x007A, r24
	SENSOR_ON;
 188:	39 9a       	sbi	0x07, 1	; 7
 18a:	41 9a       	sbi	0x08, 1	; 8
	LED_ON;
 18c:	57 9a       	sbi	0x0a, 7	; 10
 18e:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_CONTRAST = 0;
 190:	18 bc       	out	0x28, r1	; 40
	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 192:	3a e3       	ldi	r19, 0x3A	; 58
 194:	c3 2e       	mov	r12, r19
 196:	d1 2c       	mov	r13, r1
			measurement_done = 1;
 198:	99 24       	eor	r9, r9
 19a:	93 94       	inc	r9
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
			locate(14);
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 19c:	5e 01       	movw	r10, r28
 19e:	08 94       	sec
 1a0:	a1 1c       	adc	r10, r1
 1a2:	b1 1c       	adc	r11, r1
	LCD_CONTRAST = 0;

	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
 1a4:	80 91 80 01 	lds	r24, 0x0180
 1a8:	90 91 81 01 	lds	r25, 0x0181
 1ac:	a0 e0       	ldi	r26, 0x00	; 0
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	dc 01       	movw	r26, r24
 1b2:	99 27       	eor	r25, r25
 1b4:	88 27       	eor	r24, r24
 1b6:	20 91 82 01 	lds	r18, 0x0182
 1ba:	30 91 83 01 	lds	r19, 0x0183
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	82 0f       	add	r24, r18
 1c4:	93 1f       	adc	r25, r19
 1c6:	a4 1f       	adc	r26, r20
 1c8:	b5 1f       	adc	r27, r21
 1ca:	85 5b       	subi	r24, 0xB5	; 181
 1cc:	94 4c       	sbci	r25, 0xC4	; 196
 1ce:	a4 40       	sbci	r26, 0x04	; 4
 1d0:	b0 40       	sbci	r27, 0x00	; 0
 1d2:	24 f1       	brlt	.+72     	; 0x21c <main+0x144>
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 1d4:	80 91 84 01 	lds	r24, 0x0184
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	8c 9d       	mul	r24, r12
 1dc:	90 01       	movw	r18, r0
 1de:	8d 9d       	mul	r24, r13
 1e0:	30 0d       	add	r19, r0
 1e2:	9c 9d       	mul	r25, r12
 1e4:	30 0d       	add	r19, r0
 1e6:	11 24       	eor	r1, r1
 1e8:	d9 01       	movw	r26, r18
 1ea:	a5 5f       	subi	r26, 0xF5	; 245
 1ec:	be 4f       	sbci	r27, 0xFE	; 254
 1ee:	d0 96       	adiw	r26, 0x30	; 48
 1f0:	8c 91       	ld	r24, X
 1f2:	d0 97       	sbiw	r26, 0x30	; 48
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	31 96       	adiw	r30, 0x01	; 1
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e2 0f       	add	r30, r18
 204:	f3 1f       	adc	r31, r19
 206:	e5 5f       	subi	r30, 0xF5	; 245
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	10 82       	st	Z, r1
 20c:	11 82       	std	Z+1, r1	; 0x01
 20e:	12 82       	std	Z+2, r1	; 0x02
 210:	13 82       	std	Z+3, r1	; 0x03
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	d0 96       	adiw	r26, 0x30	; 48
 216:	8c 93       	st	X, r24
			measurement_done = 1;
 218:	90 92 7f 01 	sts	0x017F, r9
		}
		if (measurement_done)
 21c:	80 91 7f 01 	lds	r24, 0x017F
 220:	88 23       	and	r24, r24
 222:	09 f4       	brne	.+2      	; 0x226 <main+0x14e>
 224:	52 c0       	rjmp	.+164    	; 0x2ca <main+0x1f2>
		{
			rpm_sum = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				rpm_sum += gl_set[sensor_id].rpm_his[i];
 226:	80 91 84 01 	lds	r24, 0x0184
 22a:	e8 2e       	mov	r14, r24
 22c:	ff 24       	eor	r15, r15
 22e:	ec 9c       	mul	r14, r12
 230:	f0 01       	movw	r30, r0
 232:	ed 9c       	mul	r14, r13
 234:	f0 0d       	add	r31, r0
 236:	fc 9c       	mul	r15, r12
 238:	f0 0d       	add	r31, r0
 23a:	11 24       	eor	r1, r1
 23c:	e1 5f       	subi	r30, 0xF1	; 241
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	81 91       	ld	r24, Z+
 24c:	91 91       	ld	r25, Z+
 24e:	a1 91       	ld	r26, Z+
 250:	b1 91       	ld	r27, Z+
 252:	28 0f       	add	r18, r24
 254:	39 1f       	adc	r19, r25
 256:	4a 1f       	adc	r20, r26
 258:	5b 1f       	adc	r21, r27
			measurement_done = 1;
		}
		if (measurement_done)
		{
			rpm_sum = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
 25a:	6f 5f       	subi	r22, 0xFF	; 255
 25c:	6a 30       	cpi	r22, 0x0A	; 10
 25e:	a9 f7       	brne	.-22     	; 0x24a <main+0x172>
			{
				rpm_sum += gl_set[sensor_id].rpm_his[i];
			}
			gl_set[sensor_id].rpm_avg = rpm_sum / MAX_NUM_MEAS;
 260:	ec 9c       	mul	r14, r12
 262:	80 01       	movw	r16, r0
 264:	ed 9c       	mul	r14, r13
 266:	10 0d       	add	r17, r0
 268:	fc 9c       	mul	r15, r12
 26a:	10 0d       	add	r17, r0
 26c:	11 24       	eor	r1, r1
 26e:	05 5f       	subi	r16, 0xF5	; 245
 270:	1e 4f       	sbci	r17, 0xFE	; 254
 272:	ca 01       	movw	r24, r20
 274:	b9 01       	movw	r22, r18
 276:	2a e0       	ldi	r18, 0x0A	; 10
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	40 e0       	ldi	r20, 0x00	; 0
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	e7 d2       	rcall	.+1486   	; 0x84e <__divmodsi4>
 280:	f8 01       	movw	r30, r16
 282:	20 83       	st	Z, r18
 284:	31 83       	std	Z+1, r19	; 0x01
 286:	42 83       	std	Z+2, r20	; 0x02
 288:	53 83       	std	Z+3, r21	; 0x03
			switch (sensor_id)
 28a:	80 91 84 01 	lds	r24, 0x0184
 28e:	88 23       	and	r24, r24
 290:	19 f0       	breq	.+6      	; 0x298 <main+0x1c0>
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	c9 f4       	brne	.+50     	; 0x2c8 <main+0x1f0>
 296:	0c c0       	rjmp	.+24     	; 0x2b0 <main+0x1d8>
			{
			case 0:
				lcd_send_floatx10(gl_set[0].rpm_avg, 5, 7, 1); //rpm_x10
 298:	60 91 0b 01 	lds	r22, 0x010B
 29c:	70 91 0c 01 	lds	r23, 0x010C
 2a0:	80 91 0d 01 	lds	r24, 0x010D
 2a4:	90 91 0e 01 	lds	r25, 0x010E
 2a8:	45 e0       	ldi	r20, 0x05	; 5
 2aa:	27 e0       	ldi	r18, 0x07	; 7
 2ac:	01 e0       	ldi	r16, 0x01	; 1
 2ae:	0a d2       	rcall	.+1044   	; 0x6c4 <lcd_send_floatx10>
			case 1:
				lcd_send_floatx10(gl_set[1].rpm_avg, 69, 7, 1); //rpm_x10
 2b0:	60 91 45 01 	lds	r22, 0x0145
 2b4:	70 91 46 01 	lds	r23, 0x0146
 2b8:	80 91 47 01 	lds	r24, 0x0147
 2bc:	90 91 48 01 	lds	r25, 0x0148
 2c0:	45 e4       	ldi	r20, 0x45	; 69
 2c2:	27 e0       	ldi	r18, 0x07	; 7
 2c4:	01 e0       	ldi	r16, 0x01	; 1
 2c6:	fe d1       	rcall	.+1020   	; 0x6c4 <lcd_send_floatx10>
			}
			switch_sensor();
 2c8:	e3 de       	rcall	.-570    	; 0x90 <switch_sensor>
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
 2ca:	90 91 43 01 	lds	r25, 0x0143
 2ce:	80 91 44 01 	lds	r24, 0x0144
 2d2:	98 17       	cp	r25, r24
 2d4:	59 f0       	breq	.+22     	; 0x2ec <main+0x214>
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
 2d6:	90 93 44 01 	sts	0x0144, r25
			locate(14);
 2da:	8e e0       	ldi	r24, 0x0E	; 14
 2dc:	a1 d1       	rcall	.+834    	; 0x620 <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 2de:	80 91 43 01 	lds	r24, 0x0143
 2e2:	f5 01       	movw	r30, r10
 2e4:	e8 0f       	add	r30, r24
 2e6:	f1 1d       	adc	r31, r1
 2e8:	80 81       	ld	r24, Z
 2ea:	50 d1       	rcall	.+672    	; 0x58c <lcd_send_4b_mode>
		}
		if (gl_set[1].anim_counter != gl_set[1].anim_counter_old)
 2ec:	90 91 7d 01 	lds	r25, 0x017D
 2f0:	80 91 7e 01 	lds	r24, 0x017E
 2f4:	98 17       	cp	r25, r24
 2f6:	09 f4       	brne	.+2      	; 0x2fa <main+0x222>
 2f8:	55 cf       	rjmp	.-342    	; 0x1a4 <main+0xcc>
		{
			gl_set[1].anim_counter_old = gl_set[1].anim_counter;
 2fa:	90 93 7e 01 	sts	0x017E, r25
			locate(78);
 2fe:	8e e4       	ldi	r24, 0x4E	; 78
 300:	8f d1       	rcall	.+798    	; 0x620 <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 302:	80 91 43 01 	lds	r24, 0x0143
 306:	f5 01       	movw	r30, r10
 308:	e8 0f       	add	r30, r24
 30a:	f1 1d       	adc	r31, r1
 30c:	80 81       	ld	r24, Z
 30e:	3e d1       	rcall	.+636    	; 0x58c <lcd_send_4b_mode>
 310:	49 cf       	rjmp	.-366    	; 0x1a4 <main+0xcc>

00000312 <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1<<COM1B1)|(1<<WGM01)|(1<<WGM00);
 312:	83 e2       	ldi	r24, 0x23	; 35
 314:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00); 
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25; 
 31a:	89 e1       	ldi	r24, 0x19	; 25
 31c:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0<<OCIE0A);
 31e:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 322:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 326:	83 e0       	ldi	r24, 0x03	; 3
 328:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);
 32c:	90 93 6f 00 	sts	0x006F, r25


}
 330:	08 95       	ret

00000332 <setup_io>:


void setup_io()
{
	DIDR0 = (1<<ADC2D) | (1<<ADC3D); //disable digital input on ADC2 and ADC3
 332:	8c e0       	ldi	r24, 0x0C	; 12
 334:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1<<PORTB1); //set push button as input
 338:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); //activte the pull up resistor for the push button
 33a:	29 9a       	sbi	0x05, 1	; 5
	
	LCD_EN_PORT |= _BV(LCD_EN);
 33c:	45 9a       	sbi	0x08, 5	; 8
  LCD_RS_PORT &= ~(_BV(LCD_RS));	
 33e:	5c 98       	cbi	0x0b, 4	; 11
}
 340:	08 95       	ret

00000342 <__vector_13>:
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
	}
}

ISR(TIMER1_OVF_vect)
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	8f 93       	push	r24
	//LED_ON;
	post_scaller++;
 34e:	80 91 09 01 	lds	r24, 0x0109
 352:	8f 5f       	subi	r24, 0xFF	; 255
 354:	80 93 09 01 	sts	0x0109, r24
}
 358:	8f 91       	pop	r24
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	af 92       	push	r10
 370:	bf 92       	push	r11
 372:	cf 92       	push	r12
 374:	df 92       	push	r13
 376:	ef 92       	push	r14
 378:	ff 92       	push	r15
 37a:	0f 93       	push	r16
 37c:	1f 93       	push	r17
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC >> 2;
 39a:	80 91 84 01 	lds	r24, 0x0184
 39e:	c8 2e       	mov	r12, r24
 3a0:	dd 24       	eor	r13, r13
 3a2:	20 91 78 00 	lds	r18, 0x0078
 3a6:	30 91 79 00 	lds	r19, 0x0079
 3aa:	36 95       	lsr	r19
 3ac:	27 95       	ror	r18
 3ae:	36 95       	lsr	r19
 3b0:	27 95       	ror	r18
 3b2:	8a e3       	ldi	r24, 0x3A	; 58
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	c8 9e       	mul	r12, r24
 3b8:	50 01       	movw	r10, r0
 3ba:	c9 9e       	mul	r12, r25
 3bc:	b0 0c       	add	r11, r0
 3be:	d8 9e       	mul	r13, r24
 3c0:	b0 0c       	add	r11, r0
 3c2:	11 24       	eor	r1, r1
 3c4:	e5 01       	movw	r28, r10
 3c6:	c5 5f       	subi	r28, 0xF5	; 245
 3c8:	de 4f       	sbci	r29, 0xFE	; 254
 3ca:	2b ab       	std	Y+51, r18	; 0x33
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state == 0)) //a cycle is detected
 3cc:	8a a9       	ldd	r24, Y+50	; 0x32
 3ce:	82 17       	cp	r24, r18
 3d0:	08 f0       	brcs	.+2      	; 0x3d4 <__vector_21+0x70>
 3d2:	83 c0       	rjmp	.+262    	; 0x4da <__vector_21+0x176>
 3d4:	8c a9       	ldd	r24, Y+52	; 0x34
 3d6:	88 23       	and	r24, r24
 3d8:	09 f0       	breq	.+2      	; 0x3dc <__vector_21+0x78>
 3da:	7f c0       	rjmp	.+254    	; 0x4da <__vector_21+0x176>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	8c ab       	std	Y+52, r24	; 0x34
		t_capture = TCNT1;
 3e0:	60 91 84 00 	lds	r22, 0x0084
 3e4:	70 91 85 00 	lds	r23, 0x0085
 3e8:	70 93 83 01 	sts	0x0183, r23
 3ec:	60 93 82 01 	sts	0x0182, r22
		TCNT1 = 0;
 3f0:	10 92 85 00 	sts	0x0085, r1
 3f4:	10 92 84 00 	sts	0x0084, r1
		t_postscale = post_scaller;
 3f8:	80 91 09 01 	lds	r24, 0x0109
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	30 93 81 01 	sts	0x0181, r19
 404:	20 93 80 01 	sts	0x0180, r18
		post_scaller = 0;
 408:	10 92 09 01 	sts	0x0109, r1
		if (measurement_started)
 40c:	80 91 0a 01 	lds	r24, 0x010A
 410:	88 23       	and	r24, r24
 412:	19 f0       	breq	.+6      	; 0x41a <__vector_21+0xb6>
		{
			measurement_started = 0;
 414:	10 92 0a 01 	sts	0x010A, r1
 418:	4f c0       	rjmp	.+158    	; 0x4b8 <__vector_21+0x154>
		}
		else if (!measurement_done)
 41a:	80 91 7f 01 	lds	r24, 0x017F
 41e:	88 23       	and	r24, r24
 420:	09 f0       	breq	.+2      	; 0x424 <__vector_21+0xc0>
 422:	4a c0       	rjmp	.+148    	; 0x4b8 <__vector_21+0x154>
		{
			time_count = t_capture + (t_postscale * 65536);
 424:	c9 01       	movw	r24, r18
 426:	a0 e0       	ldi	r26, 0x00	; 0
 428:	b0 e0       	ldi	r27, 0x00	; 0
 42a:	ac 01       	movw	r20, r24
 42c:	33 27       	eor	r19, r19
 42e:	22 27       	eor	r18, r18
 430:	cb 01       	movw	r24, r22
 432:	a0 e0       	ldi	r26, 0x00	; 0
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	28 0f       	add	r18, r24
 438:	39 1f       	adc	r19, r25
 43a:	4a 1f       	adc	r20, r26
 43c:	5b 1f       	adc	r21, r27
 43e:	20 93 01 01 	sts	0x0101, r18
 442:	30 93 02 01 	sts	0x0102, r19
 446:	40 93 03 01 	sts	0x0103, r20
 44a:	50 93 04 01 	sts	0x0104, r21
			if (time_count)
 44e:	21 15       	cp	r18, r1
 450:	31 05       	cpc	r19, r1
 452:	41 05       	cpc	r20, r1
 454:	51 05       	cpc	r21, r1
 456:	69 f1       	breq	.+90     	; 0x4b2 <__vector_21+0x14e>
			{
				rpm_x10 = 187500000 / time_count;
 458:	60 ee       	ldi	r22, 0xE0	; 224
 45a:	75 e0       	ldi	r23, 0x05	; 5
 45c:	8d e2       	ldi	r24, 0x2D	; 45
 45e:	9b e0       	ldi	r25, 0x0B	; 11
 460:	f6 d1       	rcall	.+1004   	; 0x84e <__divmodsi4>
 462:	79 01       	movw	r14, r18
 464:	8a 01       	movw	r16, r20
 466:	e0 92 05 01 	sts	0x0105, r14
 46a:	f0 92 06 01 	sts	0x0106, r15
 46e:	00 93 07 01 	sts	0x0107, r16
 472:	10 93 08 01 	sts	0x0108, r17
				if (rpm_x10 < 45000)
 476:	88 ec       	ldi	r24, 0xC8	; 200
 478:	e8 16       	cp	r14, r24
 47a:	8f ea       	ldi	r24, 0xAF	; 175
 47c:	f8 06       	cpc	r15, r24
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	08 07       	cpc	r16, r24
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	18 07       	cpc	r17, r24
 486:	ac f4       	brge	.+42     	; 0x4b2 <__vector_21+0x14e>
					{
						gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = rpm_x10;
 488:	88 a9       	ldd	r24, Y+48	; 0x30
 48a:	e8 2f       	mov	r30, r24
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	31 96       	adiw	r30, 0x01	; 1
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	ee 0f       	add	r30, r30
 496:	ff 1f       	adc	r31, r31
 498:	ea 0d       	add	r30, r10
 49a:	fb 1d       	adc	r31, r11
 49c:	e5 5f       	subi	r30, 0xF5	; 245
 49e:	fe 4f       	sbci	r31, 0xFE	; 254
 4a0:	e0 82       	st	Z, r14
 4a2:	f1 82       	std	Z+1, r15	; 0x01
 4a4:	02 83       	std	Z+2, r16	; 0x02
 4a6:	13 83       	std	Z+3, r17	; 0x03
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	88 ab       	std	Y+48, r24	; 0x30
						if(gl_set[sensor_id].last_rpm_indx >= MAX_NUM_MEAS)
 4ac:	8a 30       	cpi	r24, 0x0A	; 10
 4ae:	08 f0       	brcs	.+2      	; 0x4b2 <__vector_21+0x14e>
						{
							gl_set[sensor_id].last_rpm_indx = 0;
 4b0:	18 aa       	std	Y+48, r1	; 0x30
						}
					}
			}
			measurement_done = 1;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	80 93 7f 01 	sts	0x017F, r24
		}
		gl_set[sensor_id].anim_counter++;
 4b8:	8a e3       	ldi	r24, 0x3A	; 58
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	c8 9e       	mul	r12, r24
 4be:	f0 01       	movw	r30, r0
 4c0:	c9 9e       	mul	r12, r25
 4c2:	f0 0d       	add	r31, r0
 4c4:	d8 9e       	mul	r13, r24
 4c6:	f0 0d       	add	r31, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	e5 5f       	subi	r30, 0xF5	; 245
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	80 ad       	ldd	r24, Z+56	; 0x38
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	80 af       	std	Z+56, r24	; 0x38
		if (gl_set[sensor_id].anim_counter > 3)
 4d4:	84 30       	cpi	r24, 0x04	; 4
 4d6:	08 f0       	brcs	.+2      	; 0x4da <__vector_21+0x176>
		{
			gl_set[sensor_id].anim_counter = 0;
 4d8:	10 ae       	std	Z+56, r1	; 0x38
		}
	}

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state == 1)) //a low level is detected
 4da:	8a e3       	ldi	r24, 0x3A	; 58
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	c8 9e       	mul	r12, r24
 4e0:	f0 01       	movw	r30, r0
 4e2:	c9 9e       	mul	r12, r25
 4e4:	f0 0d       	add	r31, r0
 4e6:	d8 9e       	mul	r13, r24
 4e8:	f0 0d       	add	r31, r0
 4ea:	11 24       	eor	r1, r1
 4ec:	e5 5f       	subi	r30, 0xF5	; 245
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	93 a9       	ldd	r25, Z+51	; 0x33
 4f2:	81 a9       	ldd	r24, Z+49	; 0x31
 4f4:	98 17       	cp	r25, r24
 4f6:	20 f4       	brcc	.+8      	; 0x500 <__vector_21+0x19c>
 4f8:	84 a9       	ldd	r24, Z+52	; 0x34
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	09 f4       	brne	.+2      	; 0x500 <__vector_21+0x19c>
	{
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
 4fe:	14 aa       	std	Z+52, r1	; 0x34
	}

	if (delta(gl_set[sensor_id].ir_history_a, gl_set[sensor_id].ir_value) > 10)
 500:	ca e3       	ldi	r28, 0x3A	; 58
 502:	d0 e0       	ldi	r29, 0x00	; 0
 504:	cc 9e       	mul	r12, r28
 506:	f0 01       	movw	r30, r0
 508:	cd 9e       	mul	r12, r29
 50a:	f0 0d       	add	r31, r0
 50c:	dc 9e       	mul	r13, r28
 50e:	f0 0d       	add	r31, r0
 510:	11 24       	eor	r1, r1
 512:	e5 5f       	subi	r30, 0xF5	; 245
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	85 a9       	ldd	r24, Z+53	; 0x35
 518:	63 a9       	ldd	r22, Z+51	; 0x33
 51a:	b3 dd       	rcall	.-1178   	; 0x82 <delta>
 51c:	8b 30       	cpi	r24, 0x0B	; 11
 51e:	d8 f0       	brcs	.+54     	; 0x556 <__vector_21+0x1f2>
	{
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
 520:	80 91 84 01 	lds	r24, 0x0184
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	8c 9f       	mul	r24, r28
 528:	f0 01       	movw	r30, r0
 52a:	8d 9f       	mul	r24, r29
 52c:	f0 0d       	add	r31, r0
 52e:	9c 9f       	mul	r25, r28
 530:	f0 0d       	add	r31, r0
 532:	11 24       	eor	r1, r1
 534:	e5 5f       	subi	r30, 0xF5	; 245
 536:	fe 4f       	sbci	r31, 0xFE	; 254
 538:	25 a9       	ldd	r18, Z+53	; 0x35
 53a:	26 ab       	std	Z+54, r18	; 0x36
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 53c:	83 a9       	ldd	r24, Z+51	; 0x33
 53e:	85 ab       	std	Z+53, r24	; 0x35
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a + gl_set[sensor_id].ir_history_b) / 2;
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	82 0f       	add	r24, r18
 544:	91 1d       	adc	r25, r1
 546:	95 95       	asr	r25
 548:	87 95       	ror	r24
 54a:	28 2f       	mov	r18, r24
 54c:	87 ab       	std	Z+55, r24	; 0x37
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 54e:	2b 5f       	subi	r18, 0xFB	; 251
 550:	22 ab       	std	Z+50, r18	; 0x32
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 552:	2a 50       	subi	r18, 0x0A	; 10
 554:	21 ab       	std	Z+49, r18	; 0x31
	}
}
 556:	ff 91       	pop	r31
 558:	ef 91       	pop	r30
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	bf 91       	pop	r27
 560:	af 91       	pop	r26
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	7f 91       	pop	r23
 568:	6f 91       	pop	r22
 56a:	5f 91       	pop	r21
 56c:	4f 91       	pop	r20
 56e:	3f 91       	pop	r19
 570:	2f 91       	pop	r18
 572:	1f 91       	pop	r17
 574:	0f 91       	pop	r16
 576:	ff 90       	pop	r15
 578:	ef 90       	pop	r14
 57a:	df 90       	pop	r13
 57c:	cf 90       	pop	r12
 57e:	bf 90       	pop	r11
 580:	af 90       	pop	r10
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <lcd_send_4b_mode>:



void lcd_send_4b_mode(unsigned char data){
	
  LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 58c:	9a b1       	in	r25, 0x0a	; 10
 58e:	9f 60       	ori	r25, 0x0F	; 15
 590:	9a b9       	out	0x0a, r25	; 10
	
	LCD_EN_PORT |= _BV(LCD_EN);
 592:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 594:	48 e8       	ldi	r20, 0x88	; 136
 596:	53 e1       	ldi	r21, 0x13	; 19
 598:	fa 01       	movw	r30, r20
 59a:	31 97       	sbiw	r30, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_send_4b_mode+0xe>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 59e:	9b b1       	in	r25, 0x0b	; 11
 5a0:	90 7f       	andi	r25, 0xF0	; 240
 5a2:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data>>4)<<LCD_SHIFT)&LCD_MASK;
 5a4:	2b b1       	in	r18, 0x0b	; 11
 5a6:	98 2f       	mov	r25, r24
 5a8:	92 95       	swap	r25
 5aa:	9f 70       	andi	r25, 0x0F	; 15
 5ac:	92 2b       	or	r25, r18
 5ae:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5b0:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 5b2:	45 9a       	sbi	0x08, 5	; 8
 5b4:	fa 01       	movw	r30, r20
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <lcd_send_4b_mode+0x2a>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5ba:	9b b1       	in	r25, 0x0b	; 11
 5bc:	90 7f       	andi	r25, 0xF0	; 240
 5be:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data&LCD_MASK)<<LCD_SHIFT);
 5c0:	9b b1       	in	r25, 0x0b	; 11
 5c2:	8f 70       	andi	r24, 0x0F	; 15
 5c4:	98 2b       	or	r25, r24
 5c6:	9b b9       	out	0x0b, r25	; 11


	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5c8:	45 98       	cbi	0x08, 5	; 8
 5ca:	ca 01       	movw	r24, r20
 5cc:	01 97       	sbiw	r24, 0x01	; 1
 5ce:	f1 f7       	brne	.-4      	; 0x5cc <lcd_send_4b_mode+0x40>
	_delay_ms (1);
} 
 5d0:	08 95       	ret

000005d2 <cls>:
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
		cls();
}
void cls(){     // clear the display
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 5d2:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(0x01);   
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	da df       	rcall	.-76     	; 0x58c <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 5d8:	5c 9a       	sbi	0x0b, 4	; 11
}
 5da:	08 95       	ret

000005dc <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}


void ini_lcd_4_bit_mode(){
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	c8 e5       	ldi	r28, 0x58	; 88
 5e2:	d0 e0       	ldi	r29, 0x00	; 0
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 5e4:	fe 01       	movw	r30, r28
 5e6:	84 91       	lpm	r24, Z+
 5e8:	d1 df       	rcall	.-94     	; 0x58c <lcd_send_4b_mode>
 5ea:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode(){
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	c0 36       	cpi	r28, 0x60	; 96
 5f0:	df 07       	cpc	r29, r31
 5f2:	c1 f7       	brne	.-16     	; 0x5e4 <ini_lcd_4_bit_mode+0x8>
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
   }
   LCD_RS_PORT |= _BV(LCD_RS);
 5f4:	5c 9a       	sbi	0x0b, 4	; 11
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms (1);
} 

void lcd_ini_sequence()
{
 5fc:	84 ec       	ldi	r24, 0xC4	; 196
 5fe:	99 e0       	ldi	r25, 0x09	; 9
 600:	24 ef       	ldi	r18, 0xF4	; 244
 602:	31 e0       	ldi	r19, 0x01	; 1
 604:	f9 01       	movw	r30, r18
 606:	31 97       	sbiw	r30, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 60a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 60c:	d9 f7       	brne	.-10     	; 0x604 <lcd_ini_sequence+0x8>
		
		_delay_ms(250); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 60e:	e6 df       	rcall	.-52     	; 0x5dc <ini_lcd_4_bit_mode>
		cls();
 610:	e0 df       	rcall	.-64     	; 0x5d2 <cls>
 612:	80 e5       	ldi	r24, 0x50	; 80
 614:	93 ec       	ldi	r25, 0xC3	; 195
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <lcd_ini_sequence+0x1a>
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 61a:	e0 df       	rcall	.-64     	; 0x5dc <ini_lcd_4_bit_mode>
		cls();
 61c:	da df       	rcall	.-76     	; 0x5d2 <cls>
}
 61e:	08 95       	ret

00000620 <locate>:
   LCD_RS_PORT |= _BV(LCD_RS);
}

void locate(unsigned char pos){
   pos = pos | (1 << 7);
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 620:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(pos);   
 622:	80 68       	ori	r24, 0x80	; 128
 624:	b3 df       	rcall	.-154    	; 0x58c <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 626:	5c 9a       	sbi	0x0b, 4	; 11
}
 628:	08 95       	ret

0000062a <put_str>:
	{
		lcd_send_4b_mode(' ');  
	}
}

void put_str(uchar pos, char* str){     
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 634:	f5 df       	rcall	.-22     	; 0x620 <locate>
 636:	c0 e0       	ldi	r28, 0x00	; 0
 638:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i< 16; i++){				
		lcd_send_4b_mode(pgm_read_byte(str + i));
 63a:	f8 01       	movw	r30, r16
 63c:	ec 0f       	add	r30, r28
 63e:	fd 1f       	adc	r31, r29
 640:	e4 91       	lpm	r30, Z+
 642:	8e 2f       	mov	r24, r30
 644:	a3 df       	rcall	.-186    	; 0x58c <lcd_send_4b_mode>
 646:	21 96       	adiw	r28, 0x01	; 1
}

void put_str(uchar pos, char* str){     
	uchar i;
	locate(pos);
	for (i = 0; i< 16; i++){				
 648:	c0 31       	cpi	r28, 0x10	; 16
 64a:	d1 05       	cpc	r29, r1
 64c:	b1 f7       	brne	.-20     	; 0x63a <put_str+0x10>
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	08 95       	ret

00000658 <clr_line>:
   LCD_RS_PORT &= ~(_BV(LCD_RS));
   lcd_send_4b_mode(0x01);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add){     // clear line
 658:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 65a:	e2 df       	rcall	.-60     	; 0x620 <locate>
 65c:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<16; i++)
	{
		lcd_send_4b_mode(' ');  
 65e:	80 e2       	ldi	r24, 0x20	; 32
 660:	95 df       	rcall	.-214    	; 0x58c <lcd_send_4b_mode>
}

void clr_line(uchar start_add){     // clear line
	uchar i;
	locate(start_add);
	for (i=0; i<16; i++)
 662:	1f 5f       	subi	r17, 0xFF	; 255
 664:	10 31       	cpi	r17, 0x10	; 16
 666:	d9 f7       	brne	.-10     	; 0x65e <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');  
	}
}
 668:	1f 91       	pop	r17
 66a:	08 95       	ret

0000066c <lcd_contrast>:
void lcd_contrast()
{


	
}
 66c:	08 95       	ret

0000066e <format>:

void format(char* line1,char* line2){     // reformat the display
 66e:	ef 92       	push	r14
 670:	ff 92       	push	r15
 672:	0f 93       	push	r16
 674:	1f 93       	push	r17
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
 67a:	8c 01       	movw	r16, r24
 67c:	7b 01       	movw	r14, r22
    unsigned char i;
		locate(0);
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	cf df       	rcall	.-98     	; 0x620 <locate>
 682:	c0 e0       	ldi	r28, 0x00	; 0
 684:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
 686:	f8 01       	movw	r30, r16
 688:	ec 0f       	add	r30, r28
 68a:	fd 1f       	adc	r31, r29
 68c:	e4 91       	lpm	r30, Z+
 68e:	8e 2f       	mov	r24, r30
 690:	7d df       	rcall	.-262    	; 0x58c <lcd_send_4b_mode>
 692:	21 96       	adiw	r28, 0x01	; 1
}

void format(char* line1,char* line2){     // reformat the display
    unsigned char i;
		locate(0);
		for (i = 0; i< 16; i++){				
 694:	c0 31       	cpi	r28, 0x10	; 16
 696:	d1 05       	cpc	r29, r1
 698:	b1 f7       	brne	.-20     	; 0x686 <format+0x18>
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
 69a:	80 e4       	ldi	r24, 0x40	; 64
 69c:	c1 df       	rcall	.-126    	; 0x620 <locate>
 69e:	c0 e0       	ldi	r28, 0x00	; 0
 6a0:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
 6a2:	f7 01       	movw	r30, r14
 6a4:	ec 0f       	add	r30, r28
 6a6:	fd 1f       	adc	r31, r29
 6a8:	e4 91       	lpm	r30, Z+
 6aa:	8e 2f       	mov	r24, r30
 6ac:	6f df       	rcall	.-290    	; 0x58c <lcd_send_4b_mode>
 6ae:	21 96       	adiw	r28, 0x01	; 1
		locate(0);
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
		for (i = 0; i< 16; i++){
 6b0:	c0 31       	cpi	r28, 0x10	; 16
 6b2:	d1 05       	cpc	r29, r1
 6b4:	b1 f7       	brne	.-20     	; 0x6a2 <format+0x34>
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
		}
}
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	0f 91       	pop	r16
 6be:	ff 90       	pop	r15
 6c0:	ef 90       	pop	r14
 6c2:	08 95       	ret

000006c4 <lcd_send_floatx10>:
   lcd_send_4b_mode(pos);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data,uchar location, uchar len, uchar d_len)
{
 6c4:	af 92       	push	r10
 6c6:	bf 92       	push	r11
 6c8:	cf 92       	push	r12
 6ca:	df 92       	push	r13
 6cc:	ef 92       	push	r14
 6ce:	ff 92       	push	r15
 6d0:	0f 93       	push	r16
 6d2:	1f 93       	push	r17
 6d4:	df 93       	push	r29
 6d6:	cf 93       	push	r28
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	60 97       	sbiw	r28, 0x10	; 16
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	de bf       	out	0x3e, r29	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	cd bf       	out	0x3d, r28	; 61
 6e8:	6b 01       	movw	r12, r22
 6ea:	7c 01       	movw	r14, r24
 6ec:	14 2f       	mov	r17, r20
 6ee:	a2 2e       	mov	r10, r18
 6f0:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];
	
	uchar i,y,temp,int_len;
	t=0;
 6f2:	10 92 00 01 	sts	0x0100, r1

	if (data < 0)
 6f6:	97 ff       	sbrs	r25, 7
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 6fa:	8e e4       	ldi	r24, 0x4E	; 78
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	06 c0       	rjmp	.+12     	; 0x70c <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 700:	ae 01       	movw	r20, r28
 702:	4f 5f       	subi	r20, 0xFF	; 255
 704:	5f 4f       	sbci	r21, 0xFF	; 255
 706:	2a e0       	ldi	r18, 0x0A	; 10
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	de d0       	rcall	.+444    	; 0x8c8 <ltoa>
	}

	locate(location);
 70c:	81 2f       	mov	r24, r17
 70e:	88 df       	rcall	.-240    	; 0x620 <locate>

	i=0;
	if (d_len == 2)
 710:	82 e0       	ldi	r24, 0x02	; 2
 712:	b8 16       	cp	r11, r24
 714:	11 f0       	breq	.+4      	; 0x71a <lcd_send_floatx10+0x56>
 716:	8a e0       	ldi	r24, 0x0A	; 10
 718:	01 c0       	rjmp	.+2      	; 0x71c <lcd_send_floatx10+0x58>
 71a:	84 e6       	ldi	r24, 0x64	; 100
		temp = 100;
	}else{
		temp = 10;	
	}

	if( data >= temp){
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	a0 e0       	ldi	r26, 0x00	; 0
 720:	b0 e0       	ldi	r27, 0x00	; 0
 722:	c8 16       	cp	r12, r24
 724:	d9 06       	cpc	r13, r25
 726:	ea 06       	cpc	r14, r26
 728:	fb 06       	cpc	r15, r27
 72a:	0c f4       	brge	.+2      	; 0x72e <lcd_send_floatx10+0x6a>
 72c:	47 c0       	rjmp	.+142    	; 0x7bc <lcd_send_floatx10+0xf8>
		if (strlen(buffer)>len)
 72e:	fe 01       	movw	r30, r28
 730:	31 96       	adiw	r30, 0x01	; 1
 732:	df 01       	movw	r26, r30
 734:	0d 90       	ld	r0, X+
 736:	00 20       	and	r0, r0
 738:	e9 f7       	brne	.-6      	; 0x734 <lcd_send_floatx10+0x70>
 73a:	11 97       	sbiw	r26, 0x01	; 1
 73c:	ae 1b       	sub	r26, r30
 73e:	bf 0b       	sbc	r27, r31
 740:	8a 2d       	mov	r24, r10
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	8a 17       	cp	r24, r26
 746:	9b 07       	cpc	r25, r27
 748:	10 f4       	brcc	.+4      	; 0x74e <lcd_send_floatx10+0x8a>
 74a:	8a 2d       	mov	r24, r10
 74c:	01 c0       	rjmp	.+2      	; 0x750 <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 74e:	8a 2f       	mov	r24, r26
 750:	00 e0       	ldi	r16, 0x00	; 0
		}

		for(i=0; i<(int_len-d_len);i++)
 752:	e8 2e       	mov	r14, r24
 754:	ff 24       	eor	r15, r15
 756:	eb 18       	sub	r14, r11
 758:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 75a:	6e 01       	movw	r12, r28
 75c:	08 94       	sec
 75e:	c1 1c       	adc	r12, r1
 760:	d1 1c       	adc	r13, r1
 762:	0a c0       	rjmp	.+20     	; 0x778 <lcd_send_floatx10+0xb4>
 764:	ec 0d       	add	r30, r12
 766:	fd 1d       	adc	r31, r13
 768:	80 81       	ld	r24, Z
 76a:	10 df       	rcall	.-480    	; 0x58c <lcd_send_4b_mode>
			t++;
 76c:	80 91 00 01 	lds	r24, 0x0100
 770:	8f 5f       	subi	r24, 0xFF	; 255
 772:	80 93 00 01 	sts	0x0100, r24
		else
		{
			int_len = strlen(buffer);
		}

		for(i=0; i<(int_len-d_len);i++)
 776:	0f 5f       	subi	r16, 0xFF	; 255
 778:	e0 2f       	mov	r30, r16
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	ee 15       	cp	r30, r14
 77e:	ff 05       	cpc	r31, r15
 780:	8c f3       	brlt	.-30     	; 0x764 <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 782:	8e e2       	ldi	r24, 0x2E	; 46
 784:	03 df       	rcall	.-506    	; 0x58c <lcd_send_4b_mode>
		t++;
 786:	80 91 00 01 	lds	r24, 0x0100
 78a:	8f 5f       	subi	r24, 0xFF	; 255
 78c:	80 93 00 01 	sts	0x0100, r24
 790:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<(d_len);y++)
		{
			lcd_send_4b_mode(buffer[i]);
 792:	7e 01       	movw	r14, r28
 794:	08 94       	sec
 796:	e1 1c       	adc	r14, r1
 798:	f1 1c       	adc	r15, r1
 79a:	0b c0       	rjmp	.+22     	; 0x7b2 <lcd_send_floatx10+0xee>
 79c:	f7 01       	movw	r30, r14
 79e:	e8 0f       	add	r30, r24
 7a0:	f1 1d       	adc	r31, r1
 7a2:	80 81       	ld	r24, Z
 7a4:	f3 de       	rcall	.-538    	; 0x58c <lcd_send_4b_mode>
			i++;	
			t++;
 7a6:	80 91 00 01 	lds	r24, 0x0100
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	80 93 00 01 	sts	0x0100, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<(d_len);y++)
 7b0:	1f 5f       	subi	r17, 0xFF	; 255
 7b2:	81 2f       	mov	r24, r17
 7b4:	80 0f       	add	r24, r16
 7b6:	1b 15       	cp	r17, r11
 7b8:	88 f3       	brcs	.-30     	; 0x79c <lcd_send_floatx10+0xd8>
 7ba:	34 c0       	rjmp	.+104    	; 0x824 <lcd_send_floatx10+0x160>
			i++;	
			t++;
		}
		
	}else{
		lcd_send_4b_mode('0');
 7bc:	80 e3       	ldi	r24, 0x30	; 48
 7be:	e6 de       	rcall	.-564    	; 0x58c <lcd_send_4b_mode>
		t++;
 7c0:	80 91 00 01 	lds	r24, 0x0100
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	80 93 00 01 	sts	0x0100, r24
		lcd_send_4b_mode('.');
 7ca:	8e e2       	ldi	r24, 0x2E	; 46
 7cc:	df de       	rcall	.-578    	; 0x58c <lcd_send_4b_mode>
		t++;
 7ce:	80 91 00 01 	lds	r24, 0x0100
 7d2:	8f 5f       	subi	r24, 0xFF	; 255
 7d4:	80 93 00 01 	sts	0x0100, r24
 7d8:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<d_len;y++)
		{
			if(y < strlen(buffer))
 7da:	7e 01       	movw	r14, r28
 7dc:	08 94       	sec
 7de:	e1 1c       	adc	r14, r1
 7e0:	f1 1c       	adc	r15, r1
 7e2:	16 c0       	rjmp	.+44     	; 0x810 <lcd_send_floatx10+0x14c>
 7e4:	f7 01       	movw	r30, r14
 7e6:	01 90       	ld	r0, Z+
 7e8:	00 20       	and	r0, r0
 7ea:	e9 f7       	brne	.-6      	; 0x7e6 <lcd_send_floatx10+0x122>
 7ec:	31 97       	sbiw	r30, 0x01	; 1
 7ee:	ee 19       	sub	r30, r14
 7f0:	ff 09       	sbc	r31, r15
 7f2:	a1 2f       	mov	r26, r17
 7f4:	b0 e0       	ldi	r27, 0x00	; 0
 7f6:	ae 17       	cp	r26, r30
 7f8:	bf 07       	cpc	r27, r31
 7fa:	48 f4       	brcc	.+18     	; 0x80e <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);	
 7fc:	ae 0d       	add	r26, r14
 7fe:	bf 1d       	adc	r27, r15
 800:	8c 91       	ld	r24, X
 802:	c4 de       	rcall	.-632    	; 0x58c <lcd_send_4b_mode>
				i++;
				t++;
 804:	80 91 00 01 	lds	r24, 0x0100
 808:	8f 5f       	subi	r24, 0xFF	; 255
 80a:	80 93 00 01 	sts	0x0100, r24
	}else{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<d_len;y++)
 80e:	1f 5f       	subi	r17, 0xFF	; 255
 810:	1b 15       	cp	r17, r11
 812:	40 f3       	brcs	.-48     	; 0x7e4 <lcd_send_floatx10+0x120>
 814:	07 c0       	rjmp	.+14     	; 0x824 <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
	{
		lcd_send_4b_mode(' ');
 816:	80 e2       	ldi	r24, 0x20	; 32
 818:	b9 de       	rcall	.-654    	; 0x58c <lcd_send_4b_mode>
		t++;
 81a:	80 91 00 01 	lds	r24, 0x0100
 81e:	8f 5f       	subi	r24, 0xFF	; 255
 820:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
 824:	80 91 00 01 	lds	r24, 0x0100
 828:	8a 15       	cp	r24, r10
 82a:	a8 f3       	brcs	.-22     	; 0x816 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 82c:	60 96       	adiw	r28, 0x10	; 16
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	de bf       	out	0x3e, r29	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	cd bf       	out	0x3d, r28	; 61
 838:	cf 91       	pop	r28
 83a:	df 91       	pop	r29
 83c:	1f 91       	pop	r17
 83e:	0f 91       	pop	r16
 840:	ff 90       	pop	r15
 842:	ef 90       	pop	r14
 844:	df 90       	pop	r13
 846:	cf 90       	pop	r12
 848:	bf 90       	pop	r11
 84a:	af 90       	pop	r10
 84c:	08 95       	ret

0000084e <__divmodsi4>:
 84e:	97 fb       	bst	r25, 7
 850:	09 2e       	mov	r0, r25
 852:	05 26       	eor	r0, r21
 854:	0e d0       	rcall	.+28     	; 0x872 <__divmodsi4_neg1>
 856:	57 fd       	sbrc	r21, 7
 858:	04 d0       	rcall	.+8      	; 0x862 <__divmodsi4_neg2>
 85a:	14 d0       	rcall	.+40     	; 0x884 <__udivmodsi4>
 85c:	0a d0       	rcall	.+20     	; 0x872 <__divmodsi4_neg1>
 85e:	00 1c       	adc	r0, r0
 860:	38 f4       	brcc	.+14     	; 0x870 <__divmodsi4_exit>

00000862 <__divmodsi4_neg2>:
 862:	50 95       	com	r21
 864:	40 95       	com	r20
 866:	30 95       	com	r19
 868:	21 95       	neg	r18
 86a:	3f 4f       	sbci	r19, 0xFF	; 255
 86c:	4f 4f       	sbci	r20, 0xFF	; 255
 86e:	5f 4f       	sbci	r21, 0xFF	; 255

00000870 <__divmodsi4_exit>:
 870:	08 95       	ret

00000872 <__divmodsi4_neg1>:
 872:	f6 f7       	brtc	.-4      	; 0x870 <__divmodsi4_exit>
 874:	90 95       	com	r25
 876:	80 95       	com	r24
 878:	70 95       	com	r23
 87a:	61 95       	neg	r22
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	08 95       	ret

00000884 <__udivmodsi4>:
 884:	a1 e2       	ldi	r26, 0x21	; 33
 886:	1a 2e       	mov	r1, r26
 888:	aa 1b       	sub	r26, r26
 88a:	bb 1b       	sub	r27, r27
 88c:	fd 01       	movw	r30, r26
 88e:	0d c0       	rjmp	.+26     	; 0x8aa <__udivmodsi4_ep>

00000890 <__udivmodsi4_loop>:
 890:	aa 1f       	adc	r26, r26
 892:	bb 1f       	adc	r27, r27
 894:	ee 1f       	adc	r30, r30
 896:	ff 1f       	adc	r31, r31
 898:	a2 17       	cp	r26, r18
 89a:	b3 07       	cpc	r27, r19
 89c:	e4 07       	cpc	r30, r20
 89e:	f5 07       	cpc	r31, r21
 8a0:	20 f0       	brcs	.+8      	; 0x8aa <__udivmodsi4_ep>
 8a2:	a2 1b       	sub	r26, r18
 8a4:	b3 0b       	sbc	r27, r19
 8a6:	e4 0b       	sbc	r30, r20
 8a8:	f5 0b       	sbc	r31, r21

000008aa <__udivmodsi4_ep>:
 8aa:	66 1f       	adc	r22, r22
 8ac:	77 1f       	adc	r23, r23
 8ae:	88 1f       	adc	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	1a 94       	dec	r1
 8b4:	69 f7       	brne	.-38     	; 0x890 <__udivmodsi4_loop>
 8b6:	60 95       	com	r22
 8b8:	70 95       	com	r23
 8ba:	80 95       	com	r24
 8bc:	90 95       	com	r25
 8be:	9b 01       	movw	r18, r22
 8c0:	ac 01       	movw	r20, r24
 8c2:	bd 01       	movw	r22, r26
 8c4:	cf 01       	movw	r24, r30
 8c6:	08 95       	ret

000008c8 <ltoa>:
 8c8:	fa 01       	movw	r30, r20
 8ca:	cf 93       	push	r28
 8cc:	ff 93       	push	r31
 8ce:	ef 93       	push	r30
 8d0:	22 30       	cpi	r18, 0x02	; 2
 8d2:	3c f1       	brlt	.+78     	; 0x922 <ltoa+0x5a>
 8d4:	25 32       	cpi	r18, 0x25	; 37
 8d6:	2c f5       	brge	.+74     	; 0x922 <ltoa+0x5a>
 8d8:	c2 2f       	mov	r28, r18
 8da:	e8 94       	clt
 8dc:	ca 30       	cpi	r28, 0x0A	; 10
 8de:	49 f4       	brne	.+18     	; 0x8f2 <ltoa+0x2a>
 8e0:	97 fb       	bst	r25, 7
 8e2:	3e f4       	brtc	.+14     	; 0x8f2 <ltoa+0x2a>
 8e4:	90 95       	com	r25
 8e6:	80 95       	com	r24
 8e8:	70 95       	com	r23
 8ea:	61 95       	neg	r22
 8ec:	7f 4f       	sbci	r23, 0xFF	; 255
 8ee:	8f 4f       	sbci	r24, 0xFF	; 255
 8f0:	9f 4f       	sbci	r25, 0xFF	; 255
 8f2:	2c 2f       	mov	r18, r28
 8f4:	33 27       	eor	r19, r19
 8f6:	44 27       	eor	r20, r20
 8f8:	55 27       	eor	r21, r21
 8fa:	ff 93       	push	r31
 8fc:	ef 93       	push	r30
 8fe:	c2 df       	rcall	.-124    	; 0x884 <__udivmodsi4>
 900:	ef 91       	pop	r30
 902:	ff 91       	pop	r31
 904:	60 5d       	subi	r22, 0xD0	; 208
 906:	6a 33       	cpi	r22, 0x3A	; 58
 908:	0c f0       	brlt	.+2      	; 0x90c <ltoa+0x44>
 90a:	69 5d       	subi	r22, 0xD9	; 217
 90c:	61 93       	st	Z+, r22
 90e:	b9 01       	movw	r22, r18
 910:	ca 01       	movw	r24, r20
 912:	60 50       	subi	r22, 0x00	; 0
 914:	70 40       	sbci	r23, 0x00	; 0
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	59 f7       	brne	.-42     	; 0x8f2 <ltoa+0x2a>
 91c:	16 f4       	brtc	.+4      	; 0x922 <ltoa+0x5a>
 91e:	cd e2       	ldi	r28, 0x2D	; 45
 920:	c1 93       	st	Z+, r28
 922:	10 82       	st	Z, r1
 924:	8f 91       	pop	r24
 926:	9f 91       	pop	r25
 928:	cf 91       	pop	r28
 92a:	00 c0       	rjmp	.+0      	; 0x92c <strrev>

0000092c <strrev>:
 92c:	dc 01       	movw	r26, r24
 92e:	fc 01       	movw	r30, r24
 930:	67 2f       	mov	r22, r23
 932:	71 91       	ld	r23, Z+
 934:	77 23       	and	r23, r23
 936:	e1 f7       	brne	.-8      	; 0x930 <strrev+0x4>
 938:	32 97       	sbiw	r30, 0x02	; 2
 93a:	04 c0       	rjmp	.+8      	; 0x944 <strrev+0x18>
 93c:	7c 91       	ld	r23, X
 93e:	6d 93       	st	X+, r22
 940:	70 83       	st	Z, r23
 942:	62 91       	ld	r22, -Z
 944:	ae 17       	cp	r26, r30
 946:	bf 07       	cpc	r27, r31
 948:	c8 f3       	brcs	.-14     	; 0x93c <strrev+0x10>
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
