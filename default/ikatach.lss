
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000a70  00000b04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000079  00800108  00800108  00000b0c  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e0  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c53  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000410  00000000  00000000  00001abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000088f  00000000  00000000  00001ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f9  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004cc  00000000  00000000  00002b99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	49 c0       	rjmp	.+146    	; 0x96 <__bad_interrupt>
   4:	48 c0       	rjmp	.+144    	; 0x96 <__bad_interrupt>
   6:	47 c0       	rjmp	.+142    	; 0x96 <__bad_interrupt>
   8:	46 c0       	rjmp	.+140    	; 0x96 <__bad_interrupt>
   a:	45 c0       	rjmp	.+138    	; 0x96 <__bad_interrupt>
   c:	44 c0       	rjmp	.+136    	; 0x96 <__bad_interrupt>
   e:	43 c0       	rjmp	.+134    	; 0x96 <__bad_interrupt>
  10:	42 c0       	rjmp	.+132    	; 0x96 <__bad_interrupt>
  12:	41 c0       	rjmp	.+130    	; 0x96 <__bad_interrupt>
  14:	40 c0       	rjmp	.+128    	; 0x96 <__bad_interrupt>
  16:	3f c0       	rjmp	.+126    	; 0x96 <__bad_interrupt>
  18:	3e c0       	rjmp	.+124    	; 0x96 <__bad_interrupt>
  1a:	9f c2       	rjmp	.+1342   	; 0x55a <__vector_13>
  1c:	3c c0       	rjmp	.+120    	; 0x96 <__bad_interrupt>
  1e:	3b c0       	rjmp	.+118    	; 0x96 <__bad_interrupt>
  20:	3a c0       	rjmp	.+116    	; 0x96 <__bad_interrupt>
  22:	39 c0       	rjmp	.+114    	; 0x96 <__bad_interrupt>
  24:	38 c0       	rjmp	.+112    	; 0x96 <__bad_interrupt>
  26:	37 c0       	rjmp	.+110    	; 0x96 <__bad_interrupt>
  28:	36 c0       	rjmp	.+108    	; 0x96 <__bad_interrupt>
  2a:	a8 c2       	rjmp	.+1360   	; 0x57c <__vector_21>
  2c:	34 c0       	rjmp	.+104    	; 0x96 <__bad_interrupt>
  2e:	33 c0       	rjmp	.+102    	; 0x96 <__bad_interrupt>
  30:	32 c0       	rjmp	.+100    	; 0x96 <__bad_interrupt>
  32:	31 c0       	rjmp	.+98     	; 0x96 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	e0 e7       	ldi	r30, 0x70	; 112
  74:	fa e0       	ldi	r31, 0x0A	; 10
  76:	02 c0       	rjmp	.+4      	; 0x7c <.do_copy_data_start>

00000078 <.do_copy_data_loop>:
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0

0000007c <.do_copy_data_start>:
  7c:	a8 30       	cpi	r26, 0x08	; 8
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <.do_copy_data_loop>

00000082 <__do_clear_bss>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a8 e0       	ldi	r26, 0x08	; 8
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a1 38       	cpi	r26, 0x81	; 129
  8e:	b1 07       	cpc	r27, r17
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	09 d0       	rcall	.+18     	; 0xa6 <main>
  94:	eb c4       	rjmp	.+2518   	; 0xa6c <_exit>

00000096 <__bad_interrupt>:
  96:	b4 cf       	rjmp	.-152    	; 0x0 <__vectors>

00000098 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  98:	68 17       	cp	r22, r24
  9a:	10 f4       	brcc	.+4      	; 0xa0 <delta+0x8>
	{
		return (v1 - v2);
  9c:	86 1b       	sub	r24, r22
  9e:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  a0:	68 1b       	sub	r22, r24
  a2:	86 2f       	mov	r24, r22
	}
}
  a4:	08 95       	ret

000000a6 <main>:

int main()
{
  a6:	2f 92       	push	r2
  a8:	3f 92       	push	r3
  aa:	4f 92       	push	r4
  ac:	5f 92       	push	r5
  ae:	6f 92       	push	r6
  b0:	7f 92       	push	r7
  b2:	8f 92       	push	r8
  b4:	9f 92       	push	r9
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	df 93       	push	r29
  c8:	cf 93       	push	r28
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	62 97       	sbiw	r28, 0x12	; 18
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
	sensor_id = 0;
  da:	10 92 80 01 	sts	0x0180, r1
	long time_count;
	long rpm_x10, last_rpm_x10[2] = {0, 0};
  de:	de 01       	movw	r26, r28
  e0:	17 96       	adiw	r26, 0x07	; 7
  e2:	e0 e0       	ldi	r30, 0x00	; 0
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	88 e0       	ldi	r24, 0x08	; 8
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x42>

	uchar i;
	char animation[4], anim_counter[2] = {0, 0};
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	1a 82       	std	Y+2, r1	; 0x02
	animation[0] = 0xD9;
  f4:	89 ed       	ldi	r24, 0xD9	; 217
  f6:	8b 83       	std	Y+3, r24	; 0x03
	animation[1] = 0xC9;
  f8:	89 ec       	ldi	r24, 0xC9	; 201
  fa:	8c 83       	std	Y+4, r24	; 0x04
	animation[2] = 0xDA;
  fc:	8a ed       	ldi	r24, 0xDA	; 218
  fe:	8d 83       	std	Y+5, r24	; 0x05
	animation[3] = 0xC8;
 100:	88 ec       	ldi	r24, 0xC8	; 200
 102:	8e 83       	std	Y+6, r24	; 0x06

	setup_timers();
 104:	12 d2       	rcall	.+1060   	; 0x52a <setup_timers>

	setup_io();
 106:	21 d2       	rcall	.+1090   	; 0x54a <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
 108:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
 10a:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
 10c:	07 d3       	rcall	.+1550   	; 0x71c <lcd_ini_sequence>
	LED_ON
 10e:	57 9a       	sbi	0x0a, 7	; 10
 110:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
 112:	3c 9a       	sbi	0x07, 4	; 7
 114:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
 116:	55 9a       	sbi	0x0a, 5	; 10
	sei();
 118:	78 94       	sei
	format(line1, line2);
 11a:	84 e3       	ldi	r24, 0x34	; 52
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	66 e4       	ldi	r22, 0x46	; 70
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	35 d3       	rcall	.+1642   	; 0x78e <format>

	gl_set[0].rpm_avg = 0;
 124:	10 92 0a 01 	sts	0x010A, r1
 128:	10 92 0b 01 	sts	0x010B, r1
 12c:	10 92 0c 01 	sts	0x010C, r1
 130:	10 92 0d 01 	sts	0x010D, r1
	gl_set[0].ain_th_low = 20;
 134:	94 e1       	ldi	r25, 0x14	; 20
 136:	90 93 3a 01 	sts	0x013A, r25
	gl_set[0].ain_th_high = 45;
 13a:	8d e2       	ldi	r24, 0x2D	; 45
 13c:	80 93 3b 01 	sts	0x013B, r24

	gl_set[1].rpm_avg = 0;
 140:	10 92 42 01 	sts	0x0142, r1
 144:	10 92 43 01 	sts	0x0143, r1
 148:	10 92 44 01 	sts	0x0144, r1
 14c:	10 92 45 01 	sts	0x0145, r1
	gl_set[1].ain_th_low = 20;
 150:	90 93 72 01 	sts	0x0172, r25
	gl_set[1].ain_th_high = 45;
 154:	80 93 73 01 	sts	0x0173, r24

	LED_OFF;
 158:	5f 98       	cbi	0x0b, 7	; 11
	ADMUX = 2 + sensor_id;
 15a:	80 91 80 01 	lds	r24, 0x0180
 15e:	8e 5f       	subi	r24, 0xFE	; 254
 160:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 164:	8d ee       	ldi	r24, 0xED	; 237
 166:	80 93 7a 00 	sts	0x007A, r24
	SENSOR_ON;
 16a:	39 9a       	sbi	0x07, 1	; 7
 16c:	41 9a       	sbi	0x08, 1	; 8
	LED_ON;
 16e:	57 9a       	sbi	0x0a, 7	; 10
 170:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_CONTRAST = 0;
 172:	18 bc       	out	0x28, r1	; 40
 174:	22 24       	eor	r2, r2
 176:	33 24       	eor	r3, r3
 178:	21 01       	movw	r4, r2
 17a:	1f 86       	std	Y+15, r1	; 0x0f
 17c:	18 8a       	std	Y+16, r1	; 0x10
 17e:	19 8a       	std	Y+17, r1	; 0x11
 180:	1a 8a       	std	Y+18, r1	; 0x12
	long int time_with_current_sensor_id = 0;
	long int time_count_prev = 0;

	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
 182:	80 91 7c 01 	lds	r24, 0x017C
 186:	90 91 7d 01 	lds	r25, 0x017D
 18a:	a0 e0       	ldi	r26, 0x00	; 0
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	6c 01       	movw	r12, r24
 190:	bb 24       	eor	r11, r11
 192:	aa 24       	eor	r10, r10
 194:	80 91 7e 01 	lds	r24, 0x017E
 198:	90 91 7f 01 	lds	r25, 0x017F
 19c:	a0 e0       	ldi	r26, 0x00	; 0
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	a8 0e       	add	r10, r24
 1a2:	b9 1e       	adc	r11, r25
 1a4:	ca 1e       	adc	r12, r26
 1a6:	db 1e       	adc	r13, r27
		rpm_x10 = 187500000 / time_count;
 1a8:	60 ee       	ldi	r22, 0xE0	; 224
 1aa:	75 e0       	ldi	r23, 0x05	; 5
 1ac:	8d e2       	ldi	r24, 0x2D	; 45
 1ae:	9b e0       	ldi	r25, 0x0B	; 11
 1b0:	a6 01       	movw	r20, r12
 1b2:	95 01       	movw	r18, r10
 1b4:	dc d3       	rcall	.+1976   	; 0x96e <__divmodsi4>
 1b6:	79 01       	movw	r14, r18
 1b8:	8a 01       	movw	r16, r20
 1ba:	37 01       	movw	r6, r14
 1bc:	48 01       	movw	r8, r16
		if (last_rpm_x10[sensor_id] == 0)
 1be:	e0 91 80 01 	lds	r30, 0x0180
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	2c 0f       	add	r18, r28
 1d2:	3d 1f       	adc	r19, r29
 1d4:	e2 0f       	add	r30, r18
 1d6:	f3 1f       	adc	r31, r19
 1d8:	86 81       	ldd	r24, Z+6	; 0x06
 1da:	97 81       	ldd	r25, Z+7	; 0x07
 1dc:	a0 85       	ldd	r26, Z+8	; 0x08
 1de:	b1 85       	ldd	r27, Z+9	; 0x09
 1e0:	00 97       	sbiw	r24, 0x00	; 0
 1e2:	a1 05       	cpc	r26, r1
 1e4:	b1 05       	cpc	r27, r1
 1e6:	01 f5       	brne	.+64     	; 0x228 <main+0x182>
 1e8:	20 e0       	ldi	r18, 0x00	; 0
 1ea:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_his[i] = 0;
 1ec:	80 91 80 01 	lds	r24, 0x0180
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	fc 01       	movw	r30, r24
 1f8:	43 e0       	ldi	r20, 0x03	; 3
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	4a 95       	dec	r20
 200:	e1 f7       	brne	.-8      	; 0x1fa <main+0x154>
 202:	e8 1b       	sub	r30, r24
 204:	f9 0b       	sbc	r31, r25
 206:	e2 0f       	add	r30, r18
 208:	f3 1f       	adc	r31, r19
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e2 5f       	subi	r30, 0xF2	; 242
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	10 82       	st	Z, r1
 218:	11 82       	std	Z+1, r1	; 0x01
 21a:	12 82       	std	Z+2, r1	; 0x02
 21c:	13 82       	std	Z+3, r1	; 0x03
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		time_count = t_capture + (t_postscale * 65536);
		rpm_x10 = 187500000 / time_count;
		if (last_rpm_x10[sensor_id] == 0)
		{
			for (i = 0; i < MAX_NUM_MEAS; i++)
 222:	2a 30       	cpi	r18, 0x0A	; 10
 224:	31 05       	cpc	r19, r1
 226:	11 f7       	brne	.-60     	; 0x1ec <main+0x146>
			{
				gl_set[sensor_id].rpm_his[i] = 0;
			}
		}
		if (rpm_x10 > 40000)
 228:	31 e4       	ldi	r19, 0x41	; 65
 22a:	e3 16       	cp	r14, r19
 22c:	3c e9       	ldi	r19, 0x9C	; 156
 22e:	f3 06       	cpc	r15, r19
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	03 07       	cpc	r16, r19
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	13 07       	cpc	r17, r19
 238:	8c f0       	brlt	.+34     	; 0x25c <main+0x1b6>
			rpm_x10 = last_rpm_x10[sensor_id];
 23a:	e0 91 80 01 	lds	r30, 0x0180
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	4c 0f       	add	r20, r28
 24e:	5d 1f       	adc	r21, r29
 250:	e4 0f       	add	r30, r20
 252:	f5 1f       	adc	r31, r21
 254:	66 80       	ldd	r6, Z+6	; 0x06
 256:	77 80       	ldd	r7, Z+7	; 0x07
 258:	80 84       	ldd	r8, Z+8	; 0x08
 25a:	91 84       	ldd	r9, Z+9	; 0x09
		if (last_rpm_x10[sensor_id] != rpm_x10)
 25c:	20 91 80 01 	lds	r18, 0x0180
 260:	e2 2e       	mov	r14, r18
 262:	ff 24       	eor	r15, r15
 264:	f7 01       	movw	r30, r14
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	8c 0f       	add	r24, r28
 274:	9d 1f       	adc	r25, r29
 276:	e8 0f       	add	r30, r24
 278:	f9 1f       	adc	r31, r25
 27a:	86 81       	ldd	r24, Z+6	; 0x06
 27c:	97 81       	ldd	r25, Z+7	; 0x07
 27e:	a0 85       	ldd	r26, Z+8	; 0x08
 280:	b1 85       	ldd	r27, Z+9	; 0x09
 282:	86 15       	cp	r24, r6
 284:	97 05       	cpc	r25, r7
 286:	a8 05       	cpc	r26, r8
 288:	b9 05       	cpc	r27, r9
 28a:	09 f4       	brne	.+2      	; 0x28e <main+0x1e8>
 28c:	dd c0       	rjmp	.+442    	; 0x448 <__stack+0x149>
		{
			last_rpm_x10[sensor_id] = rpm_x10;

			if(sensor_id == 0) {locate(14);} else {locate(78);}
 28e:	22 23       	and	r18, r18
 290:	11 f4       	brne	.+4      	; 0x296 <main+0x1f0>
 292:	8e e0       	ldi	r24, 0x0E	; 14
 294:	01 c0       	rjmp	.+2      	; 0x298 <main+0x1f2>
 296:	8e e4       	ldi	r24, 0x4E	; 78
 298:	53 d2       	rcall	.+1190   	; 0x740 <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)anim_counter[sensor_id]]);
 29a:	80 91 80 01 	lds	r24, 0x0180
 29e:	e1 e0       	ldi	r30, 0x01	; 1
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	ec 0f       	add	r30, r28
 2a4:	fd 1f       	adc	r31, r29
 2a6:	e8 0f       	add	r30, r24
 2a8:	f1 1d       	adc	r31, r1
 2aa:	80 81       	ld	r24, Z
 2ac:	e3 e0       	ldi	r30, 0x03	; 3
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ec 0f       	add	r30, r28
 2b2:	fd 1f       	adc	r31, r29
 2b4:	e8 0f       	add	r30, r24
 2b6:	f1 1d       	adc	r31, r1
 2b8:	80 81       	ld	r24, Z
 2ba:	f8 d1       	rcall	.+1008   	; 0x6ac <lcd_send_4b_mode>
			anim_counter[sensor_id]++;
 2bc:	80 91 80 01 	lds	r24, 0x0180
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	e1 e0       	ldi	r30, 0x01	; 1
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ec 0f       	add	r30, r28
 2ca:	fd 1f       	adc	r31, r29
 2cc:	e2 0f       	add	r30, r18
 2ce:	f3 1f       	adc	r31, r19
 2d0:	80 81       	ld	r24, Z
 2d2:	8f 5f       	subi	r24, 0xFF	; 255
 2d4:	80 83       	st	Z, r24
			if (anim_counter[sensor_id] > 3)
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	08 f0       	brcs	.+2      	; 0x2dc <main+0x236>
				anim_counter[sensor_id] = 0;
 2da:	10 82       	st	Z, r1
			if (gl_set[sensor_id].n_measures < MAX_NUM_MEAS)
 2dc:	48 e3       	ldi	r20, 0x38	; 56
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	24 9f       	mul	r18, r20
 2e2:	f0 01       	movw	r30, r0
 2e4:	25 9f       	mul	r18, r21
 2e6:	f0 0d       	add	r31, r0
 2e8:	34 9f       	mul	r19, r20
 2ea:	f0 0d       	add	r31, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	e6 5f       	subi	r30, 0xF6	; 246
 2f0:	fe 4f       	sbci	r31, 0xFE	; 254
 2f2:	87 a9       	ldd	r24, Z+55	; 0x37
 2f4:	8a 30       	cpi	r24, 0x0A	; 10
 2f6:	10 f4       	brcc	.+4      	; 0x2fc <main+0x256>
				gl_set[sensor_id].n_measures++;
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	87 ab       	std	Z+55, r24	; 0x37
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
 300:	10 91 80 01 	lds	r17, 0x0180
 304:	ab 01       	movw	r20, r22
		return (v2 - v1);
	}
}

int main()
{
 306:	6f 5f       	subi	r22, 0xFF	; 255
 308:	7f 4f       	sbci	r23, 0xFF	; 255
				anim_counter[sensor_id] = 0;
			if (gl_set[sensor_id].n_measures < MAX_NUM_MEAS)
				gl_set[sensor_id].n_measures++;
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
 30a:	81 2f       	mov	r24, r17
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	9c 01       	movw	r18, r24
 314:	a3 e0       	ldi	r26, 0x03	; 3
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	aa 95       	dec	r26
 31c:	e1 f7       	brne	.-8      	; 0x316 <__stack+0x17>
 31e:	28 1b       	sub	r18, r24
 320:	39 0b       	sbc	r19, r25
 322:	24 0f       	add	r18, r20
 324:	35 1f       	adc	r19, r21
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	22 0f       	add	r18, r18
 32c:	33 1f       	adc	r19, r19
 32e:	22 5f       	subi	r18, 0xF2	; 242
 330:	3e 4f       	sbci	r19, 0xFE	; 254
 332:	81 2f       	mov	r24, r17
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	fc 01       	movw	r30, r24
 33c:	53 e0       	ldi	r21, 0x03	; 3
 33e:	ee 0f       	add	r30, r30
 340:	ff 1f       	adc	r31, r31
 342:	5a 95       	dec	r21
 344:	e1 f7       	brne	.-8      	; 0x33e <__stack+0x3f>
 346:	e8 1b       	sub	r30, r24
 348:	f9 0b       	sbc	r31, r25
 34a:	e6 0f       	add	r30, r22
 34c:	f7 1f       	adc	r31, r23
 34e:	ee 0f       	add	r30, r30
 350:	ff 1f       	adc	r31, r31
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	e2 5f       	subi	r30, 0xF2	; 242
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 81       	ld	r24, Z
 35c:	91 81       	ldd	r25, Z+1	; 0x01
 35e:	a2 81       	ldd	r26, Z+2	; 0x02
 360:	b3 81       	ldd	r27, Z+3	; 0x03
 362:	f9 01       	movw	r30, r18
 364:	80 83       	st	Z, r24
 366:	91 83       	std	Z+1, r25	; 0x01
 368:	a2 83       	std	Z+2, r26	; 0x02
 36a:	b3 83       	std	Z+3, r27	; 0x03
			anim_counter[sensor_id]++;
			if (anim_counter[sensor_id] > 3)
				anim_counter[sensor_id] = 0;
			if (gl_set[sensor_id].n_measures < MAX_NUM_MEAS)
				gl_set[sensor_id].n_measures++;
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
 36c:	69 30       	cpi	r22, 0x09	; 9
 36e:	71 05       	cpc	r23, r1
 370:	39 f6       	brne	.-114    	; 0x300 <__stack+0x1>
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[MAX_NUM_MEAS - 1] = rpm_x10;
 372:	81 2f       	mov	r24, r17
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	28 e3       	ldi	r18, 0x38	; 56
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	82 9f       	mul	r24, r18
 37c:	f0 01       	movw	r30, r0
 37e:	83 9f       	mul	r24, r19
 380:	f0 0d       	add	r31, r0
 382:	92 9f       	mul	r25, r18
 384:	f0 0d       	add	r31, r0
 386:	11 24       	eor	r1, r1
 388:	e6 5f       	subi	r30, 0xF6	; 246
 38a:	fe 4f       	sbci	r31, 0xFE	; 254
 38c:	60 a6       	std	Z+40, r6	; 0x28
 38e:	71 a6       	std	Z+41, r7	; 0x29
 390:	82 a6       	std	Z+42, r8	; 0x2a
 392:	93 a6       	std	Z+43, r9	; 0x2b

			gl_set[sensor_id].rpm_avg = 0;
 394:	10 82       	st	Z, r1
 396:	11 82       	std	Z+1, r1	; 0x01
 398:	12 82       	std	Z+2, r1	; 0x02
 39a:	13 82       	std	Z+3, r1	; 0x03
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	70 e0       	ldi	r23, 0x00	; 0
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
 3a0:	80 91 80 01 	lds	r24, 0x0180
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	48 e3       	ldi	r20, 0x38	; 56
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	84 9f       	mul	r24, r20
 3ac:	80 01       	movw	r16, r0
 3ae:	85 9f       	mul	r24, r21
 3b0:	10 0d       	add	r17, r0
 3b2:	94 9f       	mul	r25, r20
 3b4:	10 0d       	add	r17, r0
 3b6:	11 24       	eor	r1, r1
 3b8:	06 5f       	subi	r16, 0xF6	; 246
 3ba:	1e 4f       	sbci	r17, 0xFE	; 254
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	fc 01       	movw	r30, r24
 3c2:	23 e0       	ldi	r18, 0x03	; 3
 3c4:	ee 0f       	add	r30, r30
 3c6:	ff 1f       	adc	r31, r31
 3c8:	2a 95       	dec	r18
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <__stack+0xc5>
 3cc:	e8 1b       	sub	r30, r24
 3ce:	f9 0b       	sbc	r31, r25
 3d0:	e6 0f       	add	r30, r22
 3d2:	f7 1f       	adc	r31, r23
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	e2 5f       	subi	r30, 0xF2	; 242
 3de:	fe 4f       	sbci	r31, 0xFE	; 254
 3e0:	80 81       	ld	r24, Z
 3e2:	91 81       	ldd	r25, Z+1	; 0x01
 3e4:	a2 81       	ldd	r26, Z+2	; 0x02
 3e6:	b3 81       	ldd	r27, Z+3	; 0x03
 3e8:	f8 01       	movw	r30, r16
 3ea:	20 81       	ld	r18, Z
 3ec:	31 81       	ldd	r19, Z+1	; 0x01
 3ee:	42 81       	ldd	r20, Z+2	; 0x02
 3f0:	53 81       	ldd	r21, Z+3	; 0x03
 3f2:	82 0f       	add	r24, r18
 3f4:	93 1f       	adc	r25, r19
 3f6:	a4 1f       	adc	r26, r20
 3f8:	b5 1f       	adc	r27, r21
 3fa:	80 83       	st	Z, r24
 3fc:	91 83       	std	Z+1, r25	; 0x01
 3fe:	a2 83       	std	Z+2, r26	; 0x02
 400:	b3 83       	std	Z+3, r27	; 0x03
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[MAX_NUM_MEAS - 1] = rpm_x10;

			gl_set[sensor_id].rpm_avg = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
 406:	6a 30       	cpi	r22, 0x0A	; 10
 408:	71 05       	cpc	r23, r1
 40a:	51 f6       	brne	.-108    	; 0x3a0 <__stack+0xa1>
		}
		if (rpm_x10 > 40000)
			rpm_x10 = last_rpm_x10[sensor_id];
		if (last_rpm_x10[sensor_id] != rpm_x10)
		{
			last_rpm_x10[sensor_id] = rpm_x10;
 40c:	ee 0c       	add	r14, r14
 40e:	ff 1c       	adc	r15, r15
 410:	ee 0c       	add	r14, r14
 412:	ff 1c       	adc	r15, r15
 414:	21 e0       	ldi	r18, 0x01	; 1
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	2c 0f       	add	r18, r28
 41a:	3d 1f       	adc	r19, r29
 41c:	e2 0e       	add	r14, r18
 41e:	f3 1e       	adc	r15, r19
 420:	f7 01       	movw	r30, r14
 422:	66 82       	std	Z+6, r6	; 0x06
 424:	77 82       	std	Z+7, r7	; 0x07
 426:	80 86       	std	Z+8, r8	; 0x08
 428:	91 86       	std	Z+9, r9	; 0x09
			gl_set[sensor_id].rpm_avg = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
			}
			gl_set[sensor_id].rpm_avg = gl_set[sensor_id].rpm_avg / gl_set[sensor_id].n_measures;
 42a:	f8 01       	movw	r30, r16
 42c:	27 a9       	ldd	r18, Z+55	; 0x37
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	60 81       	ld	r22, Z
 436:	71 81       	ldd	r23, Z+1	; 0x01
 438:	82 81       	ldd	r24, Z+2	; 0x02
 43a:	93 81       	ldd	r25, Z+3	; 0x03
 43c:	98 d2       	rcall	.+1328   	; 0x96e <__divmodsi4>
 43e:	f8 01       	movw	r30, r16
 440:	20 83       	st	Z, r18
 442:	31 83       	std	Z+1, r19	; 0x01
 444:	42 83       	std	Z+2, r20	; 0x02
 446:	53 83       	std	Z+3, r21	; 0x03
 448:	d2 01       	movw	r26, r4
 44a:	c1 01       	movw	r24, r2
 44c:	8a 0d       	add	r24, r10
 44e:	9b 1d       	adc	r25, r11
 450:	ac 1d       	adc	r26, r12
 452:	bd 1d       	adc	r27, r13
		}

		if(time_count >= time_count_prev)
 454:	2f 85       	ldd	r18, Y+15	; 0x0f
 456:	38 89       	ldd	r19, Y+16	; 0x10
 458:	49 89       	ldd	r20, Y+17	; 0x11
 45a:	5a 89       	ldd	r21, Y+18	; 0x12
 45c:	a2 16       	cp	r10, r18
 45e:	b3 06       	cpc	r11, r19
 460:	c4 06       	cpc	r12, r20
 462:	d5 06       	cpc	r13, r21
 464:	5c f0       	brlt	.+22     	; 0x47c <__stack+0x17d>
		{
			time_with_current_sensor_id += time_count - time_count_prev;
 466:	1c 01       	movw	r2, r24
 468:	2d 01       	movw	r4, r26
 46a:	22 1a       	sub	r2, r18
 46c:	33 0a       	sbc	r3, r19
 46e:	44 0a       	sbc	r4, r20
 470:	55 0a       	sbc	r5, r21
 472:	af 86       	std	Y+15, r10	; 0x0f
 474:	b8 8a       	std	Y+16, r11	; 0x10
 476:	c9 8a       	std	Y+17, r12	; 0x11
 478:	da 8a       	std	Y+18, r13	; 0x12
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__stack+0x181>
			time_count_prev = time_count;
		}
		else
		{
			time_with_current_sensor_id += time_count;
 47c:	1c 01       	movw	r2, r24
 47e:	2d 01       	movw	r4, r26
		}
		
		if(time_with_current_sensor_id > 20000000)
 480:	31 e0       	ldi	r19, 0x01	; 1
 482:	23 16       	cp	r2, r19
 484:	3d e2       	ldi	r19, 0x2D	; 45
 486:	33 06       	cpc	r3, r19
 488:	31 e3       	ldi	r19, 0x31	; 49
 48a:	43 06       	cpc	r4, r19
 48c:	31 e0       	ldi	r19, 0x01	; 1
 48e:	53 06       	cpc	r5, r19
 490:	1c f1       	brlt	.+70     	; 0x4d8 <__stack+0x1d9>
		{
			time_with_current_sensor_id = 0;
			if(sensor_id==1)
 492:	80 91 80 01 	lds	r24, 0x0180
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	71 f4       	brne	.+28     	; 0x4b6 <__stack+0x1b7>
			{
				sensor_id = 0;
 49a:	10 92 80 01 	sts	0x0180, r1
				locate(15);
 49e:	8f e0       	ldi	r24, 0x0F	; 15
 4a0:	4f d1       	rcall	.+670    	; 0x740 <locate>
				lcd_send_4b_mode((uchar)'1');
 4a2:	81 e3       	ldi	r24, 0x31	; 49
 4a4:	03 d1       	rcall	.+518    	; 0x6ac <lcd_send_4b_mode>
				locate(79);
 4a6:	8f e4       	ldi	r24, 0x4F	; 79
 4a8:	4b d1       	rcall	.+662    	; 0x740 <locate>
				lcd_send_4b_mode((uchar)'_');
 4aa:	8f e5       	ldi	r24, 0x5F	; 95
 4ac:	ff d0       	rcall	.+510    	; 0x6ac <lcd_send_4b_mode>
				ADMUX = 2;
 4ae:	42 e0       	ldi	r20, 0x02	; 2
 4b0:	40 93 7c 00 	sts	0x007C, r20
 4b4:	0e c0       	rjmp	.+28     	; 0x4d2 <__stack+0x1d3>
			} 
			else
			{
				sensor_id = 1;
 4b6:	51 e0       	ldi	r21, 0x01	; 1
 4b8:	50 93 80 01 	sts	0x0180, r21
				locate(15);
 4bc:	8f e0       	ldi	r24, 0x0F	; 15
 4be:	40 d1       	rcall	.+640    	; 0x740 <locate>
				lcd_send_4b_mode((uchar)'_');
 4c0:	8f e5       	ldi	r24, 0x5F	; 95
 4c2:	f4 d0       	rcall	.+488    	; 0x6ac <lcd_send_4b_mode>
				locate(79);
 4c4:	8f e4       	ldi	r24, 0x4F	; 79
 4c6:	3c d1       	rcall	.+632    	; 0x740 <locate>
				lcd_send_4b_mode((uchar)'2');
 4c8:	82 e3       	ldi	r24, 0x32	; 50
 4ca:	f0 d0       	rcall	.+480    	; 0x6ac <lcd_send_4b_mode>
				ADMUX = 3;
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	80 93 7c 00 	sts	0x007C, r24
 4d2:	22 24       	eor	r2, r2
 4d4:	33 24       	eor	r3, r3
 4d6:	21 01       	movw	r4, r2
			}
		}

		refresh_counter++;
 4d8:	80 91 7a 01 	lds	r24, 0x017A
 4dc:	90 91 7b 01 	lds	r25, 0x017B
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	90 93 7b 01 	sts	0x017B, r25
 4e6:	80 93 7a 01 	sts	0x017A, r24

		if (refresh_counter > 20000)
 4ea:	81 52       	subi	r24, 0x21	; 33
 4ec:	9e 44       	sbci	r25, 0x4E	; 78
 4ee:	08 f4       	brcc	.+2      	; 0x4f2 <__stack+0x1f3>
 4f0:	48 ce       	rjmp	.-880    	; 0x182 <main+0xdc>
		{
			refresh_counter = 0;
 4f2:	10 92 7b 01 	sts	0x017B, r1
 4f6:	10 92 7a 01 	sts	0x017A, r1
			lcd_send_floatx10(gl_set[0].rpm_avg, 5, 7, 1); //rpm_x10
 4fa:	60 91 0a 01 	lds	r22, 0x010A
 4fe:	70 91 0b 01 	lds	r23, 0x010B
 502:	80 91 0c 01 	lds	r24, 0x010C
 506:	90 91 0d 01 	lds	r25, 0x010D
 50a:	45 e0       	ldi	r20, 0x05	; 5
 50c:	27 e0       	ldi	r18, 0x07	; 7
 50e:	01 e0       	ldi	r16, 0x01	; 1
 510:	69 d1       	rcall	.+722    	; 0x7e4 <lcd_send_floatx10>
			lcd_send_floatx10(gl_set[1].rpm_avg, 69, 7, 1); //rpm_x10
 512:	60 91 42 01 	lds	r22, 0x0142
 516:	70 91 43 01 	lds	r23, 0x0143
 51a:	80 91 44 01 	lds	r24, 0x0144
 51e:	90 91 45 01 	lds	r25, 0x0145
 522:	45 e4       	ldi	r20, 0x45	; 69
 524:	27 e0       	ldi	r18, 0x07	; 7
 526:	5e d1       	rcall	.+700    	; 0x7e4 <lcd_send_floatx10>
 528:	2c ce       	rjmp	.-936    	; 0x182 <main+0xdc>

0000052a <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1<<COM1B1)|(1<<WGM01)|(1<<WGM00);
 52a:	83 e2       	ldi	r24, 0x23	; 35
 52c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00); 
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25; 
 532:	89 e1       	ldi	r24, 0x19	; 25
 534:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0<<OCIE0A);
 536:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 53a:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 53e:	83 e0       	ldi	r24, 0x03	; 3
 540:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);
 544:	90 93 6f 00 	sts	0x006F, r25


}
 548:	08 95       	ret

0000054a <setup_io>:


void setup_io()
{
	DIDR0 = (1<<ADC2D) | (1<<ADC3D); //disable digital input on ADC2 and ADC3
 54a:	8c e0       	ldi	r24, 0x0C	; 12
 54c:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1<<PORTB1); //set push button as input
 550:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); //activte the pull up resistor for the push button
 552:	29 9a       	sbi	0x05, 1	; 5
	
	LCD_EN_PORT |= _BV(LCD_EN);
 554:	45 9a       	sbi	0x08, 5	; 8
  LCD_RS_PORT &= ~(_BV(LCD_RS));	
 556:	5c 98       	cbi	0x0b, 4	; 11
}
 558:	08 95       	ret

0000055a <__vector_13>:
}



ISR(TIMER1_OVF_vect)
{
 55a:	1f 92       	push	r1
 55c:	0f 92       	push	r0
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	0f 92       	push	r0
 562:	11 24       	eor	r1, r1
 564:	8f 93       	push	r24
	//LED_ON;
	post_scaller++;
 566:	80 91 09 01 	lds	r24, 0x0109
 56a:	8f 5f       	subi	r24, 0xFF	; 255
 56c:	80 93 09 01 	sts	0x0109, r24
}
 570:	8f 91       	pop	r24
 572:	0f 90       	pop	r0
 574:	0f be       	out	0x3f, r0	; 63
 576:	0f 90       	pop	r0
 578:	1f 90       	pop	r1
 57a:	18 95       	reti

0000057c <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	ef 93       	push	r30
 5a0:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value 
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC>>2;			
 5a2:	80 91 80 01 	lds	r24, 0x0180
 5a6:	48 2f       	mov	r20, r24
 5a8:	50 e0       	ldi	r21, 0x00	; 0
 5aa:	20 91 78 00 	lds	r18, 0x0078
 5ae:	30 91 79 00 	lds	r19, 0x0079
 5b2:	36 95       	lsr	r19
 5b4:	27 95       	ror	r18
 5b6:	36 95       	lsr	r19
 5b8:	27 95       	ror	r18
 5ba:	88 e3       	ldi	r24, 0x38	; 56
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	48 9f       	mul	r20, r24
 5c0:	f0 01       	movw	r30, r0
 5c2:	49 9f       	mul	r20, r25
 5c4:	f0 0d       	add	r31, r0
 5c6:	58 9f       	mul	r21, r24
 5c8:	f0 0d       	add	r31, r0
 5ca:	11 24       	eor	r1, r1
 5cc:	e6 5f       	subi	r30, 0xF6	; 246
 5ce:	fe 4f       	sbci	r31, 0xFE	; 254
 5d0:	22 ab       	std	Z+50, r18	; 0x32
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state==0)) //a cycle is detected 
 5d2:	81 a9       	ldd	r24, Z+49	; 0x31
 5d4:	82 17       	cp	r24, r18
 5d6:	c8 f4       	brcc	.+50     	; 0x60a <__vector_21+0x8e>
 5d8:	83 a9       	ldd	r24, Z+51	; 0x33
 5da:	88 23       	and	r24, r24
 5dc:	b1 f4       	brne	.+44     	; 0x60a <__vector_21+0x8e>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	83 ab       	std	Z+51, r24	; 0x33
		t_capture=TCNT1;TCNT1 = 0;
 5e2:	80 91 84 00 	lds	r24, 0x0084
 5e6:	90 91 85 00 	lds	r25, 0x0085
 5ea:	90 93 7f 01 	sts	0x017F, r25
 5ee:	80 93 7e 01 	sts	0x017E, r24
 5f2:	10 92 85 00 	sts	0x0085, r1
 5f6:	10 92 84 00 	sts	0x0084, r1
		t_postscale=post_scaller; post_scaller=0;
 5fa:	80 91 09 01 	lds	r24, 0x0109
 5fe:	80 93 7c 01 	sts	0x017C, r24
 602:	10 92 7d 01 	sts	0x017D, r1
 606:	10 92 09 01 	sts	0x0109, r1
	}

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state==1)) //a low level is detected
 60a:	88 e3       	ldi	r24, 0x38	; 56
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	48 9f       	mul	r20, r24
 610:	f0 01       	movw	r30, r0
 612:	49 9f       	mul	r20, r25
 614:	f0 0d       	add	r31, r0
 616:	58 9f       	mul	r21, r24
 618:	f0 0d       	add	r31, r0
 61a:	11 24       	eor	r1, r1
 61c:	e6 5f       	subi	r30, 0xF6	; 246
 61e:	fe 4f       	sbci	r31, 0xFE	; 254
 620:	92 a9       	ldd	r25, Z+50	; 0x32
 622:	80 a9       	ldd	r24, Z+48	; 0x30
 624:	98 17       	cp	r25, r24
 626:	20 f4       	brcc	.+8      	; 0x630 <__vector_21+0xb4>
 628:	83 a9       	ldd	r24, Z+51	; 0x33
 62a:	81 30       	cpi	r24, 0x01	; 1
 62c:	09 f4       	brne	.+2      	; 0x630 <__vector_21+0xb4>
	{
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
 62e:	13 aa       	std	Z+51, r1	; 0x33
	}

	if (delta(gl_set[sensor_id].ir_history_a,gl_set[sensor_id].ir_value) > 10)
 630:	c8 e3       	ldi	r28, 0x38	; 56
 632:	d0 e0       	ldi	r29, 0x00	; 0
 634:	4c 9f       	mul	r20, r28
 636:	f0 01       	movw	r30, r0
 638:	4d 9f       	mul	r20, r29
 63a:	f0 0d       	add	r31, r0
 63c:	5c 9f       	mul	r21, r28
 63e:	f0 0d       	add	r31, r0
 640:	11 24       	eor	r1, r1
 642:	e6 5f       	subi	r30, 0xF6	; 246
 644:	fe 4f       	sbci	r31, 0xFE	; 254
 646:	84 a9       	ldd	r24, Z+52	; 0x34
 648:	62 a9       	ldd	r22, Z+50	; 0x32
 64a:	26 dd       	rcall	.-1460   	; 0x98 <delta>
 64c:	8b 30       	cpi	r24, 0x0B	; 11
 64e:	d8 f0       	brcs	.+54     	; 0x686 <__vector_21+0x10a>
	{
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
 650:	80 91 80 01 	lds	r24, 0x0180
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	8c 9f       	mul	r24, r28
 658:	f0 01       	movw	r30, r0
 65a:	8d 9f       	mul	r24, r29
 65c:	f0 0d       	add	r31, r0
 65e:	9c 9f       	mul	r25, r28
 660:	f0 0d       	add	r31, r0
 662:	11 24       	eor	r1, r1
 664:	e6 5f       	subi	r30, 0xF6	; 246
 666:	fe 4f       	sbci	r31, 0xFE	; 254
 668:	24 a9       	ldd	r18, Z+52	; 0x34
 66a:	25 ab       	std	Z+53, r18	; 0x35
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 66c:	82 a9       	ldd	r24, Z+50	; 0x32
 66e:	84 ab       	std	Z+52, r24	; 0x34
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a+gl_set[sensor_id].ir_history_b)/2;
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	82 0f       	add	r24, r18
 674:	91 1d       	adc	r25, r1
 676:	95 95       	asr	r25
 678:	87 95       	ror	r24
 67a:	28 2f       	mov	r18, r24
 67c:	86 ab       	std	Z+54, r24	; 0x36
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 67e:	2b 5f       	subi	r18, 0xFB	; 251
 680:	21 ab       	std	Z+49, r18	; 0x31
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 682:	2a 50       	subi	r18, 0x0A	; 10
 684:	20 ab       	std	Z+48, r18	; 0x30
	}
}
 686:	ff 91       	pop	r31
 688:	ef 91       	pop	r30
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	bf 91       	pop	r27
 690:	af 91       	pop	r26
 692:	9f 91       	pop	r25
 694:	8f 91       	pop	r24
 696:	7f 91       	pop	r23
 698:	6f 91       	pop	r22
 69a:	5f 91       	pop	r21
 69c:	4f 91       	pop	r20
 69e:	3f 91       	pop	r19
 6a0:	2f 91       	pop	r18
 6a2:	0f 90       	pop	r0
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	0f 90       	pop	r0
 6a8:	1f 90       	pop	r1
 6aa:	18 95       	reti

000006ac <lcd_send_4b_mode>:



void lcd_send_4b_mode(unsigned char data){
	
  LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 6ac:	9a b1       	in	r25, 0x0a	; 10
 6ae:	9f 60       	ori	r25, 0x0F	; 15
 6b0:	9a b9       	out	0x0a, r25	; 10
	
	LCD_EN_PORT |= _BV(LCD_EN);
 6b2:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 6b4:	48 e8       	ldi	r20, 0x88	; 136
 6b6:	53 e1       	ldi	r21, 0x13	; 19
 6b8:	fa 01       	movw	r30, r20
 6ba:	31 97       	sbiw	r30, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <lcd_send_4b_mode+0xe>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 6be:	9b b1       	in	r25, 0x0b	; 11
 6c0:	90 7f       	andi	r25, 0xF0	; 240
 6c2:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data>>4)<<LCD_SHIFT)&LCD_MASK;
 6c4:	2b b1       	in	r18, 0x0b	; 11
 6c6:	98 2f       	mov	r25, r24
 6c8:	92 95       	swap	r25
 6ca:	9f 70       	andi	r25, 0x0F	; 15
 6cc:	92 2b       	or	r25, r18
 6ce:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 6d0:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 6d2:	45 9a       	sbi	0x08, 5	; 8
 6d4:	fa 01       	movw	r30, r20
 6d6:	31 97       	sbiw	r30, 0x01	; 1
 6d8:	f1 f7       	brne	.-4      	; 0x6d6 <lcd_send_4b_mode+0x2a>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 6da:	9b b1       	in	r25, 0x0b	; 11
 6dc:	90 7f       	andi	r25, 0xF0	; 240
 6de:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data&LCD_MASK)<<LCD_SHIFT);
 6e0:	9b b1       	in	r25, 0x0b	; 11
 6e2:	8f 70       	andi	r24, 0x0F	; 15
 6e4:	98 2b       	or	r25, r24
 6e6:	9b b9       	out	0x0b, r25	; 11


	LCD_EN_PORT &= ~(_BV(LCD_EN));
 6e8:	45 98       	cbi	0x08, 5	; 8
 6ea:	ca 01       	movw	r24, r20
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <lcd_send_4b_mode+0x40>
	_delay_ms (1);
} 
 6f0:	08 95       	ret

000006f2 <cls>:
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
		cls();
}
void cls(){     // clear the display
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 6f2:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(0x01);   
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	da df       	rcall	.-76     	; 0x6ac <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 6f8:	5c 9a       	sbi	0x0b, 4	; 11
}
 6fa:	08 95       	ret

000006fc <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}


void ini_lcd_4_bit_mode(){
 6fc:	cf 93       	push	r28
 6fe:	df 93       	push	r29
 700:	c8 e5       	ldi	r28, 0x58	; 88
 702:	d0 e0       	ldi	r29, 0x00	; 0
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 704:	fe 01       	movw	r30, r28
 706:	84 91       	lpm	r24, Z+
 708:	d1 df       	rcall	.-94     	; 0x6ac <lcd_send_4b_mode>
 70a:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode(){
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	c0 36       	cpi	r28, 0x60	; 96
 710:	df 07       	cpc	r29, r31
 712:	c1 f7       	brne	.-16     	; 0x704 <ini_lcd_4_bit_mode+0x8>
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
   }
   LCD_RS_PORT |= _BV(LCD_RS);
 714:	5c 9a       	sbi	0x0b, 4	; 11
}
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	08 95       	ret

0000071c <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms (1);
} 

void lcd_ini_sequence()
{
 71c:	84 ec       	ldi	r24, 0xC4	; 196
 71e:	99 e0       	ldi	r25, 0x09	; 9
 720:	24 ef       	ldi	r18, 0xF4	; 244
 722:	31 e0       	ldi	r19, 0x01	; 1
 724:	f9 01       	movw	r30, r18
 726:	31 97       	sbiw	r30, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 72a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 72c:	d9 f7       	brne	.-10     	; 0x724 <lcd_ini_sequence+0x8>
		
		_delay_ms(250); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 72e:	e6 df       	rcall	.-52     	; 0x6fc <ini_lcd_4_bit_mode>
		cls();
 730:	e0 df       	rcall	.-64     	; 0x6f2 <cls>
 732:	80 e5       	ldi	r24, 0x50	; 80
 734:	93 ec       	ldi	r25, 0xC3	; 195
 736:	01 97       	sbiw	r24, 0x01	; 1
 738:	f1 f7       	brne	.-4      	; 0x736 <lcd_ini_sequence+0x1a>
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 73a:	e0 df       	rcall	.-64     	; 0x6fc <ini_lcd_4_bit_mode>
		cls();
 73c:	da df       	rcall	.-76     	; 0x6f2 <cls>
}
 73e:	08 95       	ret

00000740 <locate>:
   LCD_RS_PORT |= _BV(LCD_RS);
}

void locate(unsigned char pos){
   pos = pos | (1 << 7);
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 740:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(pos);   
 742:	80 68       	ori	r24, 0x80	; 128
 744:	b3 df       	rcall	.-154    	; 0x6ac <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 746:	5c 9a       	sbi	0x0b, 4	; 11
}
 748:	08 95       	ret

0000074a <put_str>:
	{
		lcd_send_4b_mode(' ');  
	}
}

void put_str(uchar pos, char* str){     
 74a:	0f 93       	push	r16
 74c:	1f 93       	push	r17
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 754:	f5 df       	rcall	.-22     	; 0x740 <locate>
 756:	c0 e0       	ldi	r28, 0x00	; 0
 758:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i< 16; i++){				
		lcd_send_4b_mode(pgm_read_byte(str + i));
 75a:	f8 01       	movw	r30, r16
 75c:	ec 0f       	add	r30, r28
 75e:	fd 1f       	adc	r31, r29
 760:	e4 91       	lpm	r30, Z+
 762:	8e 2f       	mov	r24, r30
 764:	a3 df       	rcall	.-186    	; 0x6ac <lcd_send_4b_mode>
 766:	21 96       	adiw	r28, 0x01	; 1
}

void put_str(uchar pos, char* str){     
	uchar i;
	locate(pos);
	for (i = 0; i< 16; i++){				
 768:	c0 31       	cpi	r28, 0x10	; 16
 76a:	d1 05       	cpc	r29, r1
 76c:	b1 f7       	brne	.-20     	; 0x75a <put_str+0x10>
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	08 95       	ret

00000778 <clr_line>:
   LCD_RS_PORT &= ~(_BV(LCD_RS));
   lcd_send_4b_mode(0x01);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add){     // clear line
 778:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 77a:	e2 df       	rcall	.-60     	; 0x740 <locate>
 77c:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<16; i++)
	{
		lcd_send_4b_mode(' ');  
 77e:	80 e2       	ldi	r24, 0x20	; 32
 780:	95 df       	rcall	.-214    	; 0x6ac <lcd_send_4b_mode>
}

void clr_line(uchar start_add){     // clear line
	uchar i;
	locate(start_add);
	for (i=0; i<16; i++)
 782:	1f 5f       	subi	r17, 0xFF	; 255
 784:	10 31       	cpi	r17, 0x10	; 16
 786:	d9 f7       	brne	.-10     	; 0x77e <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');  
	}
}
 788:	1f 91       	pop	r17
 78a:	08 95       	ret

0000078c <lcd_contrast>:
void lcd_contrast()
{


	
}
 78c:	08 95       	ret

0000078e <format>:

void format(char* line1,char* line2){     // reformat the display
 78e:	ef 92       	push	r14
 790:	ff 92       	push	r15
 792:	0f 93       	push	r16
 794:	1f 93       	push	r17
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	8c 01       	movw	r16, r24
 79c:	7b 01       	movw	r14, r22
    unsigned char i;
		locate(0);
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	cf df       	rcall	.-98     	; 0x740 <locate>
 7a2:	c0 e0       	ldi	r28, 0x00	; 0
 7a4:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
 7a6:	f8 01       	movw	r30, r16
 7a8:	ec 0f       	add	r30, r28
 7aa:	fd 1f       	adc	r31, r29
 7ac:	e4 91       	lpm	r30, Z+
 7ae:	8e 2f       	mov	r24, r30
 7b0:	7d df       	rcall	.-262    	; 0x6ac <lcd_send_4b_mode>
 7b2:	21 96       	adiw	r28, 0x01	; 1
}

void format(char* line1,char* line2){     // reformat the display
    unsigned char i;
		locate(0);
		for (i = 0; i< 16; i++){				
 7b4:	c0 31       	cpi	r28, 0x10	; 16
 7b6:	d1 05       	cpc	r29, r1
 7b8:	b1 f7       	brne	.-20     	; 0x7a6 <format+0x18>
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
 7ba:	80 e4       	ldi	r24, 0x40	; 64
 7bc:	c1 df       	rcall	.-126    	; 0x740 <locate>
 7be:	c0 e0       	ldi	r28, 0x00	; 0
 7c0:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
 7c2:	f7 01       	movw	r30, r14
 7c4:	ec 0f       	add	r30, r28
 7c6:	fd 1f       	adc	r31, r29
 7c8:	e4 91       	lpm	r30, Z+
 7ca:	8e 2f       	mov	r24, r30
 7cc:	6f df       	rcall	.-290    	; 0x6ac <lcd_send_4b_mode>
 7ce:	21 96       	adiw	r28, 0x01	; 1
		locate(0);
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
		for (i = 0; i< 16; i++){
 7d0:	c0 31       	cpi	r28, 0x10	; 16
 7d2:	d1 05       	cpc	r29, r1
 7d4:	b1 f7       	brne	.-20     	; 0x7c2 <format+0x34>
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
		}
}
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	1f 91       	pop	r17
 7dc:	0f 91       	pop	r16
 7de:	ff 90       	pop	r15
 7e0:	ef 90       	pop	r14
 7e2:	08 95       	ret

000007e4 <lcd_send_floatx10>:
   lcd_send_4b_mode(pos);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data,uchar location, uchar len, uchar d_len)
{
 7e4:	af 92       	push	r10
 7e6:	bf 92       	push	r11
 7e8:	cf 92       	push	r12
 7ea:	df 92       	push	r13
 7ec:	ef 92       	push	r14
 7ee:	ff 92       	push	r15
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	df 93       	push	r29
 7f6:	cf 93       	push	r28
 7f8:	cd b7       	in	r28, 0x3d	; 61
 7fa:	de b7       	in	r29, 0x3e	; 62
 7fc:	60 97       	sbiw	r28, 0x10	; 16
 7fe:	0f b6       	in	r0, 0x3f	; 63
 800:	f8 94       	cli
 802:	de bf       	out	0x3e, r29	; 62
 804:	0f be       	out	0x3f, r0	; 63
 806:	cd bf       	out	0x3d, r28	; 61
 808:	6b 01       	movw	r12, r22
 80a:	7c 01       	movw	r14, r24
 80c:	14 2f       	mov	r17, r20
 80e:	a2 2e       	mov	r10, r18
 810:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];
	
	uchar i,y,temp,int_len;
	t=0;
 812:	10 92 08 01 	sts	0x0108, r1

	if (data < 0)
 816:	97 ff       	sbrs	r25, 7
 818:	03 c0       	rjmp	.+6      	; 0x820 <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 81a:	8e e4       	ldi	r24, 0x4E	; 78
 81c:	89 83       	std	Y+1, r24	; 0x01
 81e:	06 c0       	rjmp	.+12     	; 0x82c <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 820:	ae 01       	movw	r20, r28
 822:	4f 5f       	subi	r20, 0xFF	; 255
 824:	5f 4f       	sbci	r21, 0xFF	; 255
 826:	2a e0       	ldi	r18, 0x0A	; 10
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	de d0       	rcall	.+444    	; 0x9e8 <ltoa>
	}

	locate(location);
 82c:	81 2f       	mov	r24, r17
 82e:	88 df       	rcall	.-240    	; 0x740 <locate>

	i=0;
	if (d_len == 2)
 830:	82 e0       	ldi	r24, 0x02	; 2
 832:	b8 16       	cp	r11, r24
 834:	11 f0       	breq	.+4      	; 0x83a <lcd_send_floatx10+0x56>
 836:	8a e0       	ldi	r24, 0x0A	; 10
 838:	01 c0       	rjmp	.+2      	; 0x83c <lcd_send_floatx10+0x58>
 83a:	84 e6       	ldi	r24, 0x64	; 100
		temp = 100;
	}else{
		temp = 10;	
	}

	if( data >= temp){
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	a0 e0       	ldi	r26, 0x00	; 0
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	c8 16       	cp	r12, r24
 844:	d9 06       	cpc	r13, r25
 846:	ea 06       	cpc	r14, r26
 848:	fb 06       	cpc	r15, r27
 84a:	0c f4       	brge	.+2      	; 0x84e <lcd_send_floatx10+0x6a>
 84c:	47 c0       	rjmp	.+142    	; 0x8dc <lcd_send_floatx10+0xf8>
		if (strlen(buffer)>len)
 84e:	fe 01       	movw	r30, r28
 850:	31 96       	adiw	r30, 0x01	; 1
 852:	df 01       	movw	r26, r30
 854:	0d 90       	ld	r0, X+
 856:	00 20       	and	r0, r0
 858:	e9 f7       	brne	.-6      	; 0x854 <lcd_send_floatx10+0x70>
 85a:	11 97       	sbiw	r26, 0x01	; 1
 85c:	ae 1b       	sub	r26, r30
 85e:	bf 0b       	sbc	r27, r31
 860:	8a 2d       	mov	r24, r10
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	8a 17       	cp	r24, r26
 866:	9b 07       	cpc	r25, r27
 868:	10 f4       	brcc	.+4      	; 0x86e <lcd_send_floatx10+0x8a>
 86a:	8a 2d       	mov	r24, r10
 86c:	01 c0       	rjmp	.+2      	; 0x870 <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 86e:	8a 2f       	mov	r24, r26
 870:	00 e0       	ldi	r16, 0x00	; 0
		}

		for(i=0; i<(int_len-d_len);i++)
 872:	e8 2e       	mov	r14, r24
 874:	ff 24       	eor	r15, r15
 876:	eb 18       	sub	r14, r11
 878:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 87a:	6e 01       	movw	r12, r28
 87c:	08 94       	sec
 87e:	c1 1c       	adc	r12, r1
 880:	d1 1c       	adc	r13, r1
 882:	0a c0       	rjmp	.+20     	; 0x898 <lcd_send_floatx10+0xb4>
 884:	ec 0d       	add	r30, r12
 886:	fd 1d       	adc	r31, r13
 888:	80 81       	ld	r24, Z
 88a:	10 df       	rcall	.-480    	; 0x6ac <lcd_send_4b_mode>
			t++;
 88c:	80 91 08 01 	lds	r24, 0x0108
 890:	8f 5f       	subi	r24, 0xFF	; 255
 892:	80 93 08 01 	sts	0x0108, r24
		else
		{
			int_len = strlen(buffer);
		}

		for(i=0; i<(int_len-d_len);i++)
 896:	0f 5f       	subi	r16, 0xFF	; 255
 898:	e0 2f       	mov	r30, r16
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	ee 15       	cp	r30, r14
 89e:	ff 05       	cpc	r31, r15
 8a0:	8c f3       	brlt	.-30     	; 0x884 <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 8a2:	8e e2       	ldi	r24, 0x2E	; 46
 8a4:	03 df       	rcall	.-506    	; 0x6ac <lcd_send_4b_mode>
		t++;
 8a6:	80 91 08 01 	lds	r24, 0x0108
 8aa:	8f 5f       	subi	r24, 0xFF	; 255
 8ac:	80 93 08 01 	sts	0x0108, r24
 8b0:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<(d_len);y++)
		{
			lcd_send_4b_mode(buffer[i]);
 8b2:	7e 01       	movw	r14, r28
 8b4:	08 94       	sec
 8b6:	e1 1c       	adc	r14, r1
 8b8:	f1 1c       	adc	r15, r1
 8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <lcd_send_floatx10+0xee>
 8bc:	f7 01       	movw	r30, r14
 8be:	e8 0f       	add	r30, r24
 8c0:	f1 1d       	adc	r31, r1
 8c2:	80 81       	ld	r24, Z
 8c4:	f3 de       	rcall	.-538    	; 0x6ac <lcd_send_4b_mode>
			i++;	
			t++;
 8c6:	80 91 08 01 	lds	r24, 0x0108
 8ca:	8f 5f       	subi	r24, 0xFF	; 255
 8cc:	80 93 08 01 	sts	0x0108, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<(d_len);y++)
 8d0:	1f 5f       	subi	r17, 0xFF	; 255
 8d2:	81 2f       	mov	r24, r17
 8d4:	80 0f       	add	r24, r16
 8d6:	1b 15       	cp	r17, r11
 8d8:	88 f3       	brcs	.-30     	; 0x8bc <lcd_send_floatx10+0xd8>
 8da:	34 c0       	rjmp	.+104    	; 0x944 <lcd_send_floatx10+0x160>
			i++;	
			t++;
		}
		
	}else{
		lcd_send_4b_mode('0');
 8dc:	80 e3       	ldi	r24, 0x30	; 48
 8de:	e6 de       	rcall	.-564    	; 0x6ac <lcd_send_4b_mode>
		t++;
 8e0:	80 91 08 01 	lds	r24, 0x0108
 8e4:	8f 5f       	subi	r24, 0xFF	; 255
 8e6:	80 93 08 01 	sts	0x0108, r24
		lcd_send_4b_mode('.');
 8ea:	8e e2       	ldi	r24, 0x2E	; 46
 8ec:	df de       	rcall	.-578    	; 0x6ac <lcd_send_4b_mode>
		t++;
 8ee:	80 91 08 01 	lds	r24, 0x0108
 8f2:	8f 5f       	subi	r24, 0xFF	; 255
 8f4:	80 93 08 01 	sts	0x0108, r24
 8f8:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<d_len;y++)
		{
			if(y < strlen(buffer))
 8fa:	7e 01       	movw	r14, r28
 8fc:	08 94       	sec
 8fe:	e1 1c       	adc	r14, r1
 900:	f1 1c       	adc	r15, r1
 902:	16 c0       	rjmp	.+44     	; 0x930 <lcd_send_floatx10+0x14c>
 904:	f7 01       	movw	r30, r14
 906:	01 90       	ld	r0, Z+
 908:	00 20       	and	r0, r0
 90a:	e9 f7       	brne	.-6      	; 0x906 <lcd_send_floatx10+0x122>
 90c:	31 97       	sbiw	r30, 0x01	; 1
 90e:	ee 19       	sub	r30, r14
 910:	ff 09       	sbc	r31, r15
 912:	a1 2f       	mov	r26, r17
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	ae 17       	cp	r26, r30
 918:	bf 07       	cpc	r27, r31
 91a:	48 f4       	brcc	.+18     	; 0x92e <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);	
 91c:	ae 0d       	add	r26, r14
 91e:	bf 1d       	adc	r27, r15
 920:	8c 91       	ld	r24, X
 922:	c4 de       	rcall	.-632    	; 0x6ac <lcd_send_4b_mode>
				i++;
				t++;
 924:	80 91 08 01 	lds	r24, 0x0108
 928:	8f 5f       	subi	r24, 0xFF	; 255
 92a:	80 93 08 01 	sts	0x0108, r24
	}else{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<d_len;y++)
 92e:	1f 5f       	subi	r17, 0xFF	; 255
 930:	1b 15       	cp	r17, r11
 932:	40 f3       	brcs	.-48     	; 0x904 <lcd_send_floatx10+0x120>
 934:	07 c0       	rjmp	.+14     	; 0x944 <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
	{
		lcd_send_4b_mode(' ');
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	b9 de       	rcall	.-654    	; 0x6ac <lcd_send_4b_mode>
		t++;
 93a:	80 91 08 01 	lds	r24, 0x0108
 93e:	8f 5f       	subi	r24, 0xFF	; 255
 940:	80 93 08 01 	sts	0x0108, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
 944:	80 91 08 01 	lds	r24, 0x0108
 948:	8a 15       	cp	r24, r10
 94a:	a8 f3       	brcs	.-22     	; 0x936 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 94c:	60 96       	adiw	r28, 0x10	; 16
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
 958:	cf 91       	pop	r28
 95a:	df 91       	pop	r29
 95c:	1f 91       	pop	r17
 95e:	0f 91       	pop	r16
 960:	ff 90       	pop	r15
 962:	ef 90       	pop	r14
 964:	df 90       	pop	r13
 966:	cf 90       	pop	r12
 968:	bf 90       	pop	r11
 96a:	af 90       	pop	r10
 96c:	08 95       	ret

0000096e <__divmodsi4>:
 96e:	97 fb       	bst	r25, 7
 970:	09 2e       	mov	r0, r25
 972:	05 26       	eor	r0, r21
 974:	0e d0       	rcall	.+28     	; 0x992 <__divmodsi4_neg1>
 976:	57 fd       	sbrc	r21, 7
 978:	04 d0       	rcall	.+8      	; 0x982 <__divmodsi4_neg2>
 97a:	14 d0       	rcall	.+40     	; 0x9a4 <__udivmodsi4>
 97c:	0a d0       	rcall	.+20     	; 0x992 <__divmodsi4_neg1>
 97e:	00 1c       	adc	r0, r0
 980:	38 f4       	brcc	.+14     	; 0x990 <__divmodsi4_exit>

00000982 <__divmodsi4_neg2>:
 982:	50 95       	com	r21
 984:	40 95       	com	r20
 986:	30 95       	com	r19
 988:	21 95       	neg	r18
 98a:	3f 4f       	sbci	r19, 0xFF	; 255
 98c:	4f 4f       	sbci	r20, 0xFF	; 255
 98e:	5f 4f       	sbci	r21, 0xFF	; 255

00000990 <__divmodsi4_exit>:
 990:	08 95       	ret

00000992 <__divmodsi4_neg1>:
 992:	f6 f7       	brtc	.-4      	; 0x990 <__divmodsi4_exit>
 994:	90 95       	com	r25
 996:	80 95       	com	r24
 998:	70 95       	com	r23
 99a:	61 95       	neg	r22
 99c:	7f 4f       	sbci	r23, 0xFF	; 255
 99e:	8f 4f       	sbci	r24, 0xFF	; 255
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	08 95       	ret

000009a4 <__udivmodsi4>:
 9a4:	a1 e2       	ldi	r26, 0x21	; 33
 9a6:	1a 2e       	mov	r1, r26
 9a8:	aa 1b       	sub	r26, r26
 9aa:	bb 1b       	sub	r27, r27
 9ac:	fd 01       	movw	r30, r26
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <__udivmodsi4_ep>

000009b0 <__udivmodsi4_loop>:
 9b0:	aa 1f       	adc	r26, r26
 9b2:	bb 1f       	adc	r27, r27
 9b4:	ee 1f       	adc	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	a2 17       	cp	r26, r18
 9ba:	b3 07       	cpc	r27, r19
 9bc:	e4 07       	cpc	r30, r20
 9be:	f5 07       	cpc	r31, r21
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__udivmodsi4_ep>
 9c2:	a2 1b       	sub	r26, r18
 9c4:	b3 0b       	sbc	r27, r19
 9c6:	e4 0b       	sbc	r30, r20
 9c8:	f5 0b       	sbc	r31, r21

000009ca <__udivmodsi4_ep>:
 9ca:	66 1f       	adc	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	1a 94       	dec	r1
 9d4:	69 f7       	brne	.-38     	; 0x9b0 <__udivmodsi4_loop>
 9d6:	60 95       	com	r22
 9d8:	70 95       	com	r23
 9da:	80 95       	com	r24
 9dc:	90 95       	com	r25
 9de:	9b 01       	movw	r18, r22
 9e0:	ac 01       	movw	r20, r24
 9e2:	bd 01       	movw	r22, r26
 9e4:	cf 01       	movw	r24, r30
 9e6:	08 95       	ret

000009e8 <ltoa>:
 9e8:	fa 01       	movw	r30, r20
 9ea:	cf 93       	push	r28
 9ec:	ff 93       	push	r31
 9ee:	ef 93       	push	r30
 9f0:	22 30       	cpi	r18, 0x02	; 2
 9f2:	3c f1       	brlt	.+78     	; 0xa42 <ltoa+0x5a>
 9f4:	25 32       	cpi	r18, 0x25	; 37
 9f6:	2c f5       	brge	.+74     	; 0xa42 <ltoa+0x5a>
 9f8:	c2 2f       	mov	r28, r18
 9fa:	e8 94       	clt
 9fc:	ca 30       	cpi	r28, 0x0A	; 10
 9fe:	49 f4       	brne	.+18     	; 0xa12 <ltoa+0x2a>
 a00:	97 fb       	bst	r25, 7
 a02:	3e f4       	brtc	.+14     	; 0xa12 <ltoa+0x2a>
 a04:	90 95       	com	r25
 a06:	80 95       	com	r24
 a08:	70 95       	com	r23
 a0a:	61 95       	neg	r22
 a0c:	7f 4f       	sbci	r23, 0xFF	; 255
 a0e:	8f 4f       	sbci	r24, 0xFF	; 255
 a10:	9f 4f       	sbci	r25, 0xFF	; 255
 a12:	2c 2f       	mov	r18, r28
 a14:	33 27       	eor	r19, r19
 a16:	44 27       	eor	r20, r20
 a18:	55 27       	eor	r21, r21
 a1a:	ff 93       	push	r31
 a1c:	ef 93       	push	r30
 a1e:	c2 df       	rcall	.-124    	; 0x9a4 <__udivmodsi4>
 a20:	ef 91       	pop	r30
 a22:	ff 91       	pop	r31
 a24:	60 5d       	subi	r22, 0xD0	; 208
 a26:	6a 33       	cpi	r22, 0x3A	; 58
 a28:	0c f0       	brlt	.+2      	; 0xa2c <ltoa+0x44>
 a2a:	69 5d       	subi	r22, 0xD9	; 217
 a2c:	61 93       	st	Z+, r22
 a2e:	b9 01       	movw	r22, r18
 a30:	ca 01       	movw	r24, r20
 a32:	60 50       	subi	r22, 0x00	; 0
 a34:	70 40       	sbci	r23, 0x00	; 0
 a36:	80 40       	sbci	r24, 0x00	; 0
 a38:	90 40       	sbci	r25, 0x00	; 0
 a3a:	59 f7       	brne	.-42     	; 0xa12 <ltoa+0x2a>
 a3c:	16 f4       	brtc	.+4      	; 0xa42 <ltoa+0x5a>
 a3e:	cd e2       	ldi	r28, 0x2D	; 45
 a40:	c1 93       	st	Z+, r28
 a42:	10 82       	st	Z, r1
 a44:	8f 91       	pop	r24
 a46:	9f 91       	pop	r25
 a48:	cf 91       	pop	r28
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <strrev>

00000a4c <strrev>:
 a4c:	dc 01       	movw	r26, r24
 a4e:	fc 01       	movw	r30, r24
 a50:	67 2f       	mov	r22, r23
 a52:	71 91       	ld	r23, Z+
 a54:	77 23       	and	r23, r23
 a56:	e1 f7       	brne	.-8      	; 0xa50 <strrev+0x4>
 a58:	32 97       	sbiw	r30, 0x02	; 2
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <strrev+0x18>
 a5c:	7c 91       	ld	r23, X
 a5e:	6d 93       	st	X+, r22
 a60:	70 83       	st	Z, r23
 a62:	62 91       	ld	r22, -Z
 a64:	ae 17       	cp	r26, r30
 a66:	bf 07       	cpc	r27, r31
 a68:	c8 f3       	brcs	.-14     	; 0xa5c <strrev+0x10>
 a6a:	08 95       	ret

00000a6c <_exit>:
 a6c:	f8 94       	cli

00000a6e <__stop_program>:
 a6e:	ff cf       	rjmp	.-2      	; 0xa6e <__stop_program>
