
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000019f  00800100  00800100  00000826  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000005a4  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d96  00000000  00000000  00000e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003c5  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000079a  00000000  00000000  00001fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00002740  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000341  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000004b3  00000000  00000000  00002bc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	67 c1       	rjmp	.+718    	; 0x2ea <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	70 c1       	rjmp	.+736    	; 0x30c <__vector_21>
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_clear_bss>:
  6c:	12 e0       	ldi	r17, 0x02	; 2
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	af 39       	cpi	r26, 0x9F	; 159
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	09 d0       	rcall	.+18     	; 0x90 <main>
  7e:	97 c3       	rjmp	.+1838   	; 0x7ae <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  82:	68 17       	cp	r22, r24
  84:	10 f4       	brcc	.+4      	; 0x8a <delta+0x8>
	{
		return (v1 - v2);
  86:	86 1b       	sub	r24, r22
  88:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  8a:	68 1b       	sub	r22, r24
  8c:	86 2f       	mov	r24, r22
	}
}
  8e:	08 95       	ret

00000090 <main>:

int main()
{
  90:	2f 92       	push	r2
  92:	3f 92       	push	r3
  94:	4f 92       	push	r4
  96:	5f 92       	push	r5
  98:	6f 92       	push	r6
  9a:	7f 92       	push	r7
  9c:	8f 92       	push	r8
  9e:	9f 92       	push	r9
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	00 d0       	rcall	.+0      	; 0xb6 <main+0x26>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <main+0x28>
  b8:	0f 92       	push	r0
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	sensor_id = 0;
  be:	10 92 0f 02 	sts	0x020F, r1
	long time_count;
	long rpm_x10, last_rpm_x10 = 0, rpm_avg = 0;
	float contrast_calculator;
	uchar i;
	char animation[4], anim_counter = 0;
	animation[0] = 0xD9;
  c2:	89 ed       	ldi	r24, 0xD9	; 217
  c4:	89 83       	std	Y+1, r24	; 0x01
	animation[1] = 0xC9;
  c6:	89 ec       	ldi	r24, 0xC9	; 201
  c8:	8a 83       	std	Y+2, r24	; 0x02
	animation[2] = 0xDA;
  ca:	8a ed       	ldi	r24, 0xDA	; 218
  cc:	8b 83       	std	Y+3, r24	; 0x03
	animation[3] = 0xC8;
  ce:	88 ec       	ldi	r24, 0xC8	; 200
  d0:	8c 83       	std	Y+4, r24	; 0x04

	setup_timers();
  d2:	f3 d0       	rcall	.+486    	; 0x2ba <setup_timers>

	setup_io();
  d4:	02 d1       	rcall	.+516    	; 0x2da <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
  d6:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
  d8:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
  da:	c1 d1       	rcall	.+898    	; 0x45e <lcd_ini_sequence>
	LED_ON
  dc:	57 9a       	sbi	0x0a, 7	; 10
  de:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
  e0:	3c 9a       	sbi	0x07, 4	; 7
  e2:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
  e4:	55 9a       	sbi	0x0a, 5	; 10
	sei();
  e6:	78 94       	sei
	format(line1, line2);
  e8:	84 e3       	ldi	r24, 0x34	; 52
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	66 e4       	ldi	r22, 0x46	; 70
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	ef d1       	rcall	.+990    	; 0x4d0 <format>

	gl_set[sensor_id].ain_th_low = 20;
  f2:	80 91 0f 02 	lds	r24, 0x020F
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	23 e8       	ldi	r18, 0x83	; 131
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	82 9f       	mul	r24, r18
  fe:	f0 01       	movw	r30, r0
 100:	83 9f       	mul	r24, r19
 102:	f0 0d       	add	r31, r0
 104:	92 9f       	mul	r25, r18
 106:	f0 0d       	add	r31, r0
 108:	11 24       	eor	r1, r1
 10a:	ed 5f       	subi	r30, 0xFD	; 253
 10c:	fe 4f       	sbci	r31, 0xFE	; 254
 10e:	e4 58       	subi	r30, 0x84	; 132
 110:	ff 4f       	sbci	r31, 0xFF	; 255
 112:	84 e1       	ldi	r24, 0x14	; 20
 114:	81 93       	st	Z+, r24
	gl_set[sensor_id].ain_th_high = 45;
 116:	8d e2       	ldi	r24, 0x2D	; 45
 118:	80 83       	st	Z, r24
	LED_OFF;
 11a:	5f 98       	cbi	0x0b, 7	; 11
	ADMUX = 2;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 122:	8d ee       	ldi	r24, 0xED	; 237
 124:	80 93 7a 00 	sts	0x007A, r24

	LCD_CONTRAST = 0;
 128:	18 bc       	out	0x28, r1	; 40
 12a:	66 24       	eor	r6, r6
 12c:	77 24       	eor	r7, r7
 12e:	43 01       	movw	r8, r6
 130:	22 24       	eor	r2, r2
 132:	33 24       	eor	r3, r3
 134:	21 01       	movw	r4, r2
 136:	1d 82       	std	Y+5, r1	; 0x05
	while (1)
	{
		ADMUX = 2;
 138:	22 e0       	ldi	r18, 0x02	; 2
 13a:	20 93 7c 00 	sts	0x007C, r18
		SENSOR_ON;
 13e:	39 9a       	sbi	0x07, 1	; 7
 140:	41 9a       	sbi	0x08, 1	; 8
		LED_ON;
 142:	57 9a       	sbi	0x0a, 7	; 10
 144:	5f 9a       	sbi	0x0b, 7	; 11

		time_count = t_capture + (t_postscale * 65536);
		rpm_x10 = 187500000 / time_count;
 146:	20 91 0b 02 	lds	r18, 0x020B
 14a:	30 91 0c 02 	lds	r19, 0x020C
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	a9 01       	movw	r20, r18
 154:	33 27       	eor	r19, r19
 156:	22 27       	eor	r18, r18
 158:	80 91 0d 02 	lds	r24, 0x020D
 15c:	90 91 0e 02 	lds	r25, 0x020E
 160:	a0 e0       	ldi	r26, 0x00	; 0
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	28 0f       	add	r18, r24
 166:	39 1f       	adc	r19, r25
 168:	4a 1f       	adc	r20, r26
 16a:	5b 1f       	adc	r21, r27
 16c:	60 ee       	ldi	r22, 0xE0	; 224
 16e:	75 e0       	ldi	r23, 0x05	; 5
 170:	8d e2       	ldi	r24, 0x2D	; 45
 172:	9b e0       	ldi	r25, 0x0B	; 11
 174:	9d d2       	rcall	.+1338   	; 0x6b0 <__divmodsi4>
 176:	59 01       	movw	r10, r18
 178:	6a 01       	movw	r12, r20
		if (last_rpm_x10 == 0)
 17a:	61 14       	cp	r6, r1
 17c:	71 04       	cpc	r7, r1
 17e:	81 04       	cpc	r8, r1
 180:	91 04       	cpc	r9, r1
 182:	81 f4       	brne	.+32     	; 0x1a4 <main+0x114>
 184:	80 91 0f 02 	lds	r24, 0x020F
 188:	93 e8       	ldi	r25, 0x83	; 131
 18a:	89 9f       	mul	r24, r25
 18c:	f0 01       	movw	r30, r0
 18e:	11 24       	eor	r1, r1
 190:	ed 5f       	subi	r30, 0xFD	; 253
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	80 e0       	ldi	r24, 0x00	; 0
		{
			for (i = 0; i < 30; i++)
			{
				gl_set[sensor_id].rpm_his[i] = 0;
 196:	11 92       	st	Z+, r1
 198:	11 92       	st	Z+, r1
 19a:	11 92       	st	Z+, r1
 19c:	11 92       	st	Z+, r1

		time_count = t_capture + (t_postscale * 65536);
		rpm_x10 = 187500000 / time_count;
		if (last_rpm_x10 == 0)
		{
			for (i = 0; i < 30; i++)
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	8e 31       	cpi	r24, 0x1E	; 30
 1a2:	c9 f7       	brne	.-14     	; 0x196 <main+0x106>
			{
				gl_set[sensor_id].rpm_his[i] = 0;
			}
		}
		if (rpm_x10 > 40000)
 1a4:	21 e4       	ldi	r18, 0x41	; 65
 1a6:	a2 16       	cp	r10, r18
 1a8:	2c e9       	ldi	r18, 0x9C	; 156
 1aa:	b2 06       	cpc	r11, r18
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	c2 06       	cpc	r12, r18
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	d2 06       	cpc	r13, r18
 1b4:	0c f0       	brlt	.+2      	; 0x1b8 <main+0x128>
 1b6:	69 c0       	rjmp	.+210    	; 0x28a <main+0x1fa>
			rpm_x10 = last_rpm_x10;
		if (last_rpm_x10 != rpm_x10)
 1b8:	6a 14       	cp	r6, r10
 1ba:	7b 04       	cpc	r7, r11
 1bc:	8c 04       	cpc	r8, r12
 1be:	9d 04       	cpc	r9, r13
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <main+0x134>
 1c2:	63 c0       	rjmp	.+198    	; 0x28a <main+0x1fa>
		{
			last_rpm_x10 = rpm_x10;

			locate(77);
 1c4:	8d e4       	ldi	r24, 0x4D	; 77
 1c6:	5d d1       	rcall	.+698    	; 0x482 <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)anim_counter]);
 1c8:	e1 e0       	ldi	r30, 0x01	; 1
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ec 0f       	add	r30, r28
 1ce:	fd 1f       	adc	r31, r29
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	e8 0f       	add	r30, r24
 1d4:	f1 1d       	adc	r31, r1
 1d6:	80 81       	ld	r24, Z
 1d8:	0a d1       	rcall	.+532    	; 0x3ee <lcd_send_4b_mode>
			anim_counter++;
 1da:	9d 81       	ldd	r25, Y+5	; 0x05
 1dc:	9f 5f       	subi	r25, 0xFF	; 255
 1de:	9d 83       	std	Y+5, r25	; 0x05
			if (anim_counter > 3)
 1e0:	94 30       	cpi	r25, 0x04	; 4
 1e2:	08 f0       	brcs	.+2      	; 0x1e6 <main+0x156>
 1e4:	1d 82       	std	Y+5, r1	; 0x05
				anim_counter = 0;
			if (n_measures < 30)
 1e6:	80 91 01 01 	lds	r24, 0x0101
 1ea:	8e 31       	cpi	r24, 0x1E	; 30
 1ec:	18 f4       	brcc	.+6      	; 0x1f4 <main+0x164>
				n_measures++;
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 93 01 01 	sts	0x0101, r24
			for (i = 0; i < 29; i++)
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
 1f4:	80 91 0f 02 	lds	r24, 0x020F
 1f8:	48 2f       	mov	r20, r24
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	83 e8       	ldi	r24, 0x83	; 131
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	48 9f       	mul	r20, r24
 202:	f0 01       	movw	r30, r0
 204:	49 9f       	mul	r20, r25
 206:	f0 0d       	add	r31, r0
 208:	58 9f       	mul	r21, r24
 20a:	f0 0d       	add	r31, r0
 20c:	11 24       	eor	r1, r1
 20e:	ed 5f       	subi	r30, 0xFD	; 253
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	84 81       	ldd	r24, Z+4	; 0x04
 216:	95 81       	ldd	r25, Z+5	; 0x05
 218:	a6 81       	ldd	r26, Z+6	; 0x06
 21a:	b7 81       	ldd	r27, Z+7	; 0x07
 21c:	81 93       	st	Z+, r24
 21e:	91 93       	st	Z+, r25
 220:	a1 93       	st	Z+, r26
 222:	b1 93       	st	Z+, r27
			anim_counter++;
			if (anim_counter > 3)
				anim_counter = 0;
			if (n_measures < 30)
				n_measures++;
			for (i = 0; i < 29; i++)
 224:	2f 5f       	subi	r18, 0xFF	; 255
 226:	2d 31       	cpi	r18, 0x1D	; 29
 228:	a9 f7       	brne	.-22     	; 0x214 <main+0x184>
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[29] = rpm_x10;
 22a:	83 e8       	ldi	r24, 0x83	; 131
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	48 9f       	mul	r20, r24
 230:	f0 01       	movw	r30, r0
 232:	49 9f       	mul	r20, r25
 234:	f0 0d       	add	r31, r0
 236:	58 9f       	mul	r21, r24
 238:	f0 0d       	add	r31, r0
 23a:	11 24       	eor	r1, r1
 23c:	ed 5f       	subi	r30, 0xFD	; 253
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	ec 58       	subi	r30, 0x8C	; 140
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	a0 82       	st	Z, r10
 246:	b1 82       	std	Z+1, r11	; 0x01
 248:	c2 82       	std	Z+2, r12	; 0x02
 24a:	d3 82       	std	Z+3, r13	; 0x03
 24c:	e4 57       	subi	r30, 0x74	; 116
 24e:	f0 40       	sbci	r31, 0x00	; 0
 250:	ee 24       	eor	r14, r14
 252:	ff 24       	eor	r15, r15
 254:	87 01       	movw	r16, r14
 256:	20 e0       	ldi	r18, 0x00	; 0

			rpm_avg = 0;
			for (i = 0; i < 30; i++)
			{
				rpm_avg += gl_set[sensor_id].rpm_his[i];
 258:	81 91       	ld	r24, Z+
 25a:	91 91       	ld	r25, Z+
 25c:	a1 91       	ld	r26, Z+
 25e:	b1 91       	ld	r27, Z+
 260:	e8 0e       	add	r14, r24
 262:	f9 1e       	adc	r15, r25
 264:	0a 1f       	adc	r16, r26
 266:	1b 1f       	adc	r17, r27
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[29] = rpm_x10;

			rpm_avg = 0;
			for (i = 0; i < 30; i++)
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	2e 31       	cpi	r18, 0x1E	; 30
 26c:	a9 f7       	brne	.-22     	; 0x258 <main+0x1c8>
			{
				rpm_avg += gl_set[sensor_id].rpm_his[i];
			}
			rpm_avg = rpm_avg / n_measures;
 26e:	20 91 01 01 	lds	r18, 0x0101
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	c8 01       	movw	r24, r16
 27a:	b7 01       	movw	r22, r14
 27c:	19 d2       	rcall	.+1074   	; 0x6b0 <__divmodsi4>
 27e:	c9 01       	movw	r24, r18
 280:	da 01       	movw	r26, r20
 282:	1c 01       	movw	r2, r24
 284:	2d 01       	movw	r4, r26
 286:	35 01       	movw	r6, r10
 288:	46 01       	movw	r8, r12
		}

		refresh_counter++;
 28a:	80 91 09 02 	lds	r24, 0x0209
 28e:	90 91 0a 02 	lds	r25, 0x020A
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	90 93 0a 02 	sts	0x020A, r25
 298:	80 93 09 02 	sts	0x0209, r24

		if (refresh_counter > 20000)
 29c:	81 52       	subi	r24, 0x21	; 33
 29e:	9e 44       	sbci	r25, 0x4E	; 78
 2a0:	08 f4       	brcc	.+2      	; 0x2a4 <main+0x214>
 2a2:	4a cf       	rjmp	.-364    	; 0x138 <main+0xa8>
		{
			refresh_counter = 0;
 2a4:	10 92 0a 02 	sts	0x020A, r1
 2a8:	10 92 09 02 	sts	0x0209, r1
			lcd_send_floatx10(rpm_avg, 68, 7, 1); //rpm_x10
 2ac:	c2 01       	movw	r24, r4
 2ae:	b1 01       	movw	r22, r2
 2b0:	44 e4       	ldi	r20, 0x44	; 68
 2b2:	27 e0       	ldi	r18, 0x07	; 7
 2b4:	01 e0       	ldi	r16, 0x01	; 1
 2b6:	37 d1       	rcall	.+622    	; 0x526 <lcd_send_floatx10>
 2b8:	3f cf       	rjmp	.-386    	; 0x138 <main+0xa8>

000002ba <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1<<COM1B1)|(1<<WGM01)|(1<<WGM00);
 2ba:	83 e2       	ldi	r24, 0x23	; 35
 2bc:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00); 
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25; 
 2c2:	89 e1       	ldi	r24, 0x19	; 25
 2c4:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0<<OCIE0A);
 2c6:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 2ca:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);
 2d4:	90 93 6f 00 	sts	0x006F, r25


}
 2d8:	08 95       	ret

000002da <setup_io>:


void setup_io()
{
	DIDR0 = (1<<ADC2D); //disable digital input on ADC2
 2da:	84 e0       	ldi	r24, 0x04	; 4
 2dc:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1<<PORTB1); //set push button as input
 2e0:	21 98       	cbi	0x04, 1	; 4

	PORTB |= (1<<PORTB1); //activte the pull up resistor for the push button
 2e2:	29 9a       	sbi	0x05, 1	; 5
	
	LCD_EN_PORT |= _BV(LCD_EN);
 2e4:	45 9a       	sbi	0x08, 5	; 8
  LCD_RS_PORT &= ~(_BV(LCD_RS));	
 2e6:	5c 98       	cbi	0x0b, 4	; 11
}
 2e8:	08 95       	ret

000002ea <__vector_13>:



ISR(TIMER1_OVF_vect)
{
	//LED_ON;
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
	post_scaller++;
}
 2f6:	80 91 02 01 	lds	r24, 0x0102
 2fa:	8f 5f       	subi	r24, 0xFF	; 255
 2fc:	80 93 02 01 	sts	0x0102, r24

 300:	8f 91       	pop	r24
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

0000030c <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	2f 93       	push	r18
 318:	3f 93       	push	r19
 31a:	4f 93       	push	r20
 31c:	5f 93       	push	r21
 31e:	6f 93       	push	r22
 320:	7f 93       	push	r23
 322:	8f 93       	push	r24
 324:	9f 93       	push	r25
 326:	af 93       	push	r26
 328:	bf 93       	push	r27
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value 
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC>>2;			
 32e:	80 91 78 00 	lds	r24, 0x0078
 332:	90 91 79 00 	lds	r25, 0x0079
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	68 2f       	mov	r22, r24
 340:	80 93 94 02 	sts	0x0294, r24
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state==0)) //a cycle is detected 
 344:	80 91 99 02 	lds	r24, 0x0299
 348:	86 17       	cp	r24, r22
 34a:	d8 f4       	brcc	.+54     	; 0x382 <__vector_21+0x76>
 34c:	80 91 10 02 	lds	r24, 0x0210
 350:	88 23       	and	r24, r24
 352:	b9 f4       	brne	.+46     	; 0x382 <__vector_21+0x76>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
		t_capture=TCNT1;TCNT1 = 0;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 10 02 	sts	0x0210, r24
		t_postscale=post_scaller; post_scaller=0;
 35a:	80 91 84 00 	lds	r24, 0x0084
 35e:	90 91 85 00 	lds	r25, 0x0085
 362:	90 93 0e 02 	sts	0x020E, r25
 366:	80 93 0d 02 	sts	0x020D, r24
 36a:	10 92 85 00 	sts	0x0085, r1
 36e:	10 92 84 00 	sts	0x0084, r1
	}
 372:	80 91 02 01 	lds	r24, 0x0102
 376:	80 93 0b 02 	sts	0x020B, r24
 37a:	10 92 0c 02 	sts	0x020C, r1
 37e:	10 92 02 01 	sts	0x0102, r1

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state==1)) //a low level is detected
	{
 382:	80 91 8f 02 	lds	r24, 0x028F
 386:	68 17       	cp	r22, r24
 388:	30 f4       	brcc	.+12     	; 0x396 <__vector_21+0x8a>
 38a:	80 91 10 02 	lds	r24, 0x0210
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	11 f4       	brne	.+4      	; 0x396 <__vector_21+0x8a>
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
	}
 392:	10 92 10 02 	sts	0x0210, r1

	if (delta(gl_set[sensor_id].ir_history_a,gl_set[sensor_id].ir_value) > 10)
	{
 396:	80 91 9e 02 	lds	r24, 0x029E
 39a:	73 de       	rcall	.-794    	; 0x82 <delta>
 39c:	8b 30       	cpi	r24, 0x0B	; 11
 39e:	b0 f0       	brcs	.+44     	; 0x3cc <__vector_21+0xc0>
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 3a0:	80 91 9e 02 	lds	r24, 0x029E
 3a4:	80 93 91 02 	sts	0x0291, r24
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a+gl_set[sensor_id].ir_history_b)/2;
 3a8:	20 91 94 02 	lds	r18, 0x0294
 3ac:	20 93 9e 02 	sts	0x029E, r18
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	28 0f       	add	r18, r24
 3b4:	31 1d       	adc	r19, r1
 3b6:	35 95       	asr	r19
 3b8:	27 95       	ror	r18
 3ba:	82 2f       	mov	r24, r18
 3bc:	20 93 95 02 	sts	0x0295, r18
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 3c0:	8b 5f       	subi	r24, 0xFB	; 251
 3c2:	80 93 99 02 	sts	0x0299, r24
	}
 3c6:	8a 50       	subi	r24, 0x0A	; 10
 3c8:	80 93 8f 02 	sts	0x028F, r24
}

 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <lcd_send_4b_mode>:



void lcd_send_4b_mode(unsigned char data){
	
  LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 3ee:	9a b1       	in	r25, 0x0a	; 10
 3f0:	9f 60       	ori	r25, 0x0F	; 15
 3f2:	9a b9       	out	0x0a, r25	; 10
	
	LCD_EN_PORT |= _BV(LCD_EN);
 3f4:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 3f6:	48 e8       	ldi	r20, 0x88	; 136
 3f8:	53 e1       	ldi	r21, 0x13	; 19
 3fa:	fa 01       	movw	r30, r20
 3fc:	31 97       	sbiw	r30, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <lcd_send_4b_mode+0xe>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 400:	9b b1       	in	r25, 0x0b	; 11
 402:	90 7f       	andi	r25, 0xF0	; 240
 404:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data>>4)<<LCD_SHIFT)&LCD_MASK;
 406:	2b b1       	in	r18, 0x0b	; 11
 408:	98 2f       	mov	r25, r24
 40a:	92 95       	swap	r25
 40c:	9f 70       	andi	r25, 0x0F	; 15
 40e:	92 2b       	or	r25, r18
 410:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 412:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 414:	45 9a       	sbi	0x08, 5	; 8
 416:	fa 01       	movw	r30, r20
 418:	31 97       	sbiw	r30, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <lcd_send_4b_mode+0x2a>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 41c:	9b b1       	in	r25, 0x0b	; 11
 41e:	90 7f       	andi	r25, 0xF0	; 240
 420:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data&LCD_MASK)<<LCD_SHIFT);
 422:	9b b1       	in	r25, 0x0b	; 11
 424:	8f 70       	andi	r24, 0x0F	; 15
 426:	98 2b       	or	r25, r24
 428:	9b b9       	out	0x0b, r25	; 11


	LCD_EN_PORT &= ~(_BV(LCD_EN));
 42a:	45 98       	cbi	0x08, 5	; 8
 42c:	ca 01       	movw	r24, r20
 42e:	01 97       	sbiw	r24, 0x01	; 1
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_send_4b_mode+0x40>
	_delay_ms (1);
} 
 432:	08 95       	ret

00000434 <cls>:
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
		cls();
}
void cls(){     // clear the display
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 434:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(0x01);   
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	da df       	rcall	.-76     	; 0x3ee <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 43a:	5c 9a       	sbi	0x0b, 4	; 11
}
 43c:	08 95       	ret

0000043e <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}


void ini_lcd_4_bit_mode(){
 43e:	cf 93       	push	r28
 440:	df 93       	push	r29
 442:	c8 e5       	ldi	r28, 0x58	; 88
 444:	d0 e0       	ldi	r29, 0x00	; 0
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 446:	fe 01       	movw	r30, r28
 448:	84 91       	lpm	r24, Z+
 44a:	d1 df       	rcall	.-94     	; 0x3ee <lcd_send_4b_mode>
 44c:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode(){
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	c0 36       	cpi	r28, 0x60	; 96
 452:	df 07       	cpc	r29, r31
 454:	c1 f7       	brne	.-16     	; 0x446 <ini_lcd_4_bit_mode+0x8>
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
   }
   LCD_RS_PORT |= _BV(LCD_RS);
 456:	5c 9a       	sbi	0x0b, 4	; 11
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms (1);
} 

void lcd_ini_sequence()
{
 45e:	84 ec       	ldi	r24, 0xC4	; 196
 460:	99 e0       	ldi	r25, 0x09	; 9
 462:	24 ef       	ldi	r18, 0xF4	; 244
 464:	31 e0       	ldi	r19, 0x01	; 1
 466:	f9 01       	movw	r30, r18
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 46e:	d9 f7       	brne	.-10     	; 0x466 <lcd_ini_sequence+0x8>
		
		_delay_ms(250); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 470:	e6 df       	rcall	.-52     	; 0x43e <ini_lcd_4_bit_mode>
		cls();
 472:	e0 df       	rcall	.-64     	; 0x434 <cls>
 474:	80 e5       	ldi	r24, 0x50	; 80
 476:	93 ec       	ldi	r25, 0xC3	; 195
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <lcd_ini_sequence+0x1a>
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 47c:	e0 df       	rcall	.-64     	; 0x43e <ini_lcd_4_bit_mode>
		cls();
 47e:	da df       	rcall	.-76     	; 0x434 <cls>
}
 480:	08 95       	ret

00000482 <locate>:
   LCD_RS_PORT |= _BV(LCD_RS);
}

void locate(unsigned char pos){
   pos = pos | (1 << 7);
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 482:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(pos);   
 484:	80 68       	ori	r24, 0x80	; 128
 486:	b3 df       	rcall	.-154    	; 0x3ee <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 488:	5c 9a       	sbi	0x0b, 4	; 11
}
 48a:	08 95       	ret

0000048c <put_str>:
	{
		lcd_send_4b_mode(' ');  
	}
}

void put_str(uchar pos, char* str){     
 48c:	0f 93       	push	r16
 48e:	1f 93       	push	r17
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 496:	f5 df       	rcall	.-22     	; 0x482 <locate>
 498:	c0 e0       	ldi	r28, 0x00	; 0
 49a:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i< 16; i++){				
		lcd_send_4b_mode(pgm_read_byte(str + i));
 49c:	f8 01       	movw	r30, r16
 49e:	ec 0f       	add	r30, r28
 4a0:	fd 1f       	adc	r31, r29
 4a2:	e4 91       	lpm	r30, Z+
 4a4:	8e 2f       	mov	r24, r30
 4a6:	a3 df       	rcall	.-186    	; 0x3ee <lcd_send_4b_mode>
 4a8:	21 96       	adiw	r28, 0x01	; 1
}

void put_str(uchar pos, char* str){     
	uchar i;
	locate(pos);
	for (i = 0; i< 16; i++){				
 4aa:	c0 31       	cpi	r28, 0x10	; 16
 4ac:	d1 05       	cpc	r29, r1
 4ae:	b1 f7       	brne	.-20     	; 0x49c <put_str+0x10>
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <clr_line>:
   LCD_RS_PORT &= ~(_BV(LCD_RS));
   lcd_send_4b_mode(0x01);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add){     // clear line
 4ba:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 4bc:	e2 df       	rcall	.-60     	; 0x482 <locate>
 4be:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<16; i++)
	{
		lcd_send_4b_mode(' ');  
 4c0:	80 e2       	ldi	r24, 0x20	; 32
 4c2:	95 df       	rcall	.-214    	; 0x3ee <lcd_send_4b_mode>
}

void clr_line(uchar start_add){     // clear line
	uchar i;
	locate(start_add);
	for (i=0; i<16; i++)
 4c4:	1f 5f       	subi	r17, 0xFF	; 255
 4c6:	10 31       	cpi	r17, 0x10	; 16
 4c8:	d9 f7       	brne	.-10     	; 0x4c0 <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');  
	}
}
 4ca:	1f 91       	pop	r17
 4cc:	08 95       	ret

000004ce <lcd_contrast>:
void lcd_contrast()
{


	
}
 4ce:	08 95       	ret

000004d0 <format>:

void format(char* line1,char* line2){     // reformat the display
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	8c 01       	movw	r16, r24
 4de:	7b 01       	movw	r14, r22
    unsigned char i;
		locate(0);
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	cf df       	rcall	.-98     	; 0x482 <locate>
 4e4:	c0 e0       	ldi	r28, 0x00	; 0
 4e6:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
 4e8:	f8 01       	movw	r30, r16
 4ea:	ec 0f       	add	r30, r28
 4ec:	fd 1f       	adc	r31, r29
 4ee:	e4 91       	lpm	r30, Z+
 4f0:	8e 2f       	mov	r24, r30
 4f2:	7d df       	rcall	.-262    	; 0x3ee <lcd_send_4b_mode>
 4f4:	21 96       	adiw	r28, 0x01	; 1
}

void format(char* line1,char* line2){     // reformat the display
    unsigned char i;
		locate(0);
		for (i = 0; i< 16; i++){				
 4f6:	c0 31       	cpi	r28, 0x10	; 16
 4f8:	d1 05       	cpc	r29, r1
 4fa:	b1 f7       	brne	.-20     	; 0x4e8 <format+0x18>
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
 4fc:	80 e4       	ldi	r24, 0x40	; 64
 4fe:	c1 df       	rcall	.-126    	; 0x482 <locate>
 500:	c0 e0       	ldi	r28, 0x00	; 0
 502:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
 504:	f7 01       	movw	r30, r14
 506:	ec 0f       	add	r30, r28
 508:	fd 1f       	adc	r31, r29
 50a:	e4 91       	lpm	r30, Z+
 50c:	8e 2f       	mov	r24, r30
 50e:	6f df       	rcall	.-290    	; 0x3ee <lcd_send_4b_mode>
 510:	21 96       	adiw	r28, 0x01	; 1
		locate(0);
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
		for (i = 0; i< 16; i++){
 512:	c0 31       	cpi	r28, 0x10	; 16
 514:	d1 05       	cpc	r29, r1
 516:	b1 f7       	brne	.-20     	; 0x504 <format+0x34>
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
		}
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	ff 90       	pop	r15
 522:	ef 90       	pop	r14
 524:	08 95       	ret

00000526 <lcd_send_floatx10>:
   lcd_send_4b_mode(pos);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data,uchar location, uchar len, uchar d_len)
{
 526:	af 92       	push	r10
 528:	bf 92       	push	r11
 52a:	cf 92       	push	r12
 52c:	df 92       	push	r13
 52e:	ef 92       	push	r14
 530:	ff 92       	push	r15
 532:	0f 93       	push	r16
 534:	1f 93       	push	r17
 536:	df 93       	push	r29
 538:	cf 93       	push	r28
 53a:	cd b7       	in	r28, 0x3d	; 61
 53c:	de b7       	in	r29, 0x3e	; 62
 53e:	60 97       	sbiw	r28, 0x10	; 16
 540:	0f b6       	in	r0, 0x3f	; 63
 542:	f8 94       	cli
 544:	de bf       	out	0x3e, r29	; 62
 546:	0f be       	out	0x3f, r0	; 63
 548:	cd bf       	out	0x3d, r28	; 61
 54a:	6b 01       	movw	r12, r22
 54c:	7c 01       	movw	r14, r24
 54e:	14 2f       	mov	r17, r20
 550:	a2 2e       	mov	r10, r18
 552:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];
	
	uchar i,y,temp,int_len;
	t=0;
 554:	10 92 00 01 	sts	0x0100, r1

	if (data < 0)
 558:	97 ff       	sbrs	r25, 7
 55a:	03 c0       	rjmp	.+6      	; 0x562 <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 55c:	8e e4       	ldi	r24, 0x4E	; 78
 55e:	89 83       	std	Y+1, r24	; 0x01
 560:	06 c0       	rjmp	.+12     	; 0x56e <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 562:	ae 01       	movw	r20, r28
 564:	4f 5f       	subi	r20, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	2a e0       	ldi	r18, 0x0A	; 10
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	de d0       	rcall	.+444    	; 0x72a <ltoa>
	}

	locate(location);
 56e:	81 2f       	mov	r24, r17
 570:	88 df       	rcall	.-240    	; 0x482 <locate>

	i=0;
	if (d_len == 2)
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	b8 16       	cp	r11, r24
 576:	11 f0       	breq	.+4      	; 0x57c <lcd_send_floatx10+0x56>
 578:	8a e0       	ldi	r24, 0x0A	; 10
 57a:	01 c0       	rjmp	.+2      	; 0x57e <lcd_send_floatx10+0x58>
 57c:	84 e6       	ldi	r24, 0x64	; 100
		temp = 100;
	}else{
		temp = 10;	
	}

	if( data >= temp){
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	a0 e0       	ldi	r26, 0x00	; 0
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	c8 16       	cp	r12, r24
 586:	d9 06       	cpc	r13, r25
 588:	ea 06       	cpc	r14, r26
 58a:	fb 06       	cpc	r15, r27
 58c:	0c f4       	brge	.+2      	; 0x590 <lcd_send_floatx10+0x6a>
 58e:	47 c0       	rjmp	.+142    	; 0x61e <lcd_send_floatx10+0xf8>
		if (strlen(buffer)>len)
 590:	fe 01       	movw	r30, r28
 592:	31 96       	adiw	r30, 0x01	; 1
 594:	df 01       	movw	r26, r30
 596:	0d 90       	ld	r0, X+
 598:	00 20       	and	r0, r0
 59a:	e9 f7       	brne	.-6      	; 0x596 <lcd_send_floatx10+0x70>
 59c:	11 97       	sbiw	r26, 0x01	; 1
 59e:	ae 1b       	sub	r26, r30
 5a0:	bf 0b       	sbc	r27, r31
 5a2:	8a 2d       	mov	r24, r10
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	8a 17       	cp	r24, r26
 5a8:	9b 07       	cpc	r25, r27
 5aa:	10 f4       	brcc	.+4      	; 0x5b0 <lcd_send_floatx10+0x8a>
 5ac:	8a 2d       	mov	r24, r10
 5ae:	01 c0       	rjmp	.+2      	; 0x5b2 <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 5b0:	8a 2f       	mov	r24, r26
 5b2:	00 e0       	ldi	r16, 0x00	; 0
		}

		for(i=0; i<(int_len-d_len);i++)
 5b4:	e8 2e       	mov	r14, r24
 5b6:	ff 24       	eor	r15, r15
 5b8:	eb 18       	sub	r14, r11
 5ba:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 5bc:	6e 01       	movw	r12, r28
 5be:	08 94       	sec
 5c0:	c1 1c       	adc	r12, r1
 5c2:	d1 1c       	adc	r13, r1
 5c4:	0a c0       	rjmp	.+20     	; 0x5da <lcd_send_floatx10+0xb4>
 5c6:	ec 0d       	add	r30, r12
 5c8:	fd 1d       	adc	r31, r13
 5ca:	80 81       	ld	r24, Z
 5cc:	10 df       	rcall	.-480    	; 0x3ee <lcd_send_4b_mode>
			t++;
 5ce:	80 91 00 01 	lds	r24, 0x0100
 5d2:	8f 5f       	subi	r24, 0xFF	; 255
 5d4:	80 93 00 01 	sts	0x0100, r24
		else
		{
			int_len = strlen(buffer);
		}

		for(i=0; i<(int_len-d_len);i++)
 5d8:	0f 5f       	subi	r16, 0xFF	; 255
 5da:	e0 2f       	mov	r30, r16
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	ee 15       	cp	r30, r14
 5e0:	ff 05       	cpc	r31, r15
 5e2:	8c f3       	brlt	.-30     	; 0x5c6 <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 5e4:	8e e2       	ldi	r24, 0x2E	; 46
 5e6:	03 df       	rcall	.-506    	; 0x3ee <lcd_send_4b_mode>
		t++;
 5e8:	80 91 00 01 	lds	r24, 0x0100
 5ec:	8f 5f       	subi	r24, 0xFF	; 255
 5ee:	80 93 00 01 	sts	0x0100, r24
 5f2:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<(d_len);y++)
		{
			lcd_send_4b_mode(buffer[i]);
 5f4:	7e 01       	movw	r14, r28
 5f6:	08 94       	sec
 5f8:	e1 1c       	adc	r14, r1
 5fa:	f1 1c       	adc	r15, r1
 5fc:	0b c0       	rjmp	.+22     	; 0x614 <lcd_send_floatx10+0xee>
 5fe:	f7 01       	movw	r30, r14
 600:	e8 0f       	add	r30, r24
 602:	f1 1d       	adc	r31, r1
 604:	80 81       	ld	r24, Z
 606:	f3 de       	rcall	.-538    	; 0x3ee <lcd_send_4b_mode>
			i++;	
			t++;
 608:	80 91 00 01 	lds	r24, 0x0100
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	80 93 00 01 	sts	0x0100, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<(d_len);y++)
 612:	1f 5f       	subi	r17, 0xFF	; 255
 614:	81 2f       	mov	r24, r17
 616:	80 0f       	add	r24, r16
 618:	1b 15       	cp	r17, r11
 61a:	88 f3       	brcs	.-30     	; 0x5fe <lcd_send_floatx10+0xd8>
 61c:	34 c0       	rjmp	.+104    	; 0x686 <lcd_send_floatx10+0x160>
			i++;	
			t++;
		}
		
	}else{
		lcd_send_4b_mode('0');
 61e:	80 e3       	ldi	r24, 0x30	; 48
 620:	e6 de       	rcall	.-564    	; 0x3ee <lcd_send_4b_mode>
		t++;
 622:	80 91 00 01 	lds	r24, 0x0100
 626:	8f 5f       	subi	r24, 0xFF	; 255
 628:	80 93 00 01 	sts	0x0100, r24
		lcd_send_4b_mode('.');
 62c:	8e e2       	ldi	r24, 0x2E	; 46
 62e:	df de       	rcall	.-578    	; 0x3ee <lcd_send_4b_mode>
		t++;
 630:	80 91 00 01 	lds	r24, 0x0100
 634:	8f 5f       	subi	r24, 0xFF	; 255
 636:	80 93 00 01 	sts	0x0100, r24
 63a:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<d_len;y++)
		{
			if(y < strlen(buffer))
 63c:	7e 01       	movw	r14, r28
 63e:	08 94       	sec
 640:	e1 1c       	adc	r14, r1
 642:	f1 1c       	adc	r15, r1
 644:	16 c0       	rjmp	.+44     	; 0x672 <lcd_send_floatx10+0x14c>
 646:	f7 01       	movw	r30, r14
 648:	01 90       	ld	r0, Z+
 64a:	00 20       	and	r0, r0
 64c:	e9 f7       	brne	.-6      	; 0x648 <lcd_send_floatx10+0x122>
 64e:	31 97       	sbiw	r30, 0x01	; 1
 650:	ee 19       	sub	r30, r14
 652:	ff 09       	sbc	r31, r15
 654:	a1 2f       	mov	r26, r17
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	ae 17       	cp	r26, r30
 65a:	bf 07       	cpc	r27, r31
 65c:	48 f4       	brcc	.+18     	; 0x670 <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);	
 65e:	ae 0d       	add	r26, r14
 660:	bf 1d       	adc	r27, r15
 662:	8c 91       	ld	r24, X
 664:	c4 de       	rcall	.-632    	; 0x3ee <lcd_send_4b_mode>
				i++;
				t++;
 666:	80 91 00 01 	lds	r24, 0x0100
 66a:	8f 5f       	subi	r24, 0xFF	; 255
 66c:	80 93 00 01 	sts	0x0100, r24
	}else{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<d_len;y++)
 670:	1f 5f       	subi	r17, 0xFF	; 255
 672:	1b 15       	cp	r17, r11
 674:	40 f3       	brcs	.-48     	; 0x646 <lcd_send_floatx10+0x120>
 676:	07 c0       	rjmp	.+14     	; 0x686 <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
	{
		lcd_send_4b_mode(' ');
 678:	80 e2       	ldi	r24, 0x20	; 32
 67a:	b9 de       	rcall	.-654    	; 0x3ee <lcd_send_4b_mode>
		t++;
 67c:	80 91 00 01 	lds	r24, 0x0100
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
 686:	80 91 00 01 	lds	r24, 0x0100
 68a:	8a 15       	cp	r24, r10
 68c:	a8 f3       	brcs	.-22     	; 0x678 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 68e:	60 96       	adiw	r28, 0x10	; 16
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61
 69a:	cf 91       	pop	r28
 69c:	df 91       	pop	r29
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	ff 90       	pop	r15
 6a4:	ef 90       	pop	r14
 6a6:	df 90       	pop	r13
 6a8:	cf 90       	pop	r12
 6aa:	bf 90       	pop	r11
 6ac:	af 90       	pop	r10
 6ae:	08 95       	ret

000006b0 <__divmodsi4>:
 6b0:	97 fb       	bst	r25, 7
 6b2:	09 2e       	mov	r0, r25
 6b4:	05 26       	eor	r0, r21
 6b6:	0e d0       	rcall	.+28     	; 0x6d4 <__divmodsi4_neg1>
 6b8:	57 fd       	sbrc	r21, 7
 6ba:	04 d0       	rcall	.+8      	; 0x6c4 <__divmodsi4_neg2>
 6bc:	14 d0       	rcall	.+40     	; 0x6e6 <__udivmodsi4>
 6be:	0a d0       	rcall	.+20     	; 0x6d4 <__divmodsi4_neg1>
 6c0:	00 1c       	adc	r0, r0
 6c2:	38 f4       	brcc	.+14     	; 0x6d2 <__divmodsi4_exit>

000006c4 <__divmodsi4_neg2>:
 6c4:	50 95       	com	r21
 6c6:	40 95       	com	r20
 6c8:	30 95       	com	r19
 6ca:	21 95       	neg	r18
 6cc:	3f 4f       	sbci	r19, 0xFF	; 255
 6ce:	4f 4f       	sbci	r20, 0xFF	; 255
 6d0:	5f 4f       	sbci	r21, 0xFF	; 255

000006d2 <__divmodsi4_exit>:
 6d2:	08 95       	ret

000006d4 <__divmodsi4_neg1>:
 6d4:	f6 f7       	brtc	.-4      	; 0x6d2 <__divmodsi4_exit>
 6d6:	90 95       	com	r25
 6d8:	80 95       	com	r24
 6da:	70 95       	com	r23
 6dc:	61 95       	neg	r22
 6de:	7f 4f       	sbci	r23, 0xFF	; 255
 6e0:	8f 4f       	sbci	r24, 0xFF	; 255
 6e2:	9f 4f       	sbci	r25, 0xFF	; 255
 6e4:	08 95       	ret

000006e6 <__udivmodsi4>:
 6e6:	a1 e2       	ldi	r26, 0x21	; 33
 6e8:	1a 2e       	mov	r1, r26
 6ea:	aa 1b       	sub	r26, r26
 6ec:	bb 1b       	sub	r27, r27
 6ee:	fd 01       	movw	r30, r26
 6f0:	0d c0       	rjmp	.+26     	; 0x70c <__udivmodsi4_ep>

000006f2 <__udivmodsi4_loop>:
 6f2:	aa 1f       	adc	r26, r26
 6f4:	bb 1f       	adc	r27, r27
 6f6:	ee 1f       	adc	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	a2 17       	cp	r26, r18
 6fc:	b3 07       	cpc	r27, r19
 6fe:	e4 07       	cpc	r30, r20
 700:	f5 07       	cpc	r31, r21
 702:	20 f0       	brcs	.+8      	; 0x70c <__udivmodsi4_ep>
 704:	a2 1b       	sub	r26, r18
 706:	b3 0b       	sbc	r27, r19
 708:	e4 0b       	sbc	r30, r20
 70a:	f5 0b       	sbc	r31, r21

0000070c <__udivmodsi4_ep>:
 70c:	66 1f       	adc	r22, r22
 70e:	77 1f       	adc	r23, r23
 710:	88 1f       	adc	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	1a 94       	dec	r1
 716:	69 f7       	brne	.-38     	; 0x6f2 <__udivmodsi4_loop>
 718:	60 95       	com	r22
 71a:	70 95       	com	r23
 71c:	80 95       	com	r24
 71e:	90 95       	com	r25
 720:	9b 01       	movw	r18, r22
 722:	ac 01       	movw	r20, r24
 724:	bd 01       	movw	r22, r26
 726:	cf 01       	movw	r24, r30
 728:	08 95       	ret

0000072a <ltoa>:
 72a:	fa 01       	movw	r30, r20
 72c:	cf 93       	push	r28
 72e:	ff 93       	push	r31
 730:	ef 93       	push	r30
 732:	22 30       	cpi	r18, 0x02	; 2
 734:	3c f1       	brlt	.+78     	; 0x784 <ltoa+0x5a>
 736:	25 32       	cpi	r18, 0x25	; 37
 738:	2c f5       	brge	.+74     	; 0x784 <ltoa+0x5a>
 73a:	c2 2f       	mov	r28, r18
 73c:	e8 94       	clt
 73e:	ca 30       	cpi	r28, 0x0A	; 10
 740:	49 f4       	brne	.+18     	; 0x754 <ltoa+0x2a>
 742:	97 fb       	bst	r25, 7
 744:	3e f4       	brtc	.+14     	; 0x754 <ltoa+0x2a>
 746:	90 95       	com	r25
 748:	80 95       	com	r24
 74a:	70 95       	com	r23
 74c:	61 95       	neg	r22
 74e:	7f 4f       	sbci	r23, 0xFF	; 255
 750:	8f 4f       	sbci	r24, 0xFF	; 255
 752:	9f 4f       	sbci	r25, 0xFF	; 255
 754:	2c 2f       	mov	r18, r28
 756:	33 27       	eor	r19, r19
 758:	44 27       	eor	r20, r20
 75a:	55 27       	eor	r21, r21
 75c:	ff 93       	push	r31
 75e:	ef 93       	push	r30
 760:	c2 df       	rcall	.-124    	; 0x6e6 <__udivmodsi4>
 762:	ef 91       	pop	r30
 764:	ff 91       	pop	r31
 766:	60 5d       	subi	r22, 0xD0	; 208
 768:	6a 33       	cpi	r22, 0x3A	; 58
 76a:	0c f0       	brlt	.+2      	; 0x76e <ltoa+0x44>
 76c:	69 5d       	subi	r22, 0xD9	; 217
 76e:	61 93       	st	Z+, r22
 770:	b9 01       	movw	r22, r18
 772:	ca 01       	movw	r24, r20
 774:	60 50       	subi	r22, 0x00	; 0
 776:	70 40       	sbci	r23, 0x00	; 0
 778:	80 40       	sbci	r24, 0x00	; 0
 77a:	90 40       	sbci	r25, 0x00	; 0
 77c:	59 f7       	brne	.-42     	; 0x754 <ltoa+0x2a>
 77e:	16 f4       	brtc	.+4      	; 0x784 <ltoa+0x5a>
 780:	cd e2       	ldi	r28, 0x2D	; 45
 782:	c1 93       	st	Z+, r28
 784:	10 82       	st	Z, r1
 786:	8f 91       	pop	r24
 788:	9f 91       	pop	r25
 78a:	cf 91       	pop	r28
 78c:	00 c0       	rjmp	.+0      	; 0x78e <strrev>

0000078e <strrev>:
 78e:	dc 01       	movw	r26, r24
 790:	fc 01       	movw	r30, r24
 792:	67 2f       	mov	r22, r23
 794:	71 91       	ld	r23, Z+
 796:	77 23       	and	r23, r23
 798:	e1 f7       	brne	.-8      	; 0x792 <strrev+0x4>
 79a:	32 97       	sbiw	r30, 0x02	; 2
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <strrev+0x18>
 79e:	7c 91       	ld	r23, X
 7a0:	6d 93       	st	X+, r22
 7a2:	70 83       	st	Z, r23
 7a4:	62 91       	ld	r22, -Z
 7a6:	ae 17       	cp	r26, r30
 7a8:	bf 07       	cpc	r27, r31
 7aa:	c8 f3       	brcs	.-14     	; 0x79e <strrev+0x10>
 7ac:	08 95       	ret

000007ae <_exit>:
 7ae:	f8 94       	cli

000007b0 <__stop_program>:
 7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <__stop_program>
