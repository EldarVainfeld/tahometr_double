
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000097e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000078  00800100  00800100  000009f2  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000031c  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c42  00000000  00000000  00000d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000410  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000085f  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00002640  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002f9  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000498  00000000  00000000  00002a79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	26 c2       	rjmp	.+1100   	; 0x468 <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	2f c2       	rjmp	.+1118   	; 0x48a <__vector_21>
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_clear_bss>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a8 37       	cpi	r26, 0x78	; 120
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	09 d0       	rcall	.+18     	; 0x90 <main>
  7e:	7d c4       	rjmp	.+2298   	; 0x97a <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  82:	68 17       	cp	r22, r24
  84:	10 f4       	brcc	.+4      	; 0x8a <delta+0x8>
	{
		return (v1 - v2);
  86:	86 1b       	sub	r24, r22
  88:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  8a:	68 1b       	sub	r22, r24
  8c:	86 2f       	mov	r24, r22
	}
}
  8e:	08 95       	ret

00000090 <main>:

int main()
{
  90:	2f 92       	push	r2
  92:	3f 92       	push	r3
  94:	4f 92       	push	r4
  96:	5f 92       	push	r5
  98:	6f 92       	push	r6
  9a:	7f 92       	push	r7
  9c:	8f 92       	push	r8
  9e:	9f 92       	push	r9
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	60 97       	sbiw	r28, 0x10	; 16
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	sensor_id = 0;
  c4:	10 92 77 01 	sts	0x0177, r1
	long time_count;
	long rpm_x10, last_rpm_x10 = 0;

	uchar i;
	char animation[4], anim_counter = 0;
	animation[0] = 0xD9;
  c8:	89 ed       	ldi	r24, 0xD9	; 217
  ca:	89 83       	std	Y+1, r24	; 0x01
	animation[1] = 0xC9;
  cc:	89 ec       	ldi	r24, 0xC9	; 201
  ce:	8a 83       	std	Y+2, r24	; 0x02
	animation[2] = 0xDA;
  d0:	8a ed       	ldi	r24, 0xDA	; 218
  d2:	8b 83       	std	Y+3, r24	; 0x03
	animation[3] = 0xC8;
  d4:	88 ec       	ldi	r24, 0xC8	; 200
  d6:	8c 83       	std	Y+4, r24	; 0x04

	setup_timers();
  d8:	af d1       	rcall	.+862    	; 0x438 <setup_timers>

	setup_io();
  da:	be d1       	rcall	.+892    	; 0x458 <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
  dc:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
  de:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
  e0:	a4 d2       	rcall	.+1352   	; 0x62a <lcd_ini_sequence>
	LED_ON
  e2:	57 9a       	sbi	0x0a, 7	; 10
  e4:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
  e6:	3c 9a       	sbi	0x07, 4	; 7
  e8:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
  ea:	55 9a       	sbi	0x0a, 5	; 10
	sei();
  ec:	78 94       	sei
	format(line1, line2);
  ee:	84 e3       	ldi	r24, 0x34	; 52
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	66 e4       	ldi	r22, 0x46	; 70
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	d2 d2       	rcall	.+1444   	; 0x69c <format>

	gl_set[0].rpm_avg = 0;
  f8:	10 92 03 01 	sts	0x0103, r1
  fc:	10 92 04 01 	sts	0x0104, r1
 100:	10 92 05 01 	sts	0x0105, r1
 104:	10 92 06 01 	sts	0x0106, r1
	gl_set[0].ain_th_low = 20;
 108:	94 e1       	ldi	r25, 0x14	; 20
 10a:	90 93 33 01 	sts	0x0133, r25
	gl_set[0].ain_th_high = 45;
 10e:	8d e2       	ldi	r24, 0x2D	; 45
 110:	80 93 34 01 	sts	0x0134, r24

	gl_set[1].rpm_avg = 0;
 114:	10 92 3a 01 	sts	0x013A, r1
 118:	10 92 3b 01 	sts	0x013B, r1
 11c:	10 92 3c 01 	sts	0x013C, r1
 120:	10 92 3d 01 	sts	0x013D, r1
	gl_set[1].ain_th_low = 20;
 124:	90 93 6a 01 	sts	0x016A, r25
	gl_set[1].ain_th_high = 45;
 128:	80 93 6b 01 	sts	0x016B, r24

	LED_OFF;
 12c:	5f 98       	cbi	0x0b, 7	; 11
	ADMUX = 2 + sensor_id;
 12e:	80 91 77 01 	lds	r24, 0x0177
 132:	8e 5f       	subi	r24, 0xFE	; 254
 134:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 138:	8d ee       	ldi	r24, 0xED	; 237
 13a:	80 93 7a 00 	sts	0x007A, r24
	SENSOR_ON;
 13e:	39 9a       	sbi	0x07, 1	; 7
 140:	41 9a       	sbi	0x08, 1	; 8
	LED_ON;
 142:	57 9a       	sbi	0x0a, 7	; 10
 144:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_CONTRAST = 0;
 146:	18 bc       	out	0x28, r1	; 40
 148:	1d 86       	std	Y+13, r1	; 0x0d
 14a:	1e 86       	std	Y+14, r1	; 0x0e
 14c:	1f 86       	std	Y+15, r1	; 0x0f
 14e:	18 8a       	std	Y+16, r1	; 0x10
 150:	33 24       	eor	r3, r3
 152:	19 86       	std	Y+9, r1	; 0x09
 154:	1a 86       	std	Y+10, r1	; 0x0a
 156:	1b 86       	std	Y+11, r1	; 0x0b
 158:	1c 86       	std	Y+12, r1	; 0x0c
 15a:	1d 82       	std	Y+5, r1	; 0x05
 15c:	1e 82       	std	Y+6, r1	; 0x06
 15e:	1f 82       	std	Y+7, r1	; 0x07
 160:	18 86       	std	Y+8, r1	; 0x08
				locate(79);
				lcd_send_4b_mode((uchar)'_');
			} 
			else
			{
				sensor_id = 1;
 162:	22 24       	eor	r2, r2
 164:	23 94       	inc	r2
	long int time_with_current_sensor_id = 0;
	long int time_count_prev = 0;

	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
 166:	80 91 73 01 	lds	r24, 0x0173
 16a:	90 91 74 01 	lds	r25, 0x0174
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	3c 01       	movw	r6, r24
 174:	55 24       	eor	r5, r5
 176:	44 24       	eor	r4, r4
 178:	80 91 75 01 	lds	r24, 0x0175
 17c:	90 91 76 01 	lds	r25, 0x0176
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	48 0e       	add	r4, r24
 186:	59 1e       	adc	r5, r25
 188:	6a 1e       	adc	r6, r26
 18a:	7b 1e       	adc	r7, r27
		rpm_x10 = 187500000 / time_count;
 18c:	60 ee       	ldi	r22, 0xE0	; 224
 18e:	75 e0       	ldi	r23, 0x05	; 5
 190:	8d e2       	ldi	r24, 0x2D	; 45
 192:	9b e0       	ldi	r25, 0x0B	; 11
 194:	a3 01       	movw	r20, r6
 196:	92 01       	movw	r18, r4
 198:	71 d3       	rcall	.+1762   	; 0x87c <__divmodsi4>
 19a:	59 01       	movw	r10, r18
 19c:	6a 01       	movw	r12, r20
		if (last_rpm_x10 == 0)
 19e:	ed 84       	ldd	r14, Y+13	; 0x0d
 1a0:	fe 84       	ldd	r15, Y+14	; 0x0e
 1a2:	0f 85       	ldd	r16, Y+15	; 0x0f
 1a4:	18 89       	ldd	r17, Y+16	; 0x10
 1a6:	e1 14       	cp	r14, r1
 1a8:	f1 04       	cpc	r15, r1
 1aa:	01 05       	cpc	r16, r1
 1ac:	11 05       	cpc	r17, r1
 1ae:	09 f5       	brne	.+66     	; 0x1f2 <main+0x162>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_his[i] = 0;
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	80 91 77 01 	lds	r24, 0x0177
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	8c 01       	movw	r16, r24
 1ca:	47 e3       	ldi	r20, 0x37	; 55
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	04 9f       	mul	r16, r20
 1d0:	c0 01       	movw	r24, r0
 1d2:	05 9f       	mul	r16, r21
 1d4:	90 0d       	add	r25, r0
 1d6:	14 9f       	mul	r17, r20
 1d8:	90 0d       	add	r25, r0
 1da:	11 24       	eor	r1, r1
 1dc:	e8 0f       	add	r30, r24
 1de:	f9 1f       	adc	r31, r25
 1e0:	ed 5f       	subi	r30, 0xFD	; 253
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	10 82       	st	Z, r1
 1e6:	11 82       	std	Z+1, r1	; 0x01
 1e8:	12 82       	std	Z+2, r1	; 0x02
 1ea:	13 82       	std	Z+3, r1	; 0x03
	{
		time_count = t_capture + (t_postscale * 65536);
		rpm_x10 = 187500000 / time_count;
		if (last_rpm_x10 == 0)
		{
			for (i = 0; i < MAX_NUM_MEAS; i++)
 1ec:	2a 30       	cpi	r18, 0x0A	; 10
 1ee:	31 05       	cpc	r19, r1
 1f0:	09 f7       	brne	.-62     	; 0x1b4 <main+0x124>
			{
				gl_set[sensor_id].rpm_his[i] = 0;
			}
		}
		if (rpm_x10 > 40000)
 1f2:	51 e4       	ldi	r21, 0x41	; 65
 1f4:	a5 16       	cp	r10, r21
 1f6:	5c e9       	ldi	r21, 0x9C	; 156
 1f8:	b5 06       	cpc	r11, r21
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	c5 06       	cpc	r12, r21
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	d5 06       	cpc	r13, r21
 202:	0c f0       	brlt	.+2      	; 0x206 <main+0x176>
 204:	a7 c0       	rjmp	.+334    	; 0x354 <__stack+0x55>
			rpm_x10 = last_rpm_x10;
		if (last_rpm_x10 != rpm_x10)
 206:	6d 85       	ldd	r22, Y+13	; 0x0d
 208:	7e 85       	ldd	r23, Y+14	; 0x0e
 20a:	8f 85       	ldd	r24, Y+15	; 0x0f
 20c:	98 89       	ldd	r25, Y+16	; 0x10
 20e:	6a 15       	cp	r22, r10
 210:	7b 05       	cpc	r23, r11
 212:	8c 05       	cpc	r24, r12
 214:	9d 05       	cpc	r25, r13
 216:	09 f4       	brne	.+2      	; 0x21a <main+0x18a>
 218:	9d c0       	rjmp	.+314    	; 0x354 <__stack+0x55>
		{
			last_rpm_x10 = rpm_x10;

			if(sensor_id == 0) {locate(14);} else {locate(78);}
 21a:	80 91 77 01 	lds	r24, 0x0177
 21e:	88 23       	and	r24, r24
 220:	11 f4       	brne	.+4      	; 0x226 <main+0x196>
 222:	8e e0       	ldi	r24, 0x0E	; 14
 224:	01 c0       	rjmp	.+2      	; 0x228 <main+0x198>
 226:	8e e4       	ldi	r24, 0x4E	; 78
 228:	12 d2       	rcall	.+1060   	; 0x64e <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)anim_counter]);
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	e3 0d       	add	r30, r3
 234:	f1 1d       	adc	r31, r1
 236:	80 81       	ld	r24, Z
 238:	c0 d1       	rcall	.+896    	; 0x5ba <lcd_send_4b_mode>
			anim_counter++;
 23a:	33 94       	inc	r3
			if (anim_counter > 3)
 23c:	73 e0       	ldi	r23, 0x03	; 3
 23e:	73 15       	cp	r23, r3
 240:	08 f4       	brcc	.+2      	; 0x244 <main+0x1b4>
 242:	33 24       	eor	r3, r3
				anim_counter = 0;
			if (n_measures < MAX_NUM_MEAS)
 244:	80 91 01 01 	lds	r24, 0x0101
 248:	8a 30       	cpi	r24, 0x0A	; 10
 24a:	18 f4       	brcc	.+6      	; 0x252 <main+0x1c2>
				n_measures++;
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 01 01 	sts	0x0101, r24
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
 256:	80 91 77 01 	lds	r24, 0x0177
 25a:	90 e0       	ldi	r25, 0x00	; 0
		return (v2 - v1);
	}
}

int main()
{
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
				anim_counter = 0;
			if (n_measures < MAX_NUM_MEAS)
				n_measures++;
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
 260:	9a 01       	movw	r18, r20
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	a7 e3       	ldi	r26, 0x37	; 55
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	8a 9f       	mul	r24, r26
 270:	b0 01       	movw	r22, r0
 272:	8b 9f       	mul	r24, r27
 274:	70 0d       	add	r23, r0
 276:	9a 9f       	mul	r25, r26
 278:	70 0d       	add	r23, r0
 27a:	11 24       	eor	r1, r1
 27c:	26 0f       	add	r18, r22
 27e:	37 1f       	adc	r19, r23
 280:	2d 5f       	subi	r18, 0xFD	; 253
 282:	3e 4f       	sbci	r19, 0xFE	; 254
 284:	fa 01       	movw	r30, r20
 286:	31 96       	adiw	r30, 0x01	; 1
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	e6 0f       	add	r30, r22
 292:	f7 1f       	adc	r31, r23
 294:	ed 5f       	subi	r30, 0xFD	; 253
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	80 81       	ld	r24, Z
 29a:	91 81       	ldd	r25, Z+1	; 0x01
 29c:	a2 81       	ldd	r26, Z+2	; 0x02
 29e:	b3 81       	ldd	r27, Z+3	; 0x03
 2a0:	f9 01       	movw	r30, r18
 2a2:	80 83       	st	Z, r24
 2a4:	91 83       	std	Z+1, r25	; 0x01
 2a6:	a2 83       	std	Z+2, r26	; 0x02
 2a8:	b3 83       	std	Z+3, r27	; 0x03
			anim_counter++;
			if (anim_counter > 3)
				anim_counter = 0;
			if (n_measures < MAX_NUM_MEAS)
				n_measures++;
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
 2aa:	49 30       	cpi	r20, 0x09	; 9
 2ac:	51 05       	cpc	r21, r1
 2ae:	99 f6       	brne	.-90     	; 0x256 <main+0x1c6>
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[MAX_NUM_MEAS - 1] = rpm_x10;
 2b0:	fb 01       	movw	r30, r22
 2b2:	ed 5f       	subi	r30, 0xFD	; 253
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	a0 a6       	std	Z+40, r10	; 0x28
 2b8:	b1 a6       	std	Z+41, r11	; 0x29
 2ba:	c2 a6       	std	Z+42, r12	; 0x2a
 2bc:	d3 a6       	std	Z+43, r13	; 0x2b

			gl_set[sensor_id].rpm_avg = 0;
 2be:	10 82       	st	Z, r1
 2c0:	11 82       	std	Z+1, r1	; 0x01
 2c2:	12 82       	std	Z+2, r1	; 0x02
 2c4:	13 82       	std	Z+3, r1	; 0x03
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
 2ca:	80 91 77 01 	lds	r24, 0x0177
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	7c 01       	movw	r14, r24
 2d2:	07 e3       	ldi	r16, 0x37	; 55
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	e0 9e       	mul	r14, r16
 2d8:	c0 01       	movw	r24, r0
 2da:	e1 9e       	mul	r14, r17
 2dc:	90 0d       	add	r25, r0
 2de:	f0 9e       	mul	r15, r16
 2e0:	90 0d       	add	r25, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	53 e0       	ldi	r21, 0x03	; 3
 2e6:	85 2e       	mov	r8, r21
 2e8:	51 e0       	ldi	r21, 0x01	; 1
 2ea:	95 2e       	mov	r9, r21
 2ec:	88 0e       	add	r8, r24
 2ee:	99 1e       	adc	r9, r25
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	f9 01       	movw	r30, r18
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	e8 0f       	add	r30, r24
 300:	f9 1f       	adc	r31, r25
 302:	ed 5f       	subi	r30, 0xFD	; 253
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	e0 80       	ld	r14, Z
 308:	f1 80       	ldd	r15, Z+1	; 0x01
 30a:	02 81       	ldd	r16, Z+2	; 0x02
 30c:	13 81       	ldd	r17, Z+3	; 0x03
 30e:	f4 01       	movw	r30, r8
 310:	80 81       	ld	r24, Z
 312:	91 81       	ldd	r25, Z+1	; 0x01
 314:	a2 81       	ldd	r26, Z+2	; 0x02
 316:	b3 81       	ldd	r27, Z+3	; 0x03
 318:	e8 0e       	add	r14, r24
 31a:	f9 1e       	adc	r15, r25
 31c:	0a 1f       	adc	r16, r26
 31e:	1b 1f       	adc	r17, r27
 320:	d4 01       	movw	r26, r8
 322:	ed 92       	st	X+, r14
 324:	fd 92       	st	X+, r15
 326:	0d 93       	st	X+, r16
 328:	1c 93       	st	X, r17
 32a:	13 97       	sbiw	r26, 0x03	; 3
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[MAX_NUM_MEAS - 1] = rpm_x10;

			gl_set[sensor_id].rpm_avg = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
 32c:	2a 30       	cpi	r18, 0x0A	; 10
 32e:	31 05       	cpc	r19, r1
 330:	61 f6       	brne	.-104    	; 0x2ca <main+0x23a>
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
			}
			gl_set[sensor_id].rpm_avg = gl_set[sensor_id].rpm_avg / n_measures;
 332:	20 91 01 01 	lds	r18, 0x0101
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	c8 01       	movw	r24, r16
 33e:	b7 01       	movw	r22, r14
 340:	9d d2       	rcall	.+1338   	; 0x87c <__divmodsi4>
 342:	f4 01       	movw	r30, r8
 344:	20 83       	st	Z, r18
 346:	31 83       	std	Z+1, r19	; 0x01
 348:	42 83       	std	Z+2, r20	; 0x02
 34a:	53 83       	std	Z+3, r21	; 0x03
 34c:	ad 86       	std	Y+13, r10	; 0x0d
 34e:	be 86       	std	Y+14, r11	; 0x0e
 350:	cf 86       	std	Y+15, r12	; 0x0f
 352:	d8 8a       	std	Y+16, r13	; 0x10
 354:	89 85       	ldd	r24, Y+9	; 0x09
 356:	9a 85       	ldd	r25, Y+10	; 0x0a
 358:	ab 85       	ldd	r26, Y+11	; 0x0b
 35a:	bc 85       	ldd	r27, Y+12	; 0x0c
 35c:	84 0d       	add	r24, r4
 35e:	95 1d       	adc	r25, r5
 360:	a6 1d       	adc	r26, r6
 362:	b7 1d       	adc	r27, r7
		}

		if(time_count >= time_count_prev)
 364:	ed 80       	ldd	r14, Y+5	; 0x05
 366:	fe 80       	ldd	r15, Y+6	; 0x06
 368:	0f 81       	ldd	r16, Y+7	; 0x07
 36a:	18 85       	ldd	r17, Y+8	; 0x08
 36c:	4e 14       	cp	r4, r14
 36e:	5f 04       	cpc	r5, r15
 370:	60 06       	cpc	r6, r16
 372:	71 06       	cpc	r7, r17
 374:	7c f0       	brlt	.+30     	; 0x394 <__stack+0x95>
		{
			time_with_current_sensor_id += time_count - time_count_prev;
 376:	9c 01       	movw	r18, r24
 378:	ad 01       	movw	r20, r26
 37a:	2e 19       	sub	r18, r14
 37c:	3f 09       	sbc	r19, r15
 37e:	40 0b       	sbc	r20, r16
 380:	51 0b       	sbc	r21, r17
 382:	29 87       	std	Y+9, r18	; 0x09
 384:	3a 87       	std	Y+10, r19	; 0x0a
 386:	4b 87       	std	Y+11, r20	; 0x0b
 388:	5c 87       	std	Y+12, r21	; 0x0c
 38a:	4d 82       	std	Y+5, r4	; 0x05
 38c:	5e 82       	std	Y+6, r5	; 0x06
 38e:	6f 82       	std	Y+7, r6	; 0x07
 390:	78 86       	std	Y+8, r7	; 0x08
 392:	04 c0       	rjmp	.+8      	; 0x39c <__stack+0x9d>
			time_count_prev = time_count;
		}
		else
		{
			time_with_current_sensor_id += time_count;
 394:	89 87       	std	Y+9, r24	; 0x09
 396:	9a 87       	std	Y+10, r25	; 0x0a
 398:	ab 87       	std	Y+11, r26	; 0x0b
 39a:	bc 87       	std	Y+12, r27	; 0x0c
		}
		
		if(time_with_current_sensor_id > 20000000)
 39c:	49 85       	ldd	r20, Y+9	; 0x09
 39e:	5a 85       	ldd	r21, Y+10	; 0x0a
 3a0:	6b 85       	ldd	r22, Y+11	; 0x0b
 3a2:	7c 85       	ldd	r23, Y+12	; 0x0c
 3a4:	41 50       	subi	r20, 0x01	; 1
 3a6:	5d 42       	sbci	r21, 0x2D	; 45
 3a8:	61 43       	sbci	r22, 0x31	; 49
 3aa:	71 40       	sbci	r23, 0x01	; 1
 3ac:	e4 f0       	brlt	.+56     	; 0x3e6 <__stack+0xe7>
		{
			time_with_current_sensor_id = 0;
			if(sensor_id==1)
 3ae:	80 91 77 01 	lds	r24, 0x0177
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	51 f4       	brne	.+20     	; 0x3ca <__stack+0xcb>
			{
				sensor_id = 0;
 3b6:	10 92 77 01 	sts	0x0177, r1
				locate(15);
 3ba:	8f e0       	ldi	r24, 0x0F	; 15
 3bc:	48 d1       	rcall	.+656    	; 0x64e <locate>
				lcd_send_4b_mode((uchar)'1');
 3be:	81 e3       	ldi	r24, 0x31	; 49
 3c0:	fc d0       	rcall	.+504    	; 0x5ba <lcd_send_4b_mode>
				locate(79);
 3c2:	8f e4       	ldi	r24, 0x4F	; 79
 3c4:	44 d1       	rcall	.+648    	; 0x64e <locate>
				lcd_send_4b_mode((uchar)'_');
 3c6:	8f e5       	ldi	r24, 0x5F	; 95
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <__stack+0xdd>
			} 
			else
			{
				sensor_id = 1;
 3ca:	20 92 77 01 	sts	0x0177, r2
				locate(15);
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
 3d0:	3e d1       	rcall	.+636    	; 0x64e <locate>
				lcd_send_4b_mode((uchar)'_');
 3d2:	8f e5       	ldi	r24, 0x5F	; 95
 3d4:	f2 d0       	rcall	.+484    	; 0x5ba <lcd_send_4b_mode>
				locate(79);
 3d6:	8f e4       	ldi	r24, 0x4F	; 79
 3d8:	3a d1       	rcall	.+628    	; 0x64e <locate>
				lcd_send_4b_mode((uchar)'2');
 3da:	82 e3       	ldi	r24, 0x32	; 50
 3dc:	ee d0       	rcall	.+476    	; 0x5ba <lcd_send_4b_mode>
 3de:	19 86       	std	Y+9, r1	; 0x09
 3e0:	1a 86       	std	Y+10, r1	; 0x0a
 3e2:	1b 86       	std	Y+11, r1	; 0x0b
 3e4:	1c 86       	std	Y+12, r1	; 0x0c
			}
		}

		refresh_counter++;
 3e6:	80 91 71 01 	lds	r24, 0x0171
 3ea:	90 91 72 01 	lds	r25, 0x0172
 3ee:	01 96       	adiw	r24, 0x01	; 1
 3f0:	90 93 72 01 	sts	0x0172, r25
 3f4:	80 93 71 01 	sts	0x0171, r24

		if (refresh_counter > 20000)
 3f8:	81 52       	subi	r24, 0x21	; 33
 3fa:	9e 44       	sbci	r25, 0x4E	; 78
 3fc:	08 f4       	brcc	.+2      	; 0x400 <__stack+0x101>
 3fe:	b3 ce       	rjmp	.-666    	; 0x166 <main+0xd6>
		{
			refresh_counter = 0;
 400:	10 92 72 01 	sts	0x0172, r1
 404:	10 92 71 01 	sts	0x0171, r1
			lcd_send_floatx10(gl_set[0].rpm_avg, 5, 7, 1); //rpm_x10
 408:	60 91 03 01 	lds	r22, 0x0103
 40c:	70 91 04 01 	lds	r23, 0x0104
 410:	80 91 05 01 	lds	r24, 0x0105
 414:	90 91 06 01 	lds	r25, 0x0106
 418:	45 e0       	ldi	r20, 0x05	; 5
 41a:	27 e0       	ldi	r18, 0x07	; 7
 41c:	01 e0       	ldi	r16, 0x01	; 1
 41e:	69 d1       	rcall	.+722    	; 0x6f2 <lcd_send_floatx10>
			lcd_send_floatx10(gl_set[1].rpm_avg, 69, 7, 1); //rpm_x10
 420:	60 91 3a 01 	lds	r22, 0x013A
 424:	70 91 3b 01 	lds	r23, 0x013B
 428:	80 91 3c 01 	lds	r24, 0x013C
 42c:	90 91 3d 01 	lds	r25, 0x013D
 430:	45 e4       	ldi	r20, 0x45	; 69
 432:	27 e0       	ldi	r18, 0x07	; 7
 434:	5e d1       	rcall	.+700    	; 0x6f2 <lcd_send_floatx10>
 436:	97 ce       	rjmp	.-722    	; 0x166 <main+0xd6>

00000438 <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1<<COM1B1)|(1<<WGM01)|(1<<WGM00);
 438:	83 e2       	ldi	r24, 0x23	; 35
 43a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00); 
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25; 
 440:	89 e1       	ldi	r24, 0x19	; 25
 442:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0<<OCIE0A);
 444:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 448:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);
 452:	90 93 6f 00 	sts	0x006F, r25


}
 456:	08 95       	ret

00000458 <setup_io>:


void setup_io()
{
	DIDR0 = (1<<ADC2D) | (1<<ADC3D); //disable digital input on ADC2 and ADC3
 458:	8c e0       	ldi	r24, 0x0C	; 12
 45a:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1<<PORTB1); //set push button as input
 45e:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); //activte the pull up resistor for the push button
 460:	29 9a       	sbi	0x05, 1	; 5
	
	LCD_EN_PORT |= _BV(LCD_EN);
 462:	45 9a       	sbi	0x08, 5	; 8
  LCD_RS_PORT &= ~(_BV(LCD_RS));	
 464:	5c 98       	cbi	0x0b, 4	; 11
}
 466:	08 95       	ret

00000468 <__vector_13>:
}



ISR(TIMER1_OVF_vect)
{
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	8f 93       	push	r24
	//LED_ON;
	post_scaller++;
 474:	80 91 02 01 	lds	r24, 0x0102
 478:	8f 5f       	subi	r24, 0xFF	; 255
 47a:	80 93 02 01 	sts	0x0102, r24
}
 47e:	8f 91       	pop	r24
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	af 93       	push	r26
 4a6:	bf 93       	push	r27
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value 
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC>>2;			
 4b0:	80 91 77 01 	lds	r24, 0x0177
 4b4:	48 2f       	mov	r20, r24
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	20 91 78 00 	lds	r18, 0x0078
 4bc:	30 91 79 00 	lds	r19, 0x0079
 4c0:	36 95       	lsr	r19
 4c2:	27 95       	ror	r18
 4c4:	36 95       	lsr	r19
 4c6:	27 95       	ror	r18
 4c8:	87 e3       	ldi	r24, 0x37	; 55
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	48 9f       	mul	r20, r24
 4ce:	f0 01       	movw	r30, r0
 4d0:	49 9f       	mul	r20, r25
 4d2:	f0 0d       	add	r31, r0
 4d4:	58 9f       	mul	r21, r24
 4d6:	f0 0d       	add	r31, r0
 4d8:	11 24       	eor	r1, r1
 4da:	ed 5f       	subi	r30, 0xFD	; 253
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	22 ab       	std	Z+50, r18	; 0x32
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state==0)) //a cycle is detected 
 4e0:	81 a9       	ldd	r24, Z+49	; 0x31
 4e2:	82 17       	cp	r24, r18
 4e4:	c8 f4       	brcc	.+50     	; 0x518 <__vector_21+0x8e>
 4e6:	83 a9       	ldd	r24, Z+51	; 0x33
 4e8:	88 23       	and	r24, r24
 4ea:	b1 f4       	brne	.+44     	; 0x518 <__vector_21+0x8e>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	83 ab       	std	Z+51, r24	; 0x33
		t_capture=TCNT1;TCNT1 = 0;
 4f0:	80 91 84 00 	lds	r24, 0x0084
 4f4:	90 91 85 00 	lds	r25, 0x0085
 4f8:	90 93 76 01 	sts	0x0176, r25
 4fc:	80 93 75 01 	sts	0x0175, r24
 500:	10 92 85 00 	sts	0x0085, r1
 504:	10 92 84 00 	sts	0x0084, r1
		t_postscale=post_scaller; post_scaller=0;
 508:	80 91 02 01 	lds	r24, 0x0102
 50c:	80 93 73 01 	sts	0x0173, r24
 510:	10 92 74 01 	sts	0x0174, r1
 514:	10 92 02 01 	sts	0x0102, r1
	}

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state==1)) //a low level is detected
 518:	87 e3       	ldi	r24, 0x37	; 55
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	48 9f       	mul	r20, r24
 51e:	f0 01       	movw	r30, r0
 520:	49 9f       	mul	r20, r25
 522:	f0 0d       	add	r31, r0
 524:	58 9f       	mul	r21, r24
 526:	f0 0d       	add	r31, r0
 528:	11 24       	eor	r1, r1
 52a:	ed 5f       	subi	r30, 0xFD	; 253
 52c:	fe 4f       	sbci	r31, 0xFE	; 254
 52e:	92 a9       	ldd	r25, Z+50	; 0x32
 530:	80 a9       	ldd	r24, Z+48	; 0x30
 532:	98 17       	cp	r25, r24
 534:	20 f4       	brcc	.+8      	; 0x53e <__vector_21+0xb4>
 536:	83 a9       	ldd	r24, Z+51	; 0x33
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	09 f4       	brne	.+2      	; 0x53e <__vector_21+0xb4>
	{
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
 53c:	13 aa       	std	Z+51, r1	; 0x33
	}

	if (delta(gl_set[sensor_id].ir_history_a,gl_set[sensor_id].ir_value) > 10)
 53e:	c7 e3       	ldi	r28, 0x37	; 55
 540:	d0 e0       	ldi	r29, 0x00	; 0
 542:	4c 9f       	mul	r20, r28
 544:	f0 01       	movw	r30, r0
 546:	4d 9f       	mul	r20, r29
 548:	f0 0d       	add	r31, r0
 54a:	5c 9f       	mul	r21, r28
 54c:	f0 0d       	add	r31, r0
 54e:	11 24       	eor	r1, r1
 550:	ed 5f       	subi	r30, 0xFD	; 253
 552:	fe 4f       	sbci	r31, 0xFE	; 254
 554:	84 a9       	ldd	r24, Z+52	; 0x34
 556:	62 a9       	ldd	r22, Z+50	; 0x32
 558:	94 dd       	rcall	.-1240   	; 0x82 <delta>
 55a:	8b 30       	cpi	r24, 0x0B	; 11
 55c:	d8 f0       	brcs	.+54     	; 0x594 <__vector_21+0x10a>
	{
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
 55e:	80 91 77 01 	lds	r24, 0x0177
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	8c 9f       	mul	r24, r28
 566:	f0 01       	movw	r30, r0
 568:	8d 9f       	mul	r24, r29
 56a:	f0 0d       	add	r31, r0
 56c:	9c 9f       	mul	r25, r28
 56e:	f0 0d       	add	r31, r0
 570:	11 24       	eor	r1, r1
 572:	ed 5f       	subi	r30, 0xFD	; 253
 574:	fe 4f       	sbci	r31, 0xFE	; 254
 576:	24 a9       	ldd	r18, Z+52	; 0x34
 578:	25 ab       	std	Z+53, r18	; 0x35
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 57a:	82 a9       	ldd	r24, Z+50	; 0x32
 57c:	84 ab       	std	Z+52, r24	; 0x34
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a+gl_set[sensor_id].ir_history_b)/2;
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	82 0f       	add	r24, r18
 582:	91 1d       	adc	r25, r1
 584:	95 95       	asr	r25
 586:	87 95       	ror	r24
 588:	28 2f       	mov	r18, r24
 58a:	86 ab       	std	Z+54, r24	; 0x36
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 58c:	2b 5f       	subi	r18, 0xFB	; 251
 58e:	21 ab       	std	Z+49, r18	; 0x31
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 590:	2a 50       	subi	r18, 0x0A	; 10
 592:	20 ab       	std	Z+48, r18	; 0x30
	}
}
 594:	ff 91       	pop	r31
 596:	ef 91       	pop	r30
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	bf 91       	pop	r27
 59e:	af 91       	pop	r26
 5a0:	9f 91       	pop	r25
 5a2:	8f 91       	pop	r24
 5a4:	7f 91       	pop	r23
 5a6:	6f 91       	pop	r22
 5a8:	5f 91       	pop	r21
 5aa:	4f 91       	pop	r20
 5ac:	3f 91       	pop	r19
 5ae:	2f 91       	pop	r18
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <lcd_send_4b_mode>:



void lcd_send_4b_mode(unsigned char data){
	
  LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 5ba:	9a b1       	in	r25, 0x0a	; 10
 5bc:	9f 60       	ori	r25, 0x0F	; 15
 5be:	9a b9       	out	0x0a, r25	; 10
	
	LCD_EN_PORT |= _BV(LCD_EN);
 5c0:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5c2:	48 e8       	ldi	r20, 0x88	; 136
 5c4:	53 e1       	ldi	r21, 0x13	; 19
 5c6:	fa 01       	movw	r30, r20
 5c8:	31 97       	sbiw	r30, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <lcd_send_4b_mode+0xe>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5cc:	9b b1       	in	r25, 0x0b	; 11
 5ce:	90 7f       	andi	r25, 0xF0	; 240
 5d0:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data>>4)<<LCD_SHIFT)&LCD_MASK;
 5d2:	2b b1       	in	r18, 0x0b	; 11
 5d4:	98 2f       	mov	r25, r24
 5d6:	92 95       	swap	r25
 5d8:	9f 70       	andi	r25, 0x0F	; 15
 5da:	92 2b       	or	r25, r18
 5dc:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5de:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 5e0:	45 9a       	sbi	0x08, 5	; 8
 5e2:	fa 01       	movw	r30, r20
 5e4:	31 97       	sbiw	r30, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <lcd_send_4b_mode+0x2a>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5e8:	9b b1       	in	r25, 0x0b	; 11
 5ea:	90 7f       	andi	r25, 0xF0	; 240
 5ec:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data&LCD_MASK)<<LCD_SHIFT);
 5ee:	9b b1       	in	r25, 0x0b	; 11
 5f0:	8f 70       	andi	r24, 0x0F	; 15
 5f2:	98 2b       	or	r25, r24
 5f4:	9b b9       	out	0x0b, r25	; 11


	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5f6:	45 98       	cbi	0x08, 5	; 8
 5f8:	ca 01       	movw	r24, r20
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <lcd_send_4b_mode+0x40>
	_delay_ms (1);
} 
 5fe:	08 95       	ret

00000600 <cls>:
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
		cls();
}
void cls(){     // clear the display
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 600:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(0x01);   
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	da df       	rcall	.-76     	; 0x5ba <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 606:	5c 9a       	sbi	0x0b, 4	; 11
}
 608:	08 95       	ret

0000060a <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}


void ini_lcd_4_bit_mode(){
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	c8 e5       	ldi	r28, 0x58	; 88
 610:	d0 e0       	ldi	r29, 0x00	; 0
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 612:	fe 01       	movw	r30, r28
 614:	84 91       	lpm	r24, Z+
 616:	d1 df       	rcall	.-94     	; 0x5ba <lcd_send_4b_mode>
 618:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode(){
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	c0 36       	cpi	r28, 0x60	; 96
 61e:	df 07       	cpc	r29, r31
 620:	c1 f7       	brne	.-16     	; 0x612 <ini_lcd_4_bit_mode+0x8>
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
   }
   LCD_RS_PORT |= _BV(LCD_RS);
 622:	5c 9a       	sbi	0x0b, 4	; 11
}
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms (1);
} 

void lcd_ini_sequence()
{
 62a:	84 ec       	ldi	r24, 0xC4	; 196
 62c:	99 e0       	ldi	r25, 0x09	; 9
 62e:	24 ef       	ldi	r18, 0xF4	; 244
 630:	31 e0       	ldi	r19, 0x01	; 1
 632:	f9 01       	movw	r30, r18
 634:	31 97       	sbiw	r30, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 638:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 63a:	d9 f7       	brne	.-10     	; 0x632 <lcd_ini_sequence+0x8>
		
		_delay_ms(250); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 63c:	e6 df       	rcall	.-52     	; 0x60a <ini_lcd_4_bit_mode>
		cls();
 63e:	e0 df       	rcall	.-64     	; 0x600 <cls>
 640:	80 e5       	ldi	r24, 0x50	; 80
 642:	93 ec       	ldi	r25, 0xC3	; 195
 644:	01 97       	sbiw	r24, 0x01	; 1
 646:	f1 f7       	brne	.-4      	; 0x644 <lcd_ini_sequence+0x1a>
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 648:	e0 df       	rcall	.-64     	; 0x60a <ini_lcd_4_bit_mode>
		cls();
 64a:	da df       	rcall	.-76     	; 0x600 <cls>
}
 64c:	08 95       	ret

0000064e <locate>:
   LCD_RS_PORT |= _BV(LCD_RS);
}

void locate(unsigned char pos){
   pos = pos | (1 << 7);
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 64e:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(pos);   
 650:	80 68       	ori	r24, 0x80	; 128
 652:	b3 df       	rcall	.-154    	; 0x5ba <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 654:	5c 9a       	sbi	0x0b, 4	; 11
}
 656:	08 95       	ret

00000658 <put_str>:
	{
		lcd_send_4b_mode(' ');  
	}
}

void put_str(uchar pos, char* str){     
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 662:	f5 df       	rcall	.-22     	; 0x64e <locate>
 664:	c0 e0       	ldi	r28, 0x00	; 0
 666:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i< 16; i++){				
		lcd_send_4b_mode(pgm_read_byte(str + i));
 668:	f8 01       	movw	r30, r16
 66a:	ec 0f       	add	r30, r28
 66c:	fd 1f       	adc	r31, r29
 66e:	e4 91       	lpm	r30, Z+
 670:	8e 2f       	mov	r24, r30
 672:	a3 df       	rcall	.-186    	; 0x5ba <lcd_send_4b_mode>
 674:	21 96       	adiw	r28, 0x01	; 1
}

void put_str(uchar pos, char* str){     
	uchar i;
	locate(pos);
	for (i = 0; i< 16; i++){				
 676:	c0 31       	cpi	r28, 0x10	; 16
 678:	d1 05       	cpc	r29, r1
 67a:	b1 f7       	brne	.-20     	; 0x668 <put_str+0x10>
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 67c:	df 91       	pop	r29
 67e:	cf 91       	pop	r28
 680:	1f 91       	pop	r17
 682:	0f 91       	pop	r16
 684:	08 95       	ret

00000686 <clr_line>:
   LCD_RS_PORT &= ~(_BV(LCD_RS));
   lcd_send_4b_mode(0x01);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add){     // clear line
 686:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 688:	e2 df       	rcall	.-60     	; 0x64e <locate>
 68a:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<16; i++)
	{
		lcd_send_4b_mode(' ');  
 68c:	80 e2       	ldi	r24, 0x20	; 32
 68e:	95 df       	rcall	.-214    	; 0x5ba <lcd_send_4b_mode>
}

void clr_line(uchar start_add){     // clear line
	uchar i;
	locate(start_add);
	for (i=0; i<16; i++)
 690:	1f 5f       	subi	r17, 0xFF	; 255
 692:	10 31       	cpi	r17, 0x10	; 16
 694:	d9 f7       	brne	.-10     	; 0x68c <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');  
	}
}
 696:	1f 91       	pop	r17
 698:	08 95       	ret

0000069a <lcd_contrast>:
void lcd_contrast()
{


	
}
 69a:	08 95       	ret

0000069c <format>:

void format(char* line1,char* line2){     // reformat the display
 69c:	ef 92       	push	r14
 69e:	ff 92       	push	r15
 6a0:	0f 93       	push	r16
 6a2:	1f 93       	push	r17
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	8c 01       	movw	r16, r24
 6aa:	7b 01       	movw	r14, r22
    unsigned char i;
		locate(0);
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	cf df       	rcall	.-98     	; 0x64e <locate>
 6b0:	c0 e0       	ldi	r28, 0x00	; 0
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
 6b4:	f8 01       	movw	r30, r16
 6b6:	ec 0f       	add	r30, r28
 6b8:	fd 1f       	adc	r31, r29
 6ba:	e4 91       	lpm	r30, Z+
 6bc:	8e 2f       	mov	r24, r30
 6be:	7d df       	rcall	.-262    	; 0x5ba <lcd_send_4b_mode>
 6c0:	21 96       	adiw	r28, 0x01	; 1
}

void format(char* line1,char* line2){     // reformat the display
    unsigned char i;
		locate(0);
		for (i = 0; i< 16; i++){				
 6c2:	c0 31       	cpi	r28, 0x10	; 16
 6c4:	d1 05       	cpc	r29, r1
 6c6:	b1 f7       	brne	.-20     	; 0x6b4 <format+0x18>
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
 6c8:	80 e4       	ldi	r24, 0x40	; 64
 6ca:	c1 df       	rcall	.-126    	; 0x64e <locate>
 6cc:	c0 e0       	ldi	r28, 0x00	; 0
 6ce:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
 6d0:	f7 01       	movw	r30, r14
 6d2:	ec 0f       	add	r30, r28
 6d4:	fd 1f       	adc	r31, r29
 6d6:	e4 91       	lpm	r30, Z+
 6d8:	8e 2f       	mov	r24, r30
 6da:	6f df       	rcall	.-290    	; 0x5ba <lcd_send_4b_mode>
 6dc:	21 96       	adiw	r28, 0x01	; 1
		locate(0);
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
		for (i = 0; i< 16; i++){
 6de:	c0 31       	cpi	r28, 0x10	; 16
 6e0:	d1 05       	cpc	r29, r1
 6e2:	b1 f7       	brne	.-20     	; 0x6d0 <format+0x34>
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
		}
}
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	08 95       	ret

000006f2 <lcd_send_floatx10>:
   lcd_send_4b_mode(pos);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data,uchar location, uchar len, uchar d_len)
{
 6f2:	af 92       	push	r10
 6f4:	bf 92       	push	r11
 6f6:	cf 92       	push	r12
 6f8:	df 92       	push	r13
 6fa:	ef 92       	push	r14
 6fc:	ff 92       	push	r15
 6fe:	0f 93       	push	r16
 700:	1f 93       	push	r17
 702:	df 93       	push	r29
 704:	cf 93       	push	r28
 706:	cd b7       	in	r28, 0x3d	; 61
 708:	de b7       	in	r29, 0x3e	; 62
 70a:	60 97       	sbiw	r28, 0x10	; 16
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	f8 94       	cli
 710:	de bf       	out	0x3e, r29	; 62
 712:	0f be       	out	0x3f, r0	; 63
 714:	cd bf       	out	0x3d, r28	; 61
 716:	6b 01       	movw	r12, r22
 718:	7c 01       	movw	r14, r24
 71a:	14 2f       	mov	r17, r20
 71c:	a2 2e       	mov	r10, r18
 71e:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];
	
	uchar i,y,temp,int_len;
	t=0;
 720:	10 92 00 01 	sts	0x0100, r1

	if (data < 0)
 724:	97 ff       	sbrs	r25, 7
 726:	03 c0       	rjmp	.+6      	; 0x72e <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 728:	8e e4       	ldi	r24, 0x4E	; 78
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	06 c0       	rjmp	.+12     	; 0x73a <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 72e:	ae 01       	movw	r20, r28
 730:	4f 5f       	subi	r20, 0xFF	; 255
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	2a e0       	ldi	r18, 0x0A	; 10
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	de d0       	rcall	.+444    	; 0x8f6 <ltoa>
	}

	locate(location);
 73a:	81 2f       	mov	r24, r17
 73c:	88 df       	rcall	.-240    	; 0x64e <locate>

	i=0;
	if (d_len == 2)
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	b8 16       	cp	r11, r24
 742:	11 f0       	breq	.+4      	; 0x748 <lcd_send_floatx10+0x56>
 744:	8a e0       	ldi	r24, 0x0A	; 10
 746:	01 c0       	rjmp	.+2      	; 0x74a <lcd_send_floatx10+0x58>
 748:	84 e6       	ldi	r24, 0x64	; 100
		temp = 100;
	}else{
		temp = 10;	
	}

	if( data >= temp){
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	a0 e0       	ldi	r26, 0x00	; 0
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	c8 16       	cp	r12, r24
 752:	d9 06       	cpc	r13, r25
 754:	ea 06       	cpc	r14, r26
 756:	fb 06       	cpc	r15, r27
 758:	0c f4       	brge	.+2      	; 0x75c <lcd_send_floatx10+0x6a>
 75a:	47 c0       	rjmp	.+142    	; 0x7ea <lcd_send_floatx10+0xf8>
		if (strlen(buffer)>len)
 75c:	fe 01       	movw	r30, r28
 75e:	31 96       	adiw	r30, 0x01	; 1
 760:	df 01       	movw	r26, r30
 762:	0d 90       	ld	r0, X+
 764:	00 20       	and	r0, r0
 766:	e9 f7       	brne	.-6      	; 0x762 <lcd_send_floatx10+0x70>
 768:	11 97       	sbiw	r26, 0x01	; 1
 76a:	ae 1b       	sub	r26, r30
 76c:	bf 0b       	sbc	r27, r31
 76e:	8a 2d       	mov	r24, r10
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	8a 17       	cp	r24, r26
 774:	9b 07       	cpc	r25, r27
 776:	10 f4       	brcc	.+4      	; 0x77c <lcd_send_floatx10+0x8a>
 778:	8a 2d       	mov	r24, r10
 77a:	01 c0       	rjmp	.+2      	; 0x77e <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 77c:	8a 2f       	mov	r24, r26
 77e:	00 e0       	ldi	r16, 0x00	; 0
		}

		for(i=0; i<(int_len-d_len);i++)
 780:	e8 2e       	mov	r14, r24
 782:	ff 24       	eor	r15, r15
 784:	eb 18       	sub	r14, r11
 786:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 788:	6e 01       	movw	r12, r28
 78a:	08 94       	sec
 78c:	c1 1c       	adc	r12, r1
 78e:	d1 1c       	adc	r13, r1
 790:	0a c0       	rjmp	.+20     	; 0x7a6 <lcd_send_floatx10+0xb4>
 792:	ec 0d       	add	r30, r12
 794:	fd 1d       	adc	r31, r13
 796:	80 81       	ld	r24, Z
 798:	10 df       	rcall	.-480    	; 0x5ba <lcd_send_4b_mode>
			t++;
 79a:	80 91 00 01 	lds	r24, 0x0100
 79e:	8f 5f       	subi	r24, 0xFF	; 255
 7a0:	80 93 00 01 	sts	0x0100, r24
		else
		{
			int_len = strlen(buffer);
		}

		for(i=0; i<(int_len-d_len);i++)
 7a4:	0f 5f       	subi	r16, 0xFF	; 255
 7a6:	e0 2f       	mov	r30, r16
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	ee 15       	cp	r30, r14
 7ac:	ff 05       	cpc	r31, r15
 7ae:	8c f3       	brlt	.-30     	; 0x792 <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 7b0:	8e e2       	ldi	r24, 0x2E	; 46
 7b2:	03 df       	rcall	.-506    	; 0x5ba <lcd_send_4b_mode>
		t++;
 7b4:	80 91 00 01 	lds	r24, 0x0100
 7b8:	8f 5f       	subi	r24, 0xFF	; 255
 7ba:	80 93 00 01 	sts	0x0100, r24
 7be:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<(d_len);y++)
		{
			lcd_send_4b_mode(buffer[i]);
 7c0:	7e 01       	movw	r14, r28
 7c2:	08 94       	sec
 7c4:	e1 1c       	adc	r14, r1
 7c6:	f1 1c       	adc	r15, r1
 7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <lcd_send_floatx10+0xee>
 7ca:	f7 01       	movw	r30, r14
 7cc:	e8 0f       	add	r30, r24
 7ce:	f1 1d       	adc	r31, r1
 7d0:	80 81       	ld	r24, Z
 7d2:	f3 de       	rcall	.-538    	; 0x5ba <lcd_send_4b_mode>
			i++;	
			t++;
 7d4:	80 91 00 01 	lds	r24, 0x0100
 7d8:	8f 5f       	subi	r24, 0xFF	; 255
 7da:	80 93 00 01 	sts	0x0100, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<(d_len);y++)
 7de:	1f 5f       	subi	r17, 0xFF	; 255
 7e0:	81 2f       	mov	r24, r17
 7e2:	80 0f       	add	r24, r16
 7e4:	1b 15       	cp	r17, r11
 7e6:	88 f3       	brcs	.-30     	; 0x7ca <lcd_send_floatx10+0xd8>
 7e8:	34 c0       	rjmp	.+104    	; 0x852 <lcd_send_floatx10+0x160>
			i++;	
			t++;
		}
		
	}else{
		lcd_send_4b_mode('0');
 7ea:	80 e3       	ldi	r24, 0x30	; 48
 7ec:	e6 de       	rcall	.-564    	; 0x5ba <lcd_send_4b_mode>
		t++;
 7ee:	80 91 00 01 	lds	r24, 0x0100
 7f2:	8f 5f       	subi	r24, 0xFF	; 255
 7f4:	80 93 00 01 	sts	0x0100, r24
		lcd_send_4b_mode('.');
 7f8:	8e e2       	ldi	r24, 0x2E	; 46
 7fa:	df de       	rcall	.-578    	; 0x5ba <lcd_send_4b_mode>
		t++;
 7fc:	80 91 00 01 	lds	r24, 0x0100
 800:	8f 5f       	subi	r24, 0xFF	; 255
 802:	80 93 00 01 	sts	0x0100, r24
 806:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<d_len;y++)
		{
			if(y < strlen(buffer))
 808:	7e 01       	movw	r14, r28
 80a:	08 94       	sec
 80c:	e1 1c       	adc	r14, r1
 80e:	f1 1c       	adc	r15, r1
 810:	16 c0       	rjmp	.+44     	; 0x83e <lcd_send_floatx10+0x14c>
 812:	f7 01       	movw	r30, r14
 814:	01 90       	ld	r0, Z+
 816:	00 20       	and	r0, r0
 818:	e9 f7       	brne	.-6      	; 0x814 <lcd_send_floatx10+0x122>
 81a:	31 97       	sbiw	r30, 0x01	; 1
 81c:	ee 19       	sub	r30, r14
 81e:	ff 09       	sbc	r31, r15
 820:	a1 2f       	mov	r26, r17
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	ae 17       	cp	r26, r30
 826:	bf 07       	cpc	r27, r31
 828:	48 f4       	brcc	.+18     	; 0x83c <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);	
 82a:	ae 0d       	add	r26, r14
 82c:	bf 1d       	adc	r27, r15
 82e:	8c 91       	ld	r24, X
 830:	c4 de       	rcall	.-632    	; 0x5ba <lcd_send_4b_mode>
				i++;
				t++;
 832:	80 91 00 01 	lds	r24, 0x0100
 836:	8f 5f       	subi	r24, 0xFF	; 255
 838:	80 93 00 01 	sts	0x0100, r24
	}else{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<d_len;y++)
 83c:	1f 5f       	subi	r17, 0xFF	; 255
 83e:	1b 15       	cp	r17, r11
 840:	40 f3       	brcs	.-48     	; 0x812 <lcd_send_floatx10+0x120>
 842:	07 c0       	rjmp	.+14     	; 0x852 <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
	{
		lcd_send_4b_mode(' ');
 844:	80 e2       	ldi	r24, 0x20	; 32
 846:	b9 de       	rcall	.-654    	; 0x5ba <lcd_send_4b_mode>
		t++;
 848:	80 91 00 01 	lds	r24, 0x0100
 84c:	8f 5f       	subi	r24, 0xFF	; 255
 84e:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
 852:	80 91 00 01 	lds	r24, 0x0100
 856:	8a 15       	cp	r24, r10
 858:	a8 f3       	brcs	.-22     	; 0x844 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 85a:	60 96       	adiw	r28, 0x10	; 16
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	cf 91       	pop	r28
 868:	df 91       	pop	r29
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	cf 90       	pop	r12
 876:	bf 90       	pop	r11
 878:	af 90       	pop	r10
 87a:	08 95       	ret

0000087c <__divmodsi4>:
 87c:	97 fb       	bst	r25, 7
 87e:	09 2e       	mov	r0, r25
 880:	05 26       	eor	r0, r21
 882:	0e d0       	rcall	.+28     	; 0x8a0 <__divmodsi4_neg1>
 884:	57 fd       	sbrc	r21, 7
 886:	04 d0       	rcall	.+8      	; 0x890 <__divmodsi4_neg2>
 888:	14 d0       	rcall	.+40     	; 0x8b2 <__udivmodsi4>
 88a:	0a d0       	rcall	.+20     	; 0x8a0 <__divmodsi4_neg1>
 88c:	00 1c       	adc	r0, r0
 88e:	38 f4       	brcc	.+14     	; 0x89e <__divmodsi4_exit>

00000890 <__divmodsi4_neg2>:
 890:	50 95       	com	r21
 892:	40 95       	com	r20
 894:	30 95       	com	r19
 896:	21 95       	neg	r18
 898:	3f 4f       	sbci	r19, 0xFF	; 255
 89a:	4f 4f       	sbci	r20, 0xFF	; 255
 89c:	5f 4f       	sbci	r21, 0xFF	; 255

0000089e <__divmodsi4_exit>:
 89e:	08 95       	ret

000008a0 <__divmodsi4_neg1>:
 8a0:	f6 f7       	brtc	.-4      	; 0x89e <__divmodsi4_exit>
 8a2:	90 95       	com	r25
 8a4:	80 95       	com	r24
 8a6:	70 95       	com	r23
 8a8:	61 95       	neg	r22
 8aa:	7f 4f       	sbci	r23, 0xFF	; 255
 8ac:	8f 4f       	sbci	r24, 0xFF	; 255
 8ae:	9f 4f       	sbci	r25, 0xFF	; 255
 8b0:	08 95       	ret

000008b2 <__udivmodsi4>:
 8b2:	a1 e2       	ldi	r26, 0x21	; 33
 8b4:	1a 2e       	mov	r1, r26
 8b6:	aa 1b       	sub	r26, r26
 8b8:	bb 1b       	sub	r27, r27
 8ba:	fd 01       	movw	r30, r26
 8bc:	0d c0       	rjmp	.+26     	; 0x8d8 <__udivmodsi4_ep>

000008be <__udivmodsi4_loop>:
 8be:	aa 1f       	adc	r26, r26
 8c0:	bb 1f       	adc	r27, r27
 8c2:	ee 1f       	adc	r30, r30
 8c4:	ff 1f       	adc	r31, r31
 8c6:	a2 17       	cp	r26, r18
 8c8:	b3 07       	cpc	r27, r19
 8ca:	e4 07       	cpc	r30, r20
 8cc:	f5 07       	cpc	r31, r21
 8ce:	20 f0       	brcs	.+8      	; 0x8d8 <__udivmodsi4_ep>
 8d0:	a2 1b       	sub	r26, r18
 8d2:	b3 0b       	sbc	r27, r19
 8d4:	e4 0b       	sbc	r30, r20
 8d6:	f5 0b       	sbc	r31, r21

000008d8 <__udivmodsi4_ep>:
 8d8:	66 1f       	adc	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	88 1f       	adc	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	1a 94       	dec	r1
 8e2:	69 f7       	brne	.-38     	; 0x8be <__udivmodsi4_loop>
 8e4:	60 95       	com	r22
 8e6:	70 95       	com	r23
 8e8:	80 95       	com	r24
 8ea:	90 95       	com	r25
 8ec:	9b 01       	movw	r18, r22
 8ee:	ac 01       	movw	r20, r24
 8f0:	bd 01       	movw	r22, r26
 8f2:	cf 01       	movw	r24, r30
 8f4:	08 95       	ret

000008f6 <ltoa>:
 8f6:	fa 01       	movw	r30, r20
 8f8:	cf 93       	push	r28
 8fa:	ff 93       	push	r31
 8fc:	ef 93       	push	r30
 8fe:	22 30       	cpi	r18, 0x02	; 2
 900:	3c f1       	brlt	.+78     	; 0x950 <ltoa+0x5a>
 902:	25 32       	cpi	r18, 0x25	; 37
 904:	2c f5       	brge	.+74     	; 0x950 <ltoa+0x5a>
 906:	c2 2f       	mov	r28, r18
 908:	e8 94       	clt
 90a:	ca 30       	cpi	r28, 0x0A	; 10
 90c:	49 f4       	brne	.+18     	; 0x920 <ltoa+0x2a>
 90e:	97 fb       	bst	r25, 7
 910:	3e f4       	brtc	.+14     	; 0x920 <ltoa+0x2a>
 912:	90 95       	com	r25
 914:	80 95       	com	r24
 916:	70 95       	com	r23
 918:	61 95       	neg	r22
 91a:	7f 4f       	sbci	r23, 0xFF	; 255
 91c:	8f 4f       	sbci	r24, 0xFF	; 255
 91e:	9f 4f       	sbci	r25, 0xFF	; 255
 920:	2c 2f       	mov	r18, r28
 922:	33 27       	eor	r19, r19
 924:	44 27       	eor	r20, r20
 926:	55 27       	eor	r21, r21
 928:	ff 93       	push	r31
 92a:	ef 93       	push	r30
 92c:	c2 df       	rcall	.-124    	; 0x8b2 <__udivmodsi4>
 92e:	ef 91       	pop	r30
 930:	ff 91       	pop	r31
 932:	60 5d       	subi	r22, 0xD0	; 208
 934:	6a 33       	cpi	r22, 0x3A	; 58
 936:	0c f0       	brlt	.+2      	; 0x93a <ltoa+0x44>
 938:	69 5d       	subi	r22, 0xD9	; 217
 93a:	61 93       	st	Z+, r22
 93c:	b9 01       	movw	r22, r18
 93e:	ca 01       	movw	r24, r20
 940:	60 50       	subi	r22, 0x00	; 0
 942:	70 40       	sbci	r23, 0x00	; 0
 944:	80 40       	sbci	r24, 0x00	; 0
 946:	90 40       	sbci	r25, 0x00	; 0
 948:	59 f7       	brne	.-42     	; 0x920 <ltoa+0x2a>
 94a:	16 f4       	brtc	.+4      	; 0x950 <ltoa+0x5a>
 94c:	cd e2       	ldi	r28, 0x2D	; 45
 94e:	c1 93       	st	Z+, r28
 950:	10 82       	st	Z, r1
 952:	8f 91       	pop	r24
 954:	9f 91       	pop	r25
 956:	cf 91       	pop	r28
 958:	00 c0       	rjmp	.+0      	; 0x95a <strrev>

0000095a <strrev>:
 95a:	dc 01       	movw	r26, r24
 95c:	fc 01       	movw	r30, r24
 95e:	67 2f       	mov	r22, r23
 960:	71 91       	ld	r23, Z+
 962:	77 23       	and	r23, r23
 964:	e1 f7       	brne	.-8      	; 0x95e <strrev+0x4>
 966:	32 97       	sbiw	r30, 0x02	; 2
 968:	04 c0       	rjmp	.+8      	; 0x972 <strrev+0x18>
 96a:	7c 91       	ld	r23, X
 96c:	6d 93       	st	X+, r22
 96e:	70 83       	st	Z, r23
 970:	62 91       	ld	r22, -Z
 972:	ae 17       	cp	r26, r30
 974:	bf 07       	cpc	r27, r31
 976:	c8 f3       	brcs	.-14     	; 0x96a <strrev+0x10>
 978:	08 95       	ret

0000097a <_exit>:
 97a:	f8 94       	cli

0000097c <__stop_program>:
 97c:	ff cf       	rjmp	.-2      	; 0x97c <__stop_program>
