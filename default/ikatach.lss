
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000099a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000085  00800100  00800100  00000a0e  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000003c2  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d54  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000430  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008fe  00000000  00000000  00001fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  000028d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000309  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000041f  00000000  00000000  00002d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	b8 c1       	rjmp	.+880    	; 0x38c <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	c1 c1       	rjmp	.+898    	; 0x3ae <__vector_21>
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_clear_bss>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a5 38       	cpi	r26, 0x85	; 133
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	2d d0       	rcall	.+90     	; 0xd8 <main>
  7e:	8b c4       	rjmp	.+2326   	; 0x996 <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  82:	68 17       	cp	r22, r24
  84:	10 f4       	brcc	.+4      	; 0x8a <delta+0x8>
	{
		return (v1 - v2);
  86:	86 1b       	sub	r24, r22
  88:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  8a:	68 1b       	sub	r22, r24
  8c:	86 2f       	mov	r24, r22
	}
}
  8e:	08 95       	ret

00000090 <switch_sensor>:
void switch_sensor()
{
	if (sensor_id == 1)
  90:	80 91 84 01 	lds	r24, 0x0184
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	61 f4       	brne	.+24     	; 0xb0 <switch_sensor+0x20>
	{
		sensor_id = 0;
  98:	10 92 84 01 	sts	0x0184, r1
		locate(15);
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	e5 d2       	rcall	.+1482   	; 0x66a <locate>
		lcd_send_4b_mode((uchar)'1');
  a0:	81 e3       	ldi	r24, 0x31	; 49
  a2:	99 d2       	rcall	.+1330   	; 0x5d6 <lcd_send_4b_mode>
		locate(79);
  a4:	8f e4       	ldi	r24, 0x4F	; 79
  a6:	e1 d2       	rcall	.+1474   	; 0x66a <locate>
		lcd_send_4b_mode((uchar)'_');
  a8:	8f e5       	ldi	r24, 0x5F	; 95
  aa:	95 d2       	rcall	.+1322   	; 0x5d6 <lcd_send_4b_mode>
		ADMUX = 2;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <switch_sensor+0x38>
	}
	else
	{
		sensor_id = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 84 01 	sts	0x0184, r24
		locate(15);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	d8 d2       	rcall	.+1456   	; 0x66a <locate>
		lcd_send_4b_mode((uchar)'_');
  ba:	8f e5       	ldi	r24, 0x5F	; 95
  bc:	8c d2       	rcall	.+1304   	; 0x5d6 <lcd_send_4b_mode>
		locate(79);
  be:	8f e4       	ldi	r24, 0x4F	; 79
  c0:	d4 d2       	rcall	.+1448   	; 0x66a <locate>
		lcd_send_4b_mode((uchar)'2');
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	88 d2       	rcall	.+1296   	; 0x5d6 <lcd_send_4b_mode>
		ADMUX = 3;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	80 93 7c 00 	sts	0x007C, r24
	}
	measurement_started = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 0a 01 	sts	0x010A, r24
	measurement_done = 0;
  d2:	10 92 7f 01 	sts	0x017F, r1
}
  d6:	08 95       	ret

000000d8 <main>:

int main()
{
  d8:	af 92       	push	r10
  da:	bf 92       	push	r11
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <main+0x16>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x18>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	sensor_id = 0;
  f4:	10 92 84 01 	sts	0x0184, r1
	long time_count;

	uchar i, j;
	char animation[4];
	animation[0] = 0xD9;
  f8:	89 ed       	ldi	r24, 0xD9	; 217
  fa:	89 83       	std	Y+1, r24	; 0x01
	animation[1] = 0xC9;
  fc:	89 ec       	ldi	r24, 0xC9	; 201
  fe:	8a 83       	std	Y+2, r24	; 0x02
	animation[2] = 0xDA;
 100:	8a ed       	ldi	r24, 0xDA	; 218
 102:	8b 83       	std	Y+3, r24	; 0x03
	animation[3] = 0xC8;
 104:	88 ec       	ldi	r24, 0xC8	; 200
 106:	8c 83       	std	Y+4, r24	; 0x04

	setup_timers();
 108:	29 d1       	rcall	.+594    	; 0x35c <setup_timers>

	setup_io();
 10a:	38 d1       	rcall	.+624    	; 0x37c <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
 10c:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
 10e:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
 110:	9a d2       	rcall	.+1332   	; 0x646 <lcd_ini_sequence>
	LED_ON
 112:	57 9a       	sbi	0x0a, 7	; 10
 114:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
 116:	3c 9a       	sbi	0x07, 4	; 7
 118:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
 11a:	55 9a       	sbi	0x0a, 5	; 10
	sei();
 11c:	78 94       	sei
	format(line1, line2);
 11e:	84 e3       	ldi	r24, 0x34	; 52
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	66 e4       	ldi	r22, 0x46	; 70
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	c8 d2       	rcall	.+1424   	; 0x6b8 <format>
 128:	eb e3       	ldi	r30, 0x3B	; 59
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
		gl_set[j].ain_th_low = 20;
 130:	64 e1       	ldi	r22, 0x14	; 20
		gl_set[j].ain_th_high = 45;
 132:	9d e2       	ldi	r25, 0x2D	; 45
 134:	4a e3       	ldi	r20, 0x3A	; 58
 136:	50 e0       	ldi	r21, 0x00	; 0
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
 138:	f0 97       	sbiw	r30, 0x30	; 48
 13a:	10 82       	st	Z, r1
 13c:	11 82       	std	Z+1, r1	; 0x01
 13e:	12 82       	std	Z+2, r1	; 0x02
 140:	13 82       	std	Z+3, r1	; 0x03
 142:	f0 96       	adiw	r30, 0x30	; 48
		gl_set[j].ain_th_low = 20;
 144:	61 83       	std	Z+1, r22	; 0x01
		gl_set[j].ain_th_high = 45;
 146:	92 83       	std	Z+2, r25	; 0x02
 148:	24 9f       	mul	r18, r20
 14a:	d0 01       	movw	r26, r0
 14c:	25 9f       	mul	r18, r21
 14e:	b0 0d       	add	r27, r0
 150:	34 9f       	mul	r19, r20
 152:	b0 0d       	add	r27, r0
 154:	11 24       	eor	r1, r1
 156:	a1 5f       	subi	r26, 0xF1	; 241
 158:	be 4f       	sbci	r27, 0xFE	; 254
 15a:	80 e0       	ldi	r24, 0x00	; 0

		for (i = 0; i < MAX_NUM_MEAS; i++)
		{
			gl_set[j].rpm_his[i] = 0;
 15c:	1d 92       	st	X+, r1
 15e:	1d 92       	st	X+, r1
 160:	1d 92       	st	X+, r1
 162:	1d 92       	st	X+, r1
	{
		gl_set[j].rpm_avg = 0;
		gl_set[j].ain_th_low = 20;
		gl_set[j].ain_th_high = 45;

		for (i = 0; i < MAX_NUM_MEAS; i++)
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	8a 30       	cpi	r24, 0x0A	; 10
 168:	c9 f7       	brne	.-14     	; 0x15c <main+0x84>
		{
			gl_set[j].rpm_his[i] = 0;
		}
		gl_set[j].last_rpm_indx = 0;
 16a:	10 82       	st	Z, r1
		gl_set[j].anim_counter = 0;
 16c:	10 86       	std	Z+8, r1	; 0x08
		gl_set[j].anim_counter_old = 0;
 16e:	11 86       	std	Z+9, r1	; 0x09
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	fa 96       	adiw	r30, 0x3a	; 58
	LCD_BL_ON
	LCD_CONTRAST_ON
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
 176:	22 30       	cpi	r18, 0x02	; 2
 178:	31 05       	cpc	r19, r1
 17a:	f1 f6       	brne	.-68     	; 0x138 <main+0x60>
		}
		gl_set[j].last_rpm_indx = 0;
		gl_set[j].anim_counter = 0;
		gl_set[j].anim_counter_old = 0;
	}
	measurement_started = 1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 0a 01 	sts	0x010A, r24
	measurement_done = 0;
 182:	10 92 7f 01 	sts	0x017F, r1

	LED_OFF;
 186:	5f 98       	cbi	0x0b, 7	; 11
	ADMUX = 2 + sensor_id;
 188:	80 91 84 01 	lds	r24, 0x0184
 18c:	8e 5f       	subi	r24, 0xFE	; 254
 18e:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 192:	8d ee       	ldi	r24, 0xED	; 237
 194:	80 93 7a 00 	sts	0x007A, r24
	SENSOR_ON;
 198:	39 9a       	sbi	0x07, 1	; 7
 19a:	41 9a       	sbi	0x08, 1	; 8
	LED_ON;
 19c:	57 9a       	sbi	0x0a, 7	; 10
 19e:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_CONTRAST = 0;
 1a0:	18 bc       	out	0x28, r1	; 40
	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 1a2:	7a e3       	ldi	r23, 0x3A	; 58
 1a4:	c7 2e       	mov	r12, r23
 1a6:	d1 2c       	mov	r13, r1
			measurement_done = 1;
 1a8:	ee 24       	eor	r14, r14
 1aa:	e3 94       	inc	r14
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
			locate(14);
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 1ac:	5e 01       	movw	r10, r28
 1ae:	08 94       	sec
 1b0:	a1 1c       	adc	r10, r1
 1b2:	b1 1c       	adc	r11, r1
	LCD_CONTRAST = 0;

	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
 1b4:	80 91 80 01 	lds	r24, 0x0180
 1b8:	90 91 81 01 	lds	r25, 0x0181
 1bc:	a0 e0       	ldi	r26, 0x00	; 0
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	dc 01       	movw	r26, r24
 1c2:	99 27       	eor	r25, r25
 1c4:	88 27       	eor	r24, r24
 1c6:	20 91 82 01 	lds	r18, 0x0182
 1ca:	30 91 83 01 	lds	r19, 0x0183
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	82 0f       	add	r24, r18
 1d4:	93 1f       	adc	r25, r19
 1d6:	a4 1f       	adc	r26, r20
 1d8:	b5 1f       	adc	r27, r21
 1da:	85 5b       	subi	r24, 0xB5	; 181
 1dc:	94 4c       	sbci	r25, 0xC4	; 196
 1de:	a4 40       	sbci	r26, 0x04	; 4
 1e0:	b0 40       	sbci	r27, 0x00	; 0
 1e2:	24 f1       	brlt	.+72     	; 0x22c <main+0x154>
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 1e4:	80 91 84 01 	lds	r24, 0x0184
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	8c 9d       	mul	r24, r12
 1ec:	90 01       	movw	r18, r0
 1ee:	8d 9d       	mul	r24, r13
 1f0:	30 0d       	add	r19, r0
 1f2:	9c 9d       	mul	r25, r12
 1f4:	30 0d       	add	r19, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	d9 01       	movw	r26, r18
 1fa:	a5 5f       	subi	r26, 0xF5	; 245
 1fc:	be 4f       	sbci	r27, 0xFE	; 254
 1fe:	d0 96       	adiw	r26, 0x30	; 48
 200:	8c 91       	ld	r24, X
 202:	d0 97       	sbiw	r26, 0x30	; 48
 204:	e8 2f       	mov	r30, r24
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	31 96       	adiw	r30, 0x01	; 1
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e2 0f       	add	r30, r18
 214:	f3 1f       	adc	r31, r19
 216:	e5 5f       	subi	r30, 0xF5	; 245
 218:	fe 4f       	sbci	r31, 0xFE	; 254
 21a:	10 82       	st	Z, r1
 21c:	11 82       	std	Z+1, r1	; 0x01
 21e:	12 82       	std	Z+2, r1	; 0x02
 220:	13 82       	std	Z+3, r1	; 0x03
 222:	8f 5f       	subi	r24, 0xFF	; 255
 224:	d0 96       	adiw	r26, 0x30	; 48
 226:	8c 93       	st	X, r24
			measurement_done = 1;
 228:	e0 92 7f 01 	sts	0x017F, r14
		}
		if (measurement_done)
 22c:	80 91 7f 01 	lds	r24, 0x017F
 230:	88 23       	and	r24, r24
 232:	09 f4       	brne	.+2      	; 0x236 <main+0x15e>
 234:	6f c0       	rjmp	.+222    	; 0x314 <__stack+0x15>
		{
			gl_set[sensor_id].rpm_avg = gl_set[sensor_id].rpm_his[0];
 236:	80 91 84 01 	lds	r24, 0x0184
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	8c 9d       	mul	r24, r12
 23e:	f0 01       	movw	r30, r0
 240:	8d 9d       	mul	r24, r13
 242:	f0 0d       	add	r31, r0
 244:	9c 9d       	mul	r25, r12
 246:	f0 0d       	add	r31, r0
 248:	11 24       	eor	r1, r1
 24a:	e5 5f       	subi	r30, 0xF5	; 245
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	84 81       	ldd	r24, Z+4	; 0x04
 250:	95 81       	ldd	r25, Z+5	; 0x05
 252:	a6 81       	ldd	r26, Z+6	; 0x06
 254:	b7 81       	ldd	r27, Z+7	; 0x07
 256:	80 83       	st	Z, r24
 258:	91 83       	std	Z+1, r25	; 0x01
 25a:	a2 83       	std	Z+2, r26	; 0x02
 25c:	b3 83       	std	Z+3, r27	; 0x03
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	30 e0       	ldi	r19, 0x00	; 0
			for (i = 1; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
 262:	f0 90 84 01 	lds	r15, 0x0184
 266:	8f 2d       	mov	r24, r15
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	ac 01       	movw	r20, r24
 26c:	4c 9d       	mul	r20, r12
 26e:	c0 01       	movw	r24, r0
 270:	4d 9d       	mul	r20, r13
 272:	90 0d       	add	r25, r0
 274:	5c 9d       	mul	r21, r12
 276:	90 0d       	add	r25, r0
 278:	11 24       	eor	r1, r1
 27a:	8c 01       	movw	r16, r24
 27c:	05 5f       	subi	r16, 0xF5	; 245
 27e:	1e 4f       	sbci	r17, 0xFE	; 254
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	f9 01       	movw	r30, r18
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	e8 0f       	add	r30, r24
 290:	f9 1f       	adc	r31, r25
 292:	e5 5f       	subi	r30, 0xF5	; 245
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	40 81       	ld	r20, Z
 298:	51 81       	ldd	r21, Z+1	; 0x01
 29a:	62 81       	ldd	r22, Z+2	; 0x02
 29c:	73 81       	ldd	r23, Z+3	; 0x03
 29e:	f8 01       	movw	r30, r16
 2a0:	80 81       	ld	r24, Z
 2a2:	91 81       	ldd	r25, Z+1	; 0x01
 2a4:	a2 81       	ldd	r26, Z+2	; 0x02
 2a6:	b3 81       	ldd	r27, Z+3	; 0x03
 2a8:	48 0f       	add	r20, r24
 2aa:	59 1f       	adc	r21, r25
 2ac:	6a 1f       	adc	r22, r26
 2ae:	7b 1f       	adc	r23, r27
 2b0:	40 83       	st	Z, r20
 2b2:	51 83       	std	Z+1, r21	; 0x01
 2b4:	62 83       	std	Z+2, r22	; 0x02
 2b6:	73 83       	std	Z+3, r23	; 0x03
			measurement_done = 1;
		}
		if (measurement_done)
		{
			gl_set[sensor_id].rpm_avg = gl_set[sensor_id].rpm_his[0];
			for (i = 1; i < MAX_NUM_MEAS; i++)
 2b8:	2a 30       	cpi	r18, 0x0A	; 10
 2ba:	31 05       	cpc	r19, r1
 2bc:	91 f6       	brne	.-92     	; 0x262 <main+0x18a>
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
			}
			gl_set[sensor_id].rpm_avg /= MAX_NUM_MEAS;
 2be:	cb 01       	movw	r24, r22
 2c0:	ba 01       	movw	r22, r20
 2c2:	2a e0       	ldi	r18, 0x0A	; 10
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	e6 d2       	rcall	.+1484   	; 0x898 <__divmodsi4>
 2cc:	f8 01       	movw	r30, r16
 2ce:	20 83       	st	Z, r18
 2d0:	31 83       	std	Z+1, r19	; 0x01
 2d2:	42 83       	std	Z+2, r20	; 0x02
 2d4:	53 83       	std	Z+3, r21	; 0x03
			switch (sensor_id)
 2d6:	ff 20       	and	r15, r15
 2d8:	21 f0       	breq	.+8      	; 0x2e2 <main+0x20a>
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	ff 16       	cp	r15, r31
 2de:	c9 f4       	brne	.+50     	; 0x312 <__stack+0x13>
 2e0:	0c c0       	rjmp	.+24     	; 0x2fa <main+0x222>
			{
			case 0:
				lcd_send_floatx10(gl_set[0].rpm_avg, 5, 7, 1); //rpm_x10
 2e2:	60 91 0b 01 	lds	r22, 0x010B
 2e6:	70 91 0c 01 	lds	r23, 0x010C
 2ea:	80 91 0d 01 	lds	r24, 0x010D
 2ee:	90 91 0e 01 	lds	r25, 0x010E
 2f2:	45 e0       	ldi	r20, 0x05	; 5
 2f4:	27 e0       	ldi	r18, 0x07	; 7
 2f6:	01 e0       	ldi	r16, 0x01	; 1
 2f8:	0a d2       	rcall	.+1044   	; 0x70e <lcd_send_floatx10>
			case 1:
				lcd_send_floatx10(gl_set[1].rpm_avg, 69, 7, 1); //rpm_x10
 2fa:	60 91 45 01 	lds	r22, 0x0145
 2fe:	70 91 46 01 	lds	r23, 0x0146
 302:	80 91 47 01 	lds	r24, 0x0147
 306:	90 91 48 01 	lds	r25, 0x0148
 30a:	45 e4       	ldi	r20, 0x45	; 69
 30c:	27 e0       	ldi	r18, 0x07	; 7
 30e:	01 e0       	ldi	r16, 0x01	; 1
 310:	fe d1       	rcall	.+1020   	; 0x70e <lcd_send_floatx10>
			}
			switch_sensor();
 312:	be de       	rcall	.-644    	; 0x90 <switch_sensor>
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
 314:	90 91 43 01 	lds	r25, 0x0143
 318:	80 91 44 01 	lds	r24, 0x0144
 31c:	98 17       	cp	r25, r24
 31e:	59 f0       	breq	.+22     	; 0x336 <__stack+0x37>
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
 320:	90 93 44 01 	sts	0x0144, r25
			locate(14);
 324:	8e e0       	ldi	r24, 0x0E	; 14
 326:	a1 d1       	rcall	.+834    	; 0x66a <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 328:	80 91 43 01 	lds	r24, 0x0143
 32c:	f5 01       	movw	r30, r10
 32e:	e8 0f       	add	r30, r24
 330:	f1 1d       	adc	r31, r1
 332:	80 81       	ld	r24, Z
 334:	50 d1       	rcall	.+672    	; 0x5d6 <lcd_send_4b_mode>
		}
		if (gl_set[1].anim_counter != gl_set[1].anim_counter_old)
 336:	90 91 7d 01 	lds	r25, 0x017D
 33a:	80 91 7e 01 	lds	r24, 0x017E
 33e:	98 17       	cp	r25, r24
 340:	09 f4       	brne	.+2      	; 0x344 <__stack+0x45>
 342:	38 cf       	rjmp	.-400    	; 0x1b4 <main+0xdc>
		{
			gl_set[1].anim_counter_old = gl_set[1].anim_counter;
 344:	90 93 7e 01 	sts	0x017E, r25
			locate(78);
 348:	8e e4       	ldi	r24, 0x4E	; 78
 34a:	8f d1       	rcall	.+798    	; 0x66a <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 34c:	80 91 43 01 	lds	r24, 0x0143
 350:	f5 01       	movw	r30, r10
 352:	e8 0f       	add	r30, r24
 354:	f1 1d       	adc	r31, r1
 356:	80 81       	ld	r24, Z
 358:	3e d1       	rcall	.+636    	; 0x5d6 <lcd_send_4b_mode>
 35a:	2c cf       	rjmp	.-424    	; 0x1b4 <main+0xdc>

0000035c <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1<<COM1B1)|(1<<WGM01)|(1<<WGM00);
 35c:	83 e2       	ldi	r24, 0x23	; 35
 35e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00); 
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25; 
 364:	89 e1       	ldi	r24, 0x19	; 25
 366:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0<<OCIE0A);
 368:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 36c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);
 376:	90 93 6f 00 	sts	0x006F, r25


}
 37a:	08 95       	ret

0000037c <setup_io>:


void setup_io()
{
	DIDR0 = (1<<ADC2D) | (1<<ADC3D); //disable digital input on ADC2 and ADC3
 37c:	8c e0       	ldi	r24, 0x0C	; 12
 37e:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1<<PORTB1); //set push button as input
 382:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); //activte the pull up resistor for the push button
 384:	29 9a       	sbi	0x05, 1	; 5
	
	LCD_EN_PORT |= _BV(LCD_EN);
 386:	45 9a       	sbi	0x08, 5	; 8
  LCD_RS_PORT &= ~(_BV(LCD_RS));	
 388:	5c 98       	cbi	0x0b, 4	; 11
}
 38a:	08 95       	ret

0000038c <__vector_13>:
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
	}
}

ISR(TIMER1_OVF_vect)
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	8f 93       	push	r24
	//LED_ON;
	post_scaller++;
 398:	80 91 09 01 	lds	r24, 0x0109
 39c:	8f 5f       	subi	r24, 0xFF	; 255
 39e:	80 93 09 01 	sts	0x0109, r24
}
 3a2:	8f 91       	pop	r24
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	af 92       	push	r10
 3ba:	bf 92       	push	r11
 3bc:	cf 92       	push	r12
 3be:	df 92       	push	r13
 3c0:	ef 92       	push	r14
 3c2:	ff 92       	push	r15
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	2f 93       	push	r18
 3ca:	3f 93       	push	r19
 3cc:	4f 93       	push	r20
 3ce:	5f 93       	push	r21
 3d0:	6f 93       	push	r22
 3d2:	7f 93       	push	r23
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	af 93       	push	r26
 3da:	bf 93       	push	r27
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC >> 2;
 3e4:	80 91 84 01 	lds	r24, 0x0184
 3e8:	c8 2e       	mov	r12, r24
 3ea:	dd 24       	eor	r13, r13
 3ec:	20 91 78 00 	lds	r18, 0x0078
 3f0:	30 91 79 00 	lds	r19, 0x0079
 3f4:	36 95       	lsr	r19
 3f6:	27 95       	ror	r18
 3f8:	36 95       	lsr	r19
 3fa:	27 95       	ror	r18
 3fc:	8a e3       	ldi	r24, 0x3A	; 58
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	c8 9e       	mul	r12, r24
 402:	50 01       	movw	r10, r0
 404:	c9 9e       	mul	r12, r25
 406:	b0 0c       	add	r11, r0
 408:	d8 9e       	mul	r13, r24
 40a:	b0 0c       	add	r11, r0
 40c:	11 24       	eor	r1, r1
 40e:	e5 01       	movw	r28, r10
 410:	c5 5f       	subi	r28, 0xF5	; 245
 412:	de 4f       	sbci	r29, 0xFE	; 254
 414:	2b ab       	std	Y+51, r18	; 0x33
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state == 0)) //a cycle is detected
 416:	8a a9       	ldd	r24, Y+50	; 0x32
 418:	82 17       	cp	r24, r18
 41a:	08 f0       	brcs	.+2      	; 0x41e <__vector_21+0x70>
 41c:	83 c0       	rjmp	.+262    	; 0x524 <__vector_21+0x176>
 41e:	8c a9       	ldd	r24, Y+52	; 0x34
 420:	88 23       	and	r24, r24
 422:	09 f0       	breq	.+2      	; 0x426 <__vector_21+0x78>
 424:	7f c0       	rjmp	.+254    	; 0x524 <__vector_21+0x176>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	8c ab       	std	Y+52, r24	; 0x34
		t_capture = TCNT1;
 42a:	60 91 84 00 	lds	r22, 0x0084
 42e:	70 91 85 00 	lds	r23, 0x0085
 432:	70 93 83 01 	sts	0x0183, r23
 436:	60 93 82 01 	sts	0x0182, r22
		TCNT1 = 0;
 43a:	10 92 85 00 	sts	0x0085, r1
 43e:	10 92 84 00 	sts	0x0084, r1
		t_postscale = post_scaller;
 442:	80 91 09 01 	lds	r24, 0x0109
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	30 93 81 01 	sts	0x0181, r19
 44e:	20 93 80 01 	sts	0x0180, r18
		post_scaller = 0;
 452:	10 92 09 01 	sts	0x0109, r1
		if (measurement_started)
 456:	80 91 0a 01 	lds	r24, 0x010A
 45a:	88 23       	and	r24, r24
 45c:	19 f0       	breq	.+6      	; 0x464 <__vector_21+0xb6>
		{
			measurement_started = 0;
 45e:	10 92 0a 01 	sts	0x010A, r1
 462:	4f c0       	rjmp	.+158    	; 0x502 <__vector_21+0x154>
		}
		else if (!measurement_done)
 464:	80 91 7f 01 	lds	r24, 0x017F
 468:	88 23       	and	r24, r24
 46a:	09 f0       	breq	.+2      	; 0x46e <__vector_21+0xc0>
 46c:	4a c0       	rjmp	.+148    	; 0x502 <__vector_21+0x154>
		{
			time_count = t_capture + (t_postscale * 65536);
 46e:	c9 01       	movw	r24, r18
 470:	a0 e0       	ldi	r26, 0x00	; 0
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	ac 01       	movw	r20, r24
 476:	33 27       	eor	r19, r19
 478:	22 27       	eor	r18, r18
 47a:	cb 01       	movw	r24, r22
 47c:	a0 e0       	ldi	r26, 0x00	; 0
 47e:	b0 e0       	ldi	r27, 0x00	; 0
 480:	28 0f       	add	r18, r24
 482:	39 1f       	adc	r19, r25
 484:	4a 1f       	adc	r20, r26
 486:	5b 1f       	adc	r21, r27
 488:	20 93 01 01 	sts	0x0101, r18
 48c:	30 93 02 01 	sts	0x0102, r19
 490:	40 93 03 01 	sts	0x0103, r20
 494:	50 93 04 01 	sts	0x0104, r21
			if (time_count)
 498:	21 15       	cp	r18, r1
 49a:	31 05       	cpc	r19, r1
 49c:	41 05       	cpc	r20, r1
 49e:	51 05       	cpc	r21, r1
 4a0:	69 f1       	breq	.+90     	; 0x4fc <__vector_21+0x14e>
			{
				rpm_x10 = 187500000 / time_count;
 4a2:	60 ee       	ldi	r22, 0xE0	; 224
 4a4:	75 e0       	ldi	r23, 0x05	; 5
 4a6:	8d e2       	ldi	r24, 0x2D	; 45
 4a8:	9b e0       	ldi	r25, 0x0B	; 11
 4aa:	f6 d1       	rcall	.+1004   	; 0x898 <__divmodsi4>
 4ac:	79 01       	movw	r14, r18
 4ae:	8a 01       	movw	r16, r20
 4b0:	e0 92 05 01 	sts	0x0105, r14
 4b4:	f0 92 06 01 	sts	0x0106, r15
 4b8:	00 93 07 01 	sts	0x0107, r16
 4bc:	10 93 08 01 	sts	0x0108, r17
				if (rpm_x10 < 45000)
 4c0:	88 ec       	ldi	r24, 0xC8	; 200
 4c2:	e8 16       	cp	r14, r24
 4c4:	8f ea       	ldi	r24, 0xAF	; 175
 4c6:	f8 06       	cpc	r15, r24
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 07       	cpc	r16, r24
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	18 07       	cpc	r17, r24
 4d0:	ac f4       	brge	.+42     	; 0x4fc <__vector_21+0x14e>
					{
						gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = rpm_x10;
 4d2:	88 a9       	ldd	r24, Y+48	; 0x30
 4d4:	e8 2f       	mov	r30, r24
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	31 96       	adiw	r30, 0x01	; 1
 4da:	ee 0f       	add	r30, r30
 4dc:	ff 1f       	adc	r31, r31
 4de:	ee 0f       	add	r30, r30
 4e0:	ff 1f       	adc	r31, r31
 4e2:	ea 0d       	add	r30, r10
 4e4:	fb 1d       	adc	r31, r11
 4e6:	e5 5f       	subi	r30, 0xF5	; 245
 4e8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ea:	e0 82       	st	Z, r14
 4ec:	f1 82       	std	Z+1, r15	; 0x01
 4ee:	02 83       	std	Z+2, r16	; 0x02
 4f0:	13 83       	std	Z+3, r17	; 0x03
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	88 ab       	std	Y+48, r24	; 0x30
						if(gl_set[sensor_id].last_rpm_indx >= MAX_NUM_MEAS)
 4f6:	8a 30       	cpi	r24, 0x0A	; 10
 4f8:	08 f0       	brcs	.+2      	; 0x4fc <__vector_21+0x14e>
						{
							gl_set[sensor_id].last_rpm_indx = 0;
 4fa:	18 aa       	std	Y+48, r1	; 0x30
						}
					}
			}
			measurement_done = 1;
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	80 93 7f 01 	sts	0x017F, r24
		}
		gl_set[sensor_id].anim_counter++;
 502:	8a e3       	ldi	r24, 0x3A	; 58
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	c8 9e       	mul	r12, r24
 508:	f0 01       	movw	r30, r0
 50a:	c9 9e       	mul	r12, r25
 50c:	f0 0d       	add	r31, r0
 50e:	d8 9e       	mul	r13, r24
 510:	f0 0d       	add	r31, r0
 512:	11 24       	eor	r1, r1
 514:	e5 5f       	subi	r30, 0xF5	; 245
 516:	fe 4f       	sbci	r31, 0xFE	; 254
 518:	80 ad       	ldd	r24, Z+56	; 0x38
 51a:	8f 5f       	subi	r24, 0xFF	; 255
 51c:	80 af       	std	Z+56, r24	; 0x38
		if (gl_set[sensor_id].anim_counter > 3)
 51e:	84 30       	cpi	r24, 0x04	; 4
 520:	08 f0       	brcs	.+2      	; 0x524 <__vector_21+0x176>
		{
			gl_set[sensor_id].anim_counter = 0;
 522:	10 ae       	std	Z+56, r1	; 0x38
		}
	}

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state == 1)) //a low level is detected
 524:	8a e3       	ldi	r24, 0x3A	; 58
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	c8 9e       	mul	r12, r24
 52a:	f0 01       	movw	r30, r0
 52c:	c9 9e       	mul	r12, r25
 52e:	f0 0d       	add	r31, r0
 530:	d8 9e       	mul	r13, r24
 532:	f0 0d       	add	r31, r0
 534:	11 24       	eor	r1, r1
 536:	e5 5f       	subi	r30, 0xF5	; 245
 538:	fe 4f       	sbci	r31, 0xFE	; 254
 53a:	93 a9       	ldd	r25, Z+51	; 0x33
 53c:	81 a9       	ldd	r24, Z+49	; 0x31
 53e:	98 17       	cp	r25, r24
 540:	20 f4       	brcc	.+8      	; 0x54a <__vector_21+0x19c>
 542:	84 a9       	ldd	r24, Z+52	; 0x34
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	09 f4       	brne	.+2      	; 0x54a <__vector_21+0x19c>
	{
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
 548:	14 aa       	std	Z+52, r1	; 0x34
	}

	if (delta(gl_set[sensor_id].ir_history_a, gl_set[sensor_id].ir_value) > 10)
 54a:	ca e3       	ldi	r28, 0x3A	; 58
 54c:	d0 e0       	ldi	r29, 0x00	; 0
 54e:	cc 9e       	mul	r12, r28
 550:	f0 01       	movw	r30, r0
 552:	cd 9e       	mul	r12, r29
 554:	f0 0d       	add	r31, r0
 556:	dc 9e       	mul	r13, r28
 558:	f0 0d       	add	r31, r0
 55a:	11 24       	eor	r1, r1
 55c:	e5 5f       	subi	r30, 0xF5	; 245
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	85 a9       	ldd	r24, Z+53	; 0x35
 562:	63 a9       	ldd	r22, Z+51	; 0x33
 564:	8e dd       	rcall	.-1252   	; 0x82 <delta>
 566:	8b 30       	cpi	r24, 0x0B	; 11
 568:	d8 f0       	brcs	.+54     	; 0x5a0 <__vector_21+0x1f2>
	{
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
 56a:	80 91 84 01 	lds	r24, 0x0184
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	8c 9f       	mul	r24, r28
 572:	f0 01       	movw	r30, r0
 574:	8d 9f       	mul	r24, r29
 576:	f0 0d       	add	r31, r0
 578:	9c 9f       	mul	r25, r28
 57a:	f0 0d       	add	r31, r0
 57c:	11 24       	eor	r1, r1
 57e:	e5 5f       	subi	r30, 0xF5	; 245
 580:	fe 4f       	sbci	r31, 0xFE	; 254
 582:	25 a9       	ldd	r18, Z+53	; 0x35
 584:	26 ab       	std	Z+54, r18	; 0x36
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 586:	83 a9       	ldd	r24, Z+51	; 0x33
 588:	85 ab       	std	Z+53, r24	; 0x35
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a + gl_set[sensor_id].ir_history_b) / 2;
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	82 0f       	add	r24, r18
 58e:	91 1d       	adc	r25, r1
 590:	95 95       	asr	r25
 592:	87 95       	ror	r24
 594:	28 2f       	mov	r18, r24
 596:	87 ab       	std	Z+55, r24	; 0x37
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 598:	2b 5f       	subi	r18, 0xFB	; 251
 59a:	22 ab       	std	Z+50, r18	; 0x32
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 59c:	2a 50       	subi	r18, 0x0A	; 10
 59e:	21 ab       	std	Z+49, r18	; 0x31
	}
}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	bf 91       	pop	r27
 5aa:	af 91       	pop	r26
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	7f 91       	pop	r23
 5b2:	6f 91       	pop	r22
 5b4:	5f 91       	pop	r21
 5b6:	4f 91       	pop	r20
 5b8:	3f 91       	pop	r19
 5ba:	2f 91       	pop	r18
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	ff 90       	pop	r15
 5c2:	ef 90       	pop	r14
 5c4:	df 90       	pop	r13
 5c6:	cf 90       	pop	r12
 5c8:	bf 90       	pop	r11
 5ca:	af 90       	pop	r10
 5cc:	0f 90       	pop	r0
 5ce:	0f be       	out	0x3f, r0	; 63
 5d0:	0f 90       	pop	r0
 5d2:	1f 90       	pop	r1
 5d4:	18 95       	reti

000005d6 <lcd_send_4b_mode>:



void lcd_send_4b_mode(unsigned char data){
	
  LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 5d6:	9a b1       	in	r25, 0x0a	; 10
 5d8:	9f 60       	ori	r25, 0x0F	; 15
 5da:	9a b9       	out	0x0a, r25	; 10
	
	LCD_EN_PORT |= _BV(LCD_EN);
 5dc:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5de:	48 e8       	ldi	r20, 0x88	; 136
 5e0:	53 e1       	ldi	r21, 0x13	; 19
 5e2:	fa 01       	movw	r30, r20
 5e4:	31 97       	sbiw	r30, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <lcd_send_4b_mode+0xe>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5e8:	9b b1       	in	r25, 0x0b	; 11
 5ea:	90 7f       	andi	r25, 0xF0	; 240
 5ec:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data>>4)<<LCD_SHIFT)&LCD_MASK;
 5ee:	2b b1       	in	r18, 0x0b	; 11
 5f0:	98 2f       	mov	r25, r24
 5f2:	92 95       	swap	r25
 5f4:	9f 70       	andi	r25, 0x0F	; 15
 5f6:	92 2b       	or	r25, r18
 5f8:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5fa:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 5fc:	45 9a       	sbi	0x08, 5	; 8
 5fe:	fa 01       	movw	r30, r20
 600:	31 97       	sbiw	r30, 0x01	; 1
 602:	f1 f7       	brne	.-4      	; 0x600 <lcd_send_4b_mode+0x2a>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 604:	9b b1       	in	r25, 0x0b	; 11
 606:	90 7f       	andi	r25, 0xF0	; 240
 608:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data&LCD_MASK)<<LCD_SHIFT);
 60a:	9b b1       	in	r25, 0x0b	; 11
 60c:	8f 70       	andi	r24, 0x0F	; 15
 60e:	98 2b       	or	r25, r24
 610:	9b b9       	out	0x0b, r25	; 11


	LCD_EN_PORT &= ~(_BV(LCD_EN));
 612:	45 98       	cbi	0x08, 5	; 8
 614:	ca 01       	movw	r24, r20
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <lcd_send_4b_mode+0x40>
	_delay_ms (1);
} 
 61a:	08 95       	ret

0000061c <cls>:
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
		cls();
}
void cls(){     // clear the display
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 61c:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(0x01);   
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	da df       	rcall	.-76     	; 0x5d6 <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 622:	5c 9a       	sbi	0x0b, 4	; 11
}
 624:	08 95       	ret

00000626 <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}


void ini_lcd_4_bit_mode(){
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	c8 e5       	ldi	r28, 0x58	; 88
 62c:	d0 e0       	ldi	r29, 0x00	; 0
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 62e:	fe 01       	movw	r30, r28
 630:	84 91       	lpm	r24, Z+
 632:	d1 df       	rcall	.-94     	; 0x5d6 <lcd_send_4b_mode>
 634:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode(){
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	c0 36       	cpi	r28, 0x60	; 96
 63a:	df 07       	cpc	r29, r31
 63c:	c1 f7       	brne	.-16     	; 0x62e <ini_lcd_4_bit_mode+0x8>
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
   }
   LCD_RS_PORT |= _BV(LCD_RS);
 63e:	5c 9a       	sbi	0x0b, 4	; 11
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms (1);
} 

void lcd_ini_sequence()
{
 646:	84 ec       	ldi	r24, 0xC4	; 196
 648:	99 e0       	ldi	r25, 0x09	; 9
 64a:	24 ef       	ldi	r18, 0xF4	; 244
 64c:	31 e0       	ldi	r19, 0x01	; 1
 64e:	f9 01       	movw	r30, r18
 650:	31 97       	sbiw	r30, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 654:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 656:	d9 f7       	brne	.-10     	; 0x64e <lcd_ini_sequence+0x8>
		
		_delay_ms(250); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 658:	e6 df       	rcall	.-52     	; 0x626 <ini_lcd_4_bit_mode>
		cls();
 65a:	e0 df       	rcall	.-64     	; 0x61c <cls>
 65c:	80 e5       	ldi	r24, 0x50	; 80
 65e:	93 ec       	ldi	r25, 0xC3	; 195
 660:	01 97       	sbiw	r24, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <lcd_ini_sequence+0x1a>
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 664:	e0 df       	rcall	.-64     	; 0x626 <ini_lcd_4_bit_mode>
		cls();
 666:	da df       	rcall	.-76     	; 0x61c <cls>
}
 668:	08 95       	ret

0000066a <locate>:
   LCD_RS_PORT |= _BV(LCD_RS);
}

void locate(unsigned char pos){
   pos = pos | (1 << 7);
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 66a:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(pos);   
 66c:	80 68       	ori	r24, 0x80	; 128
 66e:	b3 df       	rcall	.-154    	; 0x5d6 <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 670:	5c 9a       	sbi	0x0b, 4	; 11
}
 672:	08 95       	ret

00000674 <put_str>:
	{
		lcd_send_4b_mode(' ');  
	}
}

void put_str(uchar pos, char* str){     
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 67e:	f5 df       	rcall	.-22     	; 0x66a <locate>
 680:	c0 e0       	ldi	r28, 0x00	; 0
 682:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i< 16; i++){				
		lcd_send_4b_mode(pgm_read_byte(str + i));
 684:	f8 01       	movw	r30, r16
 686:	ec 0f       	add	r30, r28
 688:	fd 1f       	adc	r31, r29
 68a:	e4 91       	lpm	r30, Z+
 68c:	8e 2f       	mov	r24, r30
 68e:	a3 df       	rcall	.-186    	; 0x5d6 <lcd_send_4b_mode>
 690:	21 96       	adiw	r28, 0x01	; 1
}

void put_str(uchar pos, char* str){     
	uchar i;
	locate(pos);
	for (i = 0; i< 16; i++){				
 692:	c0 31       	cpi	r28, 0x10	; 16
 694:	d1 05       	cpc	r29, r1
 696:	b1 f7       	brne	.-20     	; 0x684 <put_str+0x10>
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	08 95       	ret

000006a2 <clr_line>:
   LCD_RS_PORT &= ~(_BV(LCD_RS));
   lcd_send_4b_mode(0x01);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add){     // clear line
 6a2:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 6a4:	e2 df       	rcall	.-60     	; 0x66a <locate>
 6a6:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<16; i++)
	{
		lcd_send_4b_mode(' ');  
 6a8:	80 e2       	ldi	r24, 0x20	; 32
 6aa:	95 df       	rcall	.-214    	; 0x5d6 <lcd_send_4b_mode>
}

void clr_line(uchar start_add){     // clear line
	uchar i;
	locate(start_add);
	for (i=0; i<16; i++)
 6ac:	1f 5f       	subi	r17, 0xFF	; 255
 6ae:	10 31       	cpi	r17, 0x10	; 16
 6b0:	d9 f7       	brne	.-10     	; 0x6a8 <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');  
	}
}
 6b2:	1f 91       	pop	r17
 6b4:	08 95       	ret

000006b6 <lcd_contrast>:
void lcd_contrast()
{


	
}
 6b6:	08 95       	ret

000006b8 <format>:

void format(char* line1,char* line2){     // reformat the display
 6b8:	ef 92       	push	r14
 6ba:	ff 92       	push	r15
 6bc:	0f 93       	push	r16
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	8c 01       	movw	r16, r24
 6c6:	7b 01       	movw	r14, r22
    unsigned char i;
		locate(0);
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	cf df       	rcall	.-98     	; 0x66a <locate>
 6cc:	c0 e0       	ldi	r28, 0x00	; 0
 6ce:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
 6d0:	f8 01       	movw	r30, r16
 6d2:	ec 0f       	add	r30, r28
 6d4:	fd 1f       	adc	r31, r29
 6d6:	e4 91       	lpm	r30, Z+
 6d8:	8e 2f       	mov	r24, r30
 6da:	7d df       	rcall	.-262    	; 0x5d6 <lcd_send_4b_mode>
 6dc:	21 96       	adiw	r28, 0x01	; 1
}

void format(char* line1,char* line2){     // reformat the display
    unsigned char i;
		locate(0);
		for (i = 0; i< 16; i++){				
 6de:	c0 31       	cpi	r28, 0x10	; 16
 6e0:	d1 05       	cpc	r29, r1
 6e2:	b1 f7       	brne	.-20     	; 0x6d0 <format+0x18>
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
 6e4:	80 e4       	ldi	r24, 0x40	; 64
 6e6:	c1 df       	rcall	.-126    	; 0x66a <locate>
 6e8:	c0 e0       	ldi	r28, 0x00	; 0
 6ea:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
 6ec:	f7 01       	movw	r30, r14
 6ee:	ec 0f       	add	r30, r28
 6f0:	fd 1f       	adc	r31, r29
 6f2:	e4 91       	lpm	r30, Z+
 6f4:	8e 2f       	mov	r24, r30
 6f6:	6f df       	rcall	.-290    	; 0x5d6 <lcd_send_4b_mode>
 6f8:	21 96       	adiw	r28, 0x01	; 1
		locate(0);
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
		for (i = 0; i< 16; i++){
 6fa:	c0 31       	cpi	r28, 0x10	; 16
 6fc:	d1 05       	cpc	r29, r1
 6fe:	b1 f7       	brne	.-20     	; 0x6ec <format+0x34>
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
		}
}
 700:	df 91       	pop	r29
 702:	cf 91       	pop	r28
 704:	1f 91       	pop	r17
 706:	0f 91       	pop	r16
 708:	ff 90       	pop	r15
 70a:	ef 90       	pop	r14
 70c:	08 95       	ret

0000070e <lcd_send_floatx10>:
   lcd_send_4b_mode(pos);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data,uchar location, uchar len, uchar d_len)
{
 70e:	af 92       	push	r10
 710:	bf 92       	push	r11
 712:	cf 92       	push	r12
 714:	df 92       	push	r13
 716:	ef 92       	push	r14
 718:	ff 92       	push	r15
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
 71e:	df 93       	push	r29
 720:	cf 93       	push	r28
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	60 97       	sbiw	r28, 0x10	; 16
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	f8 94       	cli
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	cd bf       	out	0x3d, r28	; 61
 732:	6b 01       	movw	r12, r22
 734:	7c 01       	movw	r14, r24
 736:	14 2f       	mov	r17, r20
 738:	a2 2e       	mov	r10, r18
 73a:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];
	
	uchar i,y,temp,int_len;
	t=0;
 73c:	10 92 00 01 	sts	0x0100, r1

	if (data < 0)
 740:	97 ff       	sbrs	r25, 7
 742:	03 c0       	rjmp	.+6      	; 0x74a <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 744:	8e e4       	ldi	r24, 0x4E	; 78
 746:	89 83       	std	Y+1, r24	; 0x01
 748:	06 c0       	rjmp	.+12     	; 0x756 <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 74a:	ae 01       	movw	r20, r28
 74c:	4f 5f       	subi	r20, 0xFF	; 255
 74e:	5f 4f       	sbci	r21, 0xFF	; 255
 750:	2a e0       	ldi	r18, 0x0A	; 10
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	de d0       	rcall	.+444    	; 0x912 <ltoa>
	}

	locate(location);
 756:	81 2f       	mov	r24, r17
 758:	88 df       	rcall	.-240    	; 0x66a <locate>

	i=0;
	if (d_len == 2)
 75a:	82 e0       	ldi	r24, 0x02	; 2
 75c:	b8 16       	cp	r11, r24
 75e:	11 f0       	breq	.+4      	; 0x764 <lcd_send_floatx10+0x56>
 760:	8a e0       	ldi	r24, 0x0A	; 10
 762:	01 c0       	rjmp	.+2      	; 0x766 <lcd_send_floatx10+0x58>
 764:	84 e6       	ldi	r24, 0x64	; 100
		temp = 100;
	}else{
		temp = 10;	
	}

	if( data >= temp){
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	a0 e0       	ldi	r26, 0x00	; 0
 76a:	b0 e0       	ldi	r27, 0x00	; 0
 76c:	c8 16       	cp	r12, r24
 76e:	d9 06       	cpc	r13, r25
 770:	ea 06       	cpc	r14, r26
 772:	fb 06       	cpc	r15, r27
 774:	0c f4       	brge	.+2      	; 0x778 <lcd_send_floatx10+0x6a>
 776:	47 c0       	rjmp	.+142    	; 0x806 <lcd_send_floatx10+0xf8>
		if (strlen(buffer)>len)
 778:	fe 01       	movw	r30, r28
 77a:	31 96       	adiw	r30, 0x01	; 1
 77c:	df 01       	movw	r26, r30
 77e:	0d 90       	ld	r0, X+
 780:	00 20       	and	r0, r0
 782:	e9 f7       	brne	.-6      	; 0x77e <lcd_send_floatx10+0x70>
 784:	11 97       	sbiw	r26, 0x01	; 1
 786:	ae 1b       	sub	r26, r30
 788:	bf 0b       	sbc	r27, r31
 78a:	8a 2d       	mov	r24, r10
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	8a 17       	cp	r24, r26
 790:	9b 07       	cpc	r25, r27
 792:	10 f4       	brcc	.+4      	; 0x798 <lcd_send_floatx10+0x8a>
 794:	8a 2d       	mov	r24, r10
 796:	01 c0       	rjmp	.+2      	; 0x79a <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 798:	8a 2f       	mov	r24, r26
 79a:	00 e0       	ldi	r16, 0x00	; 0
		}

		for(i=0; i<(int_len-d_len);i++)
 79c:	e8 2e       	mov	r14, r24
 79e:	ff 24       	eor	r15, r15
 7a0:	eb 18       	sub	r14, r11
 7a2:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 7a4:	6e 01       	movw	r12, r28
 7a6:	08 94       	sec
 7a8:	c1 1c       	adc	r12, r1
 7aa:	d1 1c       	adc	r13, r1
 7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <lcd_send_floatx10+0xb4>
 7ae:	ec 0d       	add	r30, r12
 7b0:	fd 1d       	adc	r31, r13
 7b2:	80 81       	ld	r24, Z
 7b4:	10 df       	rcall	.-480    	; 0x5d6 <lcd_send_4b_mode>
			t++;
 7b6:	80 91 00 01 	lds	r24, 0x0100
 7ba:	8f 5f       	subi	r24, 0xFF	; 255
 7bc:	80 93 00 01 	sts	0x0100, r24
		else
		{
			int_len = strlen(buffer);
		}

		for(i=0; i<(int_len-d_len);i++)
 7c0:	0f 5f       	subi	r16, 0xFF	; 255
 7c2:	e0 2f       	mov	r30, r16
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	ee 15       	cp	r30, r14
 7c8:	ff 05       	cpc	r31, r15
 7ca:	8c f3       	brlt	.-30     	; 0x7ae <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 7cc:	8e e2       	ldi	r24, 0x2E	; 46
 7ce:	03 df       	rcall	.-506    	; 0x5d6 <lcd_send_4b_mode>
		t++;
 7d0:	80 91 00 01 	lds	r24, 0x0100
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	80 93 00 01 	sts	0x0100, r24
 7da:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<(d_len);y++)
		{
			lcd_send_4b_mode(buffer[i]);
 7dc:	7e 01       	movw	r14, r28
 7de:	08 94       	sec
 7e0:	e1 1c       	adc	r14, r1
 7e2:	f1 1c       	adc	r15, r1
 7e4:	0b c0       	rjmp	.+22     	; 0x7fc <lcd_send_floatx10+0xee>
 7e6:	f7 01       	movw	r30, r14
 7e8:	e8 0f       	add	r30, r24
 7ea:	f1 1d       	adc	r31, r1
 7ec:	80 81       	ld	r24, Z
 7ee:	f3 de       	rcall	.-538    	; 0x5d6 <lcd_send_4b_mode>
			i++;	
			t++;
 7f0:	80 91 00 01 	lds	r24, 0x0100
 7f4:	8f 5f       	subi	r24, 0xFF	; 255
 7f6:	80 93 00 01 	sts	0x0100, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<(d_len);y++)
 7fa:	1f 5f       	subi	r17, 0xFF	; 255
 7fc:	81 2f       	mov	r24, r17
 7fe:	80 0f       	add	r24, r16
 800:	1b 15       	cp	r17, r11
 802:	88 f3       	brcs	.-30     	; 0x7e6 <lcd_send_floatx10+0xd8>
 804:	34 c0       	rjmp	.+104    	; 0x86e <lcd_send_floatx10+0x160>
			i++;	
			t++;
		}
		
	}else{
		lcd_send_4b_mode('0');
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	e6 de       	rcall	.-564    	; 0x5d6 <lcd_send_4b_mode>
		t++;
 80a:	80 91 00 01 	lds	r24, 0x0100
 80e:	8f 5f       	subi	r24, 0xFF	; 255
 810:	80 93 00 01 	sts	0x0100, r24
		lcd_send_4b_mode('.');
 814:	8e e2       	ldi	r24, 0x2E	; 46
 816:	df de       	rcall	.-578    	; 0x5d6 <lcd_send_4b_mode>
		t++;
 818:	80 91 00 01 	lds	r24, 0x0100
 81c:	8f 5f       	subi	r24, 0xFF	; 255
 81e:	80 93 00 01 	sts	0x0100, r24
 822:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<d_len;y++)
		{
			if(y < strlen(buffer))
 824:	7e 01       	movw	r14, r28
 826:	08 94       	sec
 828:	e1 1c       	adc	r14, r1
 82a:	f1 1c       	adc	r15, r1
 82c:	16 c0       	rjmp	.+44     	; 0x85a <lcd_send_floatx10+0x14c>
 82e:	f7 01       	movw	r30, r14
 830:	01 90       	ld	r0, Z+
 832:	00 20       	and	r0, r0
 834:	e9 f7       	brne	.-6      	; 0x830 <lcd_send_floatx10+0x122>
 836:	31 97       	sbiw	r30, 0x01	; 1
 838:	ee 19       	sub	r30, r14
 83a:	ff 09       	sbc	r31, r15
 83c:	a1 2f       	mov	r26, r17
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	ae 17       	cp	r26, r30
 842:	bf 07       	cpc	r27, r31
 844:	48 f4       	brcc	.+18     	; 0x858 <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);	
 846:	ae 0d       	add	r26, r14
 848:	bf 1d       	adc	r27, r15
 84a:	8c 91       	ld	r24, X
 84c:	c4 de       	rcall	.-632    	; 0x5d6 <lcd_send_4b_mode>
				i++;
				t++;
 84e:	80 91 00 01 	lds	r24, 0x0100
 852:	8f 5f       	subi	r24, 0xFF	; 255
 854:	80 93 00 01 	sts	0x0100, r24
	}else{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<d_len;y++)
 858:	1f 5f       	subi	r17, 0xFF	; 255
 85a:	1b 15       	cp	r17, r11
 85c:	40 f3       	brcs	.-48     	; 0x82e <lcd_send_floatx10+0x120>
 85e:	07 c0       	rjmp	.+14     	; 0x86e <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
	{
		lcd_send_4b_mode(' ');
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	b9 de       	rcall	.-654    	; 0x5d6 <lcd_send_4b_mode>
		t++;
 864:	80 91 00 01 	lds	r24, 0x0100
 868:	8f 5f       	subi	r24, 0xFF	; 255
 86a:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
 86e:	80 91 00 01 	lds	r24, 0x0100
 872:	8a 15       	cp	r24, r10
 874:	a8 f3       	brcs	.-22     	; 0x860 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 876:	60 96       	adiw	r28, 0x10	; 16
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	f8 94       	cli
 87c:	de bf       	out	0x3e, r29	; 62
 87e:	0f be       	out	0x3f, r0	; 63
 880:	cd bf       	out	0x3d, r28	; 61
 882:	cf 91       	pop	r28
 884:	df 91       	pop	r29
 886:	1f 91       	pop	r17
 888:	0f 91       	pop	r16
 88a:	ff 90       	pop	r15
 88c:	ef 90       	pop	r14
 88e:	df 90       	pop	r13
 890:	cf 90       	pop	r12
 892:	bf 90       	pop	r11
 894:	af 90       	pop	r10
 896:	08 95       	ret

00000898 <__divmodsi4>:
 898:	97 fb       	bst	r25, 7
 89a:	09 2e       	mov	r0, r25
 89c:	05 26       	eor	r0, r21
 89e:	0e d0       	rcall	.+28     	; 0x8bc <__divmodsi4_neg1>
 8a0:	57 fd       	sbrc	r21, 7
 8a2:	04 d0       	rcall	.+8      	; 0x8ac <__divmodsi4_neg2>
 8a4:	14 d0       	rcall	.+40     	; 0x8ce <__udivmodsi4>
 8a6:	0a d0       	rcall	.+20     	; 0x8bc <__divmodsi4_neg1>
 8a8:	00 1c       	adc	r0, r0
 8aa:	38 f4       	brcc	.+14     	; 0x8ba <__divmodsi4_exit>

000008ac <__divmodsi4_neg2>:
 8ac:	50 95       	com	r21
 8ae:	40 95       	com	r20
 8b0:	30 95       	com	r19
 8b2:	21 95       	neg	r18
 8b4:	3f 4f       	sbci	r19, 0xFF	; 255
 8b6:	4f 4f       	sbci	r20, 0xFF	; 255
 8b8:	5f 4f       	sbci	r21, 0xFF	; 255

000008ba <__divmodsi4_exit>:
 8ba:	08 95       	ret

000008bc <__divmodsi4_neg1>:
 8bc:	f6 f7       	brtc	.-4      	; 0x8ba <__divmodsi4_exit>
 8be:	90 95       	com	r25
 8c0:	80 95       	com	r24
 8c2:	70 95       	com	r23
 8c4:	61 95       	neg	r22
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	08 95       	ret

000008ce <__udivmodsi4>:
 8ce:	a1 e2       	ldi	r26, 0x21	; 33
 8d0:	1a 2e       	mov	r1, r26
 8d2:	aa 1b       	sub	r26, r26
 8d4:	bb 1b       	sub	r27, r27
 8d6:	fd 01       	movw	r30, r26
 8d8:	0d c0       	rjmp	.+26     	; 0x8f4 <__udivmodsi4_ep>

000008da <__udivmodsi4_loop>:
 8da:	aa 1f       	adc	r26, r26
 8dc:	bb 1f       	adc	r27, r27
 8de:	ee 1f       	adc	r30, r30
 8e0:	ff 1f       	adc	r31, r31
 8e2:	a2 17       	cp	r26, r18
 8e4:	b3 07       	cpc	r27, r19
 8e6:	e4 07       	cpc	r30, r20
 8e8:	f5 07       	cpc	r31, r21
 8ea:	20 f0       	brcs	.+8      	; 0x8f4 <__udivmodsi4_ep>
 8ec:	a2 1b       	sub	r26, r18
 8ee:	b3 0b       	sbc	r27, r19
 8f0:	e4 0b       	sbc	r30, r20
 8f2:	f5 0b       	sbc	r31, r21

000008f4 <__udivmodsi4_ep>:
 8f4:	66 1f       	adc	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	88 1f       	adc	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	1a 94       	dec	r1
 8fe:	69 f7       	brne	.-38     	; 0x8da <__udivmodsi4_loop>
 900:	60 95       	com	r22
 902:	70 95       	com	r23
 904:	80 95       	com	r24
 906:	90 95       	com	r25
 908:	9b 01       	movw	r18, r22
 90a:	ac 01       	movw	r20, r24
 90c:	bd 01       	movw	r22, r26
 90e:	cf 01       	movw	r24, r30
 910:	08 95       	ret

00000912 <ltoa>:
 912:	fa 01       	movw	r30, r20
 914:	cf 93       	push	r28
 916:	ff 93       	push	r31
 918:	ef 93       	push	r30
 91a:	22 30       	cpi	r18, 0x02	; 2
 91c:	3c f1       	brlt	.+78     	; 0x96c <ltoa+0x5a>
 91e:	25 32       	cpi	r18, 0x25	; 37
 920:	2c f5       	brge	.+74     	; 0x96c <ltoa+0x5a>
 922:	c2 2f       	mov	r28, r18
 924:	e8 94       	clt
 926:	ca 30       	cpi	r28, 0x0A	; 10
 928:	49 f4       	brne	.+18     	; 0x93c <ltoa+0x2a>
 92a:	97 fb       	bst	r25, 7
 92c:	3e f4       	brtc	.+14     	; 0x93c <ltoa+0x2a>
 92e:	90 95       	com	r25
 930:	80 95       	com	r24
 932:	70 95       	com	r23
 934:	61 95       	neg	r22
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	2c 2f       	mov	r18, r28
 93e:	33 27       	eor	r19, r19
 940:	44 27       	eor	r20, r20
 942:	55 27       	eor	r21, r21
 944:	ff 93       	push	r31
 946:	ef 93       	push	r30
 948:	c2 df       	rcall	.-124    	; 0x8ce <__udivmodsi4>
 94a:	ef 91       	pop	r30
 94c:	ff 91       	pop	r31
 94e:	60 5d       	subi	r22, 0xD0	; 208
 950:	6a 33       	cpi	r22, 0x3A	; 58
 952:	0c f0       	brlt	.+2      	; 0x956 <ltoa+0x44>
 954:	69 5d       	subi	r22, 0xD9	; 217
 956:	61 93       	st	Z+, r22
 958:	b9 01       	movw	r22, r18
 95a:	ca 01       	movw	r24, r20
 95c:	60 50       	subi	r22, 0x00	; 0
 95e:	70 40       	sbci	r23, 0x00	; 0
 960:	80 40       	sbci	r24, 0x00	; 0
 962:	90 40       	sbci	r25, 0x00	; 0
 964:	59 f7       	brne	.-42     	; 0x93c <ltoa+0x2a>
 966:	16 f4       	brtc	.+4      	; 0x96c <ltoa+0x5a>
 968:	cd e2       	ldi	r28, 0x2D	; 45
 96a:	c1 93       	st	Z+, r28
 96c:	10 82       	st	Z, r1
 96e:	8f 91       	pop	r24
 970:	9f 91       	pop	r25
 972:	cf 91       	pop	r28
 974:	00 c0       	rjmp	.+0      	; 0x976 <strrev>

00000976 <strrev>:
 976:	dc 01       	movw	r26, r24
 978:	fc 01       	movw	r30, r24
 97a:	67 2f       	mov	r22, r23
 97c:	71 91       	ld	r23, Z+
 97e:	77 23       	and	r23, r23
 980:	e1 f7       	brne	.-8      	; 0x97a <strrev+0x4>
 982:	32 97       	sbiw	r30, 0x02	; 2
 984:	04 c0       	rjmp	.+8      	; 0x98e <strrev+0x18>
 986:	7c 91       	ld	r23, X
 988:	6d 93       	st	X+, r22
 98a:	70 83       	st	Z, r23
 98c:	62 91       	ld	r22, -Z
 98e:	ae 17       	cp	r26, r30
 990:	bf 07       	cpc	r27, r31
 992:	c8 f3       	brcs	.-14     	; 0x986 <strrev+0x10>
 994:	08 95       	ret

00000996 <_exit>:
 996:	f8 94       	cli

00000998 <__stop_program>:
 998:	ff cf       	rjmp	.-2      	; 0x998 <__stop_program>
