
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000005d  00800100  00800100  000009fe  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000003c2  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d50  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000421  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008de  00000000  00000000  00001fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00002890  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000309  00000000  00000000  000029e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000040c  00000000  00000000  00002ce9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	b0 c1       	rjmp	.+864    	; 0x37c <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	b9 c1       	rjmp	.+882    	; 0x39e <__vector_21>
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_clear_bss>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	ad 35       	cpi	r26, 0x5D	; 93
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	2d d0       	rcall	.+90     	; 0xd8 <main>
  7e:	83 c4       	rjmp	.+2310   	; 0x986 <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  82:	68 17       	cp	r22, r24
  84:	10 f4       	brcc	.+4      	; 0x8a <delta+0x8>
	{
		return (v1 - v2);
  86:	86 1b       	sub	r24, r22
  88:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  8a:	68 1b       	sub	r22, r24
  8c:	86 2f       	mov	r24, r22
	}
}
  8e:	08 95       	ret

00000090 <switch_sensor>:
void switch_sensor()
{
	if (sensor_id == 1)
  90:	80 91 5c 01 	lds	r24, 0x015C
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	61 f4       	brne	.+24     	; 0xb0 <switch_sensor+0x20>
	{
		sensor_id = 0;
  98:	10 92 5c 01 	sts	0x015C, r1
		locate(15);
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	dd d2       	rcall	.+1466   	; 0x65a <locate>
		lcd_send_4b_mode((uchar)'1');
  a0:	81 e3       	ldi	r24, 0x31	; 49
  a2:	91 d2       	rcall	.+1314   	; 0x5c6 <lcd_send_4b_mode>
		locate(79);
  a4:	8f e4       	ldi	r24, 0x4F	; 79
  a6:	d9 d2       	rcall	.+1458   	; 0x65a <locate>
		lcd_send_4b_mode((uchar)'_');
  a8:	8f e5       	ldi	r24, 0x5F	; 95
  aa:	8d d2       	rcall	.+1306   	; 0x5c6 <lcd_send_4b_mode>
		ADMUX = 2;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <switch_sensor+0x38>
	}
	else
	{
		sensor_id = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 5c 01 	sts	0x015C, r24
		locate(15);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	d0 d2       	rcall	.+1440   	; 0x65a <locate>
		lcd_send_4b_mode((uchar)'_');
  ba:	8f e5       	ldi	r24, 0x5F	; 95
  bc:	84 d2       	rcall	.+1288   	; 0x5c6 <lcd_send_4b_mode>
		locate(79);
  be:	8f e4       	ldi	r24, 0x4F	; 79
  c0:	cc d2       	rcall	.+1432   	; 0x65a <locate>
		lcd_send_4b_mode((uchar)'2');
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	80 d2       	rcall	.+1280   	; 0x5c6 <lcd_send_4b_mode>
		ADMUX = 3;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	80 93 7c 00 	sts	0x007C, r24
	}
	measurement_started = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 0a 01 	sts	0x010A, r24
	measurement_done = 0;
  d2:	10 92 57 01 	sts	0x0157, r1
}
  d6:	08 95       	ret

000000d8 <main>:

int main()
{
  d8:	af 92       	push	r10
  da:	bf 92       	push	r11
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	df 93       	push	r29
  ea:	cf 93       	push	r28
  ec:	00 d0       	rcall	.+0      	; 0xee <main+0x16>
  ee:	00 d0       	rcall	.+0      	; 0xf0 <main+0x18>
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	sensor_id = 0;
  f4:	10 92 5c 01 	sts	0x015C, r1
	long time_count;

	uchar i, j;
	char animation[4];
	animation[0] = 0xD9;
  f8:	89 ed       	ldi	r24, 0xD9	; 217
  fa:	89 83       	std	Y+1, r24	; 0x01
	animation[1] = 0xC9;
  fc:	89 ec       	ldi	r24, 0xC9	; 201
  fe:	8a 83       	std	Y+2, r24	; 0x02
	animation[2] = 0xDA;
 100:	8a ed       	ldi	r24, 0xDA	; 218
 102:	8b 83       	std	Y+3, r24	; 0x03
	animation[3] = 0xC8;
 104:	88 ec       	ldi	r24, 0xC8	; 200
 106:	8c 83       	std	Y+4, r24	; 0x04

	setup_timers();
 108:	21 d1       	rcall	.+578    	; 0x34c <setup_timers>

	setup_io();
 10a:	30 d1       	rcall	.+608    	; 0x36c <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
 10c:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
 10e:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
 110:	92 d2       	rcall	.+1316   	; 0x636 <lcd_ini_sequence>
	LED_ON
 112:	57 9a       	sbi	0x0a, 7	; 10
 114:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
 116:	3c 9a       	sbi	0x07, 4	; 7
 118:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
 11a:	55 9a       	sbi	0x0a, 5	; 10
	sei();
 11c:	78 94       	sei
	format(line1, line2);
 11e:	84 e3       	ldi	r24, 0x34	; 52
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	66 e4       	ldi	r22, 0x46	; 70
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	c0 d2       	rcall	.+1408   	; 0x6a8 <format>
 128:	eb e0       	ldi	r30, 0x0B	; 11
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	df 01       	movw	r26, r30
 12e:	5d 96       	adiw	r26, 0x1d	; 29

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
		gl_set[j].ain_th_low = 20;
 130:	94 e1       	ldi	r25, 0x14	; 20
		gl_set[j].ain_th_high = 45;
 132:	8d e2       	ldi	r24, 0x2D	; 45
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
 134:	10 82       	st	Z, r1
 136:	11 82       	std	Z+1, r1	; 0x01
 138:	12 82       	std	Z+2, r1	; 0x02
 13a:	13 82       	std	Z+3, r1	; 0x03
		gl_set[j].ain_th_low = 20;
 13c:	9c 93       	st	X, r25
		gl_set[j].ain_th_high = 45;
 13e:	86 8f       	std	Z+30, r24	; 0x1e

		for (i = 0; i < MAX_NUM_MEAS; i++)
		{
			gl_set[j].rpm_his[i] = 0;
 140:	14 82       	std	Z+4, r1	; 0x04
 142:	15 82       	std	Z+5, r1	; 0x05
 144:	16 82       	std	Z+6, r1	; 0x06
 146:	17 82       	std	Z+7, r1	; 0x07
 148:	10 86       	std	Z+8, r1	; 0x08
 14a:	11 86       	std	Z+9, r1	; 0x09
 14c:	12 86       	std	Z+10, r1	; 0x0a
 14e:	13 86       	std	Z+11, r1	; 0x0b
 150:	14 86       	std	Z+12, r1	; 0x0c
 152:	15 86       	std	Z+13, r1	; 0x0d
 154:	16 86       	std	Z+14, r1	; 0x0e
 156:	17 86       	std	Z+15, r1	; 0x0f
 158:	10 8a       	std	Z+16, r1	; 0x10
 15a:	11 8a       	std	Z+17, r1	; 0x11
 15c:	12 8a       	std	Z+18, r1	; 0x12
 15e:	13 8a       	std	Z+19, r1	; 0x13
 160:	14 8a       	std	Z+20, r1	; 0x14
 162:	15 8a       	std	Z+21, r1	; 0x15
 164:	16 8a       	std	Z+22, r1	; 0x16
 166:	17 8a       	std	Z+23, r1	; 0x17
		}
		gl_set[j].last_rpm_indx = 0;
 168:	14 8e       	std	Z+28, r1	; 0x1c
		gl_set[j].anim_counter = 0;
 16a:	17 96       	adiw	r26, 0x07	; 7
 16c:	1c 92       	st	X, r1
 16e:	17 97       	sbiw	r26, 0x07	; 7
		gl_set[j].anim_counter_old = 0;
 170:	18 96       	adiw	r26, 0x08	; 8
 172:	1c 92       	st	X, r1
 174:	18 97       	sbiw	r26, 0x08	; 8
 176:	b6 96       	adiw	r30, 0x26	; 38
 178:	96 96       	adiw	r26, 0x26	; 38
	LCD_BL_ON
	LCD_CONTRAST_ON
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	e7 35       	cpi	r30, 0x57	; 87
 17e:	f2 07       	cpc	r31, r18
 180:	c9 f6       	brne	.-78     	; 0x134 <main+0x5c>
		gl_set[j].last_rpm_indx = 0;
		gl_set[j].anim_counter = 0;
		gl_set[j].anim_counter_old = 0;
	}

	LED_OFF;
 182:	5f 98       	cbi	0x0b, 7	; 11
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 184:	8d ee       	ldi	r24, 0xED	; 237
 186:	80 93 7a 00 	sts	0x007A, r24

	LED_ON;
 18a:	57 9a       	sbi	0x0a, 7	; 10
 18c:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_CONTRAST = 0;
 18e:	18 bc       	out	0x28, r1	; 40

	switch_sensor();
 190:	7f df       	rcall	.-258    	; 0x90 <switch_sensor>
	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 192:	76 e2       	ldi	r23, 0x26	; 38
 194:	c7 2e       	mov	r12, r23
 196:	d1 2c       	mov	r13, r1
			measurement_done = 1;
 198:	ee 24       	eor	r14, r14
 19a:	e3 94       	inc	r14
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
			locate(14);
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 19c:	5e 01       	movw	r10, r28
 19e:	08 94       	sec
 1a0:	a1 1c       	adc	r10, r1
 1a2:	b1 1c       	adc	r11, r1

	switch_sensor();
	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
 1a4:	80 91 58 01 	lds	r24, 0x0158
 1a8:	90 91 59 01 	lds	r25, 0x0159
 1ac:	a0 e0       	ldi	r26, 0x00	; 0
 1ae:	b0 e0       	ldi	r27, 0x00	; 0
 1b0:	dc 01       	movw	r26, r24
 1b2:	99 27       	eor	r25, r25
 1b4:	88 27       	eor	r24, r24
 1b6:	20 91 5a 01 	lds	r18, 0x015A
 1ba:	30 91 5b 01 	lds	r19, 0x015B
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	82 0f       	add	r24, r18
 1c4:	93 1f       	adc	r25, r19
 1c6:	a4 1f       	adc	r26, r20
 1c8:	b5 1f       	adc	r27, r21
 1ca:	85 5b       	subi	r24, 0xB5	; 181
 1cc:	94 4c       	sbci	r25, 0xC4	; 196
 1ce:	a4 40       	sbci	r26, 0x04	; 4
 1d0:	b0 40       	sbci	r27, 0x00	; 0
 1d2:	24 f1       	brlt	.+72     	; 0x21c <main+0x144>
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 1d4:	80 91 5c 01 	lds	r24, 0x015C
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	8c 9d       	mul	r24, r12
 1dc:	90 01       	movw	r18, r0
 1de:	8d 9d       	mul	r24, r13
 1e0:	30 0d       	add	r19, r0
 1e2:	9c 9d       	mul	r25, r12
 1e4:	30 0d       	add	r19, r0
 1e6:	11 24       	eor	r1, r1
 1e8:	d9 01       	movw	r26, r18
 1ea:	a5 5f       	subi	r26, 0xF5	; 245
 1ec:	be 4f       	sbci	r27, 0xFE	; 254
 1ee:	5c 96       	adiw	r26, 0x1c	; 28
 1f0:	8c 91       	ld	r24, X
 1f2:	5c 97       	sbiw	r26, 0x1c	; 28
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	31 96       	adiw	r30, 0x01	; 1
 1fa:	ee 0f       	add	r30, r30
 1fc:	ff 1f       	adc	r31, r31
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	e2 0f       	add	r30, r18
 204:	f3 1f       	adc	r31, r19
 206:	e5 5f       	subi	r30, 0xF5	; 245
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	10 82       	st	Z, r1
 20c:	11 82       	std	Z+1, r1	; 0x01
 20e:	12 82       	std	Z+2, r1	; 0x02
 210:	13 82       	std	Z+3, r1	; 0x03
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	5c 96       	adiw	r26, 0x1c	; 28
 216:	8c 93       	st	X, r24
			measurement_done = 1;
 218:	e0 92 57 01 	sts	0x0157, r14
		}
		if (measurement_done)
 21c:	80 91 57 01 	lds	r24, 0x0157
 220:	88 23       	and	r24, r24
 222:	09 f4       	brne	.+2      	; 0x226 <main+0x14e>
 224:	6f c0       	rjmp	.+222    	; 0x304 <__stack+0x5>
		{
			gl_set[sensor_id].rpm_avg = gl_set[sensor_id].rpm_his[0];
 226:	80 91 5c 01 	lds	r24, 0x015C
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	8c 9d       	mul	r24, r12
 22e:	f0 01       	movw	r30, r0
 230:	8d 9d       	mul	r24, r13
 232:	f0 0d       	add	r31, r0
 234:	9c 9d       	mul	r25, r12
 236:	f0 0d       	add	r31, r0
 238:	11 24       	eor	r1, r1
 23a:	e5 5f       	subi	r30, 0xF5	; 245
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	84 81       	ldd	r24, Z+4	; 0x04
 240:	95 81       	ldd	r25, Z+5	; 0x05
 242:	a6 81       	ldd	r26, Z+6	; 0x06
 244:	b7 81       	ldd	r27, Z+7	; 0x07
 246:	80 83       	st	Z, r24
 248:	91 83       	std	Z+1, r25	; 0x01
 24a:	a2 83       	std	Z+2, r26	; 0x02
 24c:	b3 83       	std	Z+3, r27	; 0x03
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
			for (i = 1; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
 252:	f0 90 5c 01 	lds	r15, 0x015C
 256:	8f 2d       	mov	r24, r15
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	fc 01       	movw	r30, r24
 25c:	ec 9d       	mul	r30, r12
 25e:	c0 01       	movw	r24, r0
 260:	ed 9d       	mul	r30, r13
 262:	90 0d       	add	r25, r0
 264:	fc 9d       	mul	r31, r12
 266:	90 0d       	add	r25, r0
 268:	11 24       	eor	r1, r1
 26a:	8c 01       	movw	r16, r24
 26c:	05 5f       	subi	r16, 0xF5	; 245
 26e:	1e 4f       	sbci	r17, 0xFE	; 254
 270:	2f 5f       	subi	r18, 0xFF	; 255
 272:	3f 4f       	sbci	r19, 0xFF	; 255
 274:	f9 01       	movw	r30, r18
 276:	ee 0f       	add	r30, r30
 278:	ff 1f       	adc	r31, r31
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e8 0f       	add	r30, r24
 280:	f9 1f       	adc	r31, r25
 282:	e5 5f       	subi	r30, 0xF5	; 245
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	40 81       	ld	r20, Z
 288:	51 81       	ldd	r21, Z+1	; 0x01
 28a:	62 81       	ldd	r22, Z+2	; 0x02
 28c:	73 81       	ldd	r23, Z+3	; 0x03
 28e:	f8 01       	movw	r30, r16
 290:	80 81       	ld	r24, Z
 292:	91 81       	ldd	r25, Z+1	; 0x01
 294:	a2 81       	ldd	r26, Z+2	; 0x02
 296:	b3 81       	ldd	r27, Z+3	; 0x03
 298:	48 0f       	add	r20, r24
 29a:	59 1f       	adc	r21, r25
 29c:	6a 1f       	adc	r22, r26
 29e:	7b 1f       	adc	r23, r27
 2a0:	40 83       	st	Z, r20
 2a2:	51 83       	std	Z+1, r21	; 0x01
 2a4:	62 83       	std	Z+2, r22	; 0x02
 2a6:	73 83       	std	Z+3, r23	; 0x03
			measurement_done = 1;
		}
		if (measurement_done)
		{
			gl_set[sensor_id].rpm_avg = gl_set[sensor_id].rpm_his[0];
			for (i = 1; i < MAX_NUM_MEAS; i++)
 2a8:	25 30       	cpi	r18, 0x05	; 5
 2aa:	31 05       	cpc	r19, r1
 2ac:	91 f6       	brne	.-92     	; 0x252 <main+0x17a>
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
			}
			gl_set[sensor_id].rpm_avg /= MAX_NUM_MEAS;
 2ae:	cb 01       	movw	r24, r22
 2b0:	ba 01       	movw	r22, r20
 2b2:	25 e0       	ldi	r18, 0x05	; 5
 2b4:	30 e0       	ldi	r19, 0x00	; 0
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	e6 d2       	rcall	.+1484   	; 0x888 <__divmodsi4>
 2bc:	f8 01       	movw	r30, r16
 2be:	20 83       	st	Z, r18
 2c0:	31 83       	std	Z+1, r19	; 0x01
 2c2:	42 83       	std	Z+2, r20	; 0x02
 2c4:	53 83       	std	Z+3, r21	; 0x03
			switch (sensor_id)
 2c6:	ff 20       	and	r15, r15
 2c8:	21 f0       	breq	.+8      	; 0x2d2 <main+0x1fa>
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	ff 16       	cp	r15, r31
 2ce:	c9 f4       	brne	.+50     	; 0x302 <__stack+0x3>
 2d0:	0c c0       	rjmp	.+24     	; 0x2ea <main+0x212>
			{
			case 0:
				lcd_send_floatx10(gl_set[0].rpm_avg, 5, 7, 1); //rpm_x10
 2d2:	60 91 0b 01 	lds	r22, 0x010B
 2d6:	70 91 0c 01 	lds	r23, 0x010C
 2da:	80 91 0d 01 	lds	r24, 0x010D
 2de:	90 91 0e 01 	lds	r25, 0x010E
 2e2:	45 e0       	ldi	r20, 0x05	; 5
 2e4:	27 e0       	ldi	r18, 0x07	; 7
 2e6:	01 e0       	ldi	r16, 0x01	; 1
 2e8:	0a d2       	rcall	.+1044   	; 0x6fe <lcd_send_floatx10>
			case 1:
				lcd_send_floatx10(gl_set[1].rpm_avg, 69, 7, 1); //rpm_x10
 2ea:	60 91 31 01 	lds	r22, 0x0131
 2ee:	70 91 32 01 	lds	r23, 0x0132
 2f2:	80 91 33 01 	lds	r24, 0x0133
 2f6:	90 91 34 01 	lds	r25, 0x0134
 2fa:	45 e4       	ldi	r20, 0x45	; 69
 2fc:	27 e0       	ldi	r18, 0x07	; 7
 2fe:	01 e0       	ldi	r16, 0x01	; 1
 300:	fe d1       	rcall	.+1020   	; 0x6fe <lcd_send_floatx10>
			}
			switch_sensor();
 302:	c6 de       	rcall	.-628    	; 0x90 <switch_sensor>
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
 304:	90 91 2f 01 	lds	r25, 0x012F
 308:	80 91 30 01 	lds	r24, 0x0130
 30c:	98 17       	cp	r25, r24
 30e:	59 f0       	breq	.+22     	; 0x326 <__stack+0x27>
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
 310:	90 93 30 01 	sts	0x0130, r25
			locate(14);
 314:	8e e0       	ldi	r24, 0x0E	; 14
 316:	a1 d1       	rcall	.+834    	; 0x65a <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 318:	80 91 2f 01 	lds	r24, 0x012F
 31c:	f5 01       	movw	r30, r10
 31e:	e8 0f       	add	r30, r24
 320:	f1 1d       	adc	r31, r1
 322:	80 81       	ld	r24, Z
 324:	50 d1       	rcall	.+672    	; 0x5c6 <lcd_send_4b_mode>
		}
		if (gl_set[1].anim_counter != gl_set[1].anim_counter_old)
 326:	90 91 55 01 	lds	r25, 0x0155
 32a:	80 91 56 01 	lds	r24, 0x0156
 32e:	98 17       	cp	r25, r24
 330:	09 f4       	brne	.+2      	; 0x334 <__stack+0x35>
 332:	38 cf       	rjmp	.-400    	; 0x1a4 <main+0xcc>
		{
			gl_set[1].anim_counter_old = gl_set[1].anim_counter;
 334:	90 93 56 01 	sts	0x0156, r25
			locate(78);
 338:	8e e4       	ldi	r24, 0x4E	; 78
 33a:	8f d1       	rcall	.+798    	; 0x65a <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);			
 33c:	80 91 2f 01 	lds	r24, 0x012F
 340:	f5 01       	movw	r30, r10
 342:	e8 0f       	add	r30, r24
 344:	f1 1d       	adc	r31, r1
 346:	80 81       	ld	r24, Z
 348:	3e d1       	rcall	.+636    	; 0x5c6 <lcd_send_4b_mode>
 34a:	2c cf       	rjmp	.-424    	; 0x1a4 <main+0xcc>

0000034c <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1<<COM1B1)|(1<<WGM01)|(1<<WGM00);
 34c:	83 e2       	ldi	r24, 0x23	; 35
 34e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00); 
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25; 
 354:	89 e1       	ldi	r24, 0x19	; 25
 356:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0<<OCIE0A);
 358:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 35c:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);
 366:	90 93 6f 00 	sts	0x006F, r25


}
 36a:	08 95       	ret

0000036c <setup_io>:


void setup_io()
{
	DIDR0 = (1<<ADC2D) | (1<<ADC3D); //disable digital input on ADC2 and ADC3
 36c:	8c e0       	ldi	r24, 0x0C	; 12
 36e:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1<<PORTB1); //set push button as input
 372:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); //activte the pull up resistor for the push button
 374:	29 9a       	sbi	0x05, 1	; 5
	
	LCD_EN_PORT |= _BV(LCD_EN);
 376:	45 9a       	sbi	0x08, 5	; 8
  LCD_RS_PORT &= ~(_BV(LCD_RS));	
 378:	5c 98       	cbi	0x0b, 4	; 11
}
 37a:	08 95       	ret

0000037c <__vector_13>:
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
	}
}

ISR(TIMER1_OVF_vect)
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	8f 93       	push	r24
	//LED_ON;
	post_scaller++;
 388:	80 91 09 01 	lds	r24, 0x0109
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	80 93 09 01 	sts	0x0109, r24
}
 392:	8f 91       	pop	r24
 394:	0f 90       	pop	r0
 396:	0f be       	out	0x3f, r0	; 63
 398:	0f 90       	pop	r0
 39a:	1f 90       	pop	r1
 39c:	18 95       	reti

0000039e <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	af 92       	push	r10
 3aa:	bf 92       	push	r11
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	2f 93       	push	r18
 3ba:	3f 93       	push	r19
 3bc:	4f 93       	push	r20
 3be:	5f 93       	push	r21
 3c0:	6f 93       	push	r22
 3c2:	7f 93       	push	r23
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
 3c8:	af 93       	push	r26
 3ca:	bf 93       	push	r27
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	ef 93       	push	r30
 3d2:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC >> 2;
 3d4:	80 91 5c 01 	lds	r24, 0x015C
 3d8:	c8 2e       	mov	r12, r24
 3da:	dd 24       	eor	r13, r13
 3dc:	20 91 78 00 	lds	r18, 0x0078
 3e0:	30 91 79 00 	lds	r19, 0x0079
 3e4:	36 95       	lsr	r19
 3e6:	27 95       	ror	r18
 3e8:	36 95       	lsr	r19
 3ea:	27 95       	ror	r18
 3ec:	86 e2       	ldi	r24, 0x26	; 38
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	c8 9e       	mul	r12, r24
 3f2:	50 01       	movw	r10, r0
 3f4:	c9 9e       	mul	r12, r25
 3f6:	b0 0c       	add	r11, r0
 3f8:	d8 9e       	mul	r13, r24
 3fa:	b0 0c       	add	r11, r0
 3fc:	11 24       	eor	r1, r1
 3fe:	e5 01       	movw	r28, r10
 400:	c5 5f       	subi	r28, 0xF5	; 245
 402:	de 4f       	sbci	r29, 0xFE	; 254
 404:	2f 8f       	std	Y+31, r18	; 0x1f
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state == 0)) //a cycle is detected
 406:	8e 8d       	ldd	r24, Y+30	; 0x1e
 408:	82 17       	cp	r24, r18
 40a:	08 f0       	brcs	.+2      	; 0x40e <__vector_21+0x70>
 40c:	83 c0       	rjmp	.+262    	; 0x514 <__vector_21+0x176>
 40e:	88 a1       	ldd	r24, Y+32	; 0x20
 410:	88 23       	and	r24, r24
 412:	09 f0       	breq	.+2      	; 0x416 <__vector_21+0x78>
 414:	7f c0       	rjmp	.+254    	; 0x514 <__vector_21+0x176>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	88 a3       	std	Y+32, r24	; 0x20
		t_capture = TCNT1;
 41a:	60 91 84 00 	lds	r22, 0x0084
 41e:	70 91 85 00 	lds	r23, 0x0085
 422:	70 93 5b 01 	sts	0x015B, r23
 426:	60 93 5a 01 	sts	0x015A, r22
		TCNT1 = 0;
 42a:	10 92 85 00 	sts	0x0085, r1
 42e:	10 92 84 00 	sts	0x0084, r1
		t_postscale = post_scaller;
 432:	80 91 09 01 	lds	r24, 0x0109
 436:	28 2f       	mov	r18, r24
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	30 93 59 01 	sts	0x0159, r19
 43e:	20 93 58 01 	sts	0x0158, r18
		post_scaller = 0;
 442:	10 92 09 01 	sts	0x0109, r1
		if (measurement_started)
 446:	80 91 0a 01 	lds	r24, 0x010A
 44a:	88 23       	and	r24, r24
 44c:	19 f0       	breq	.+6      	; 0x454 <__vector_21+0xb6>
		{
			measurement_started = 0;
 44e:	10 92 0a 01 	sts	0x010A, r1
 452:	4f c0       	rjmp	.+158    	; 0x4f2 <__vector_21+0x154>
		}
		else if (!measurement_done)
 454:	80 91 57 01 	lds	r24, 0x0157
 458:	88 23       	and	r24, r24
 45a:	09 f0       	breq	.+2      	; 0x45e <__vector_21+0xc0>
 45c:	4a c0       	rjmp	.+148    	; 0x4f2 <__vector_21+0x154>
		{
			time_count = t_capture + (t_postscale * 65536);
 45e:	c9 01       	movw	r24, r18
 460:	a0 e0       	ldi	r26, 0x00	; 0
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	ac 01       	movw	r20, r24
 466:	33 27       	eor	r19, r19
 468:	22 27       	eor	r18, r18
 46a:	cb 01       	movw	r24, r22
 46c:	a0 e0       	ldi	r26, 0x00	; 0
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	28 0f       	add	r18, r24
 472:	39 1f       	adc	r19, r25
 474:	4a 1f       	adc	r20, r26
 476:	5b 1f       	adc	r21, r27
 478:	20 93 01 01 	sts	0x0101, r18
 47c:	30 93 02 01 	sts	0x0102, r19
 480:	40 93 03 01 	sts	0x0103, r20
 484:	50 93 04 01 	sts	0x0104, r21
			if (time_count)
 488:	21 15       	cp	r18, r1
 48a:	31 05       	cpc	r19, r1
 48c:	41 05       	cpc	r20, r1
 48e:	51 05       	cpc	r21, r1
 490:	69 f1       	breq	.+90     	; 0x4ec <__vector_21+0x14e>
			{
				rpm_x10 = 187500000 / time_count;
 492:	60 ee       	ldi	r22, 0xE0	; 224
 494:	75 e0       	ldi	r23, 0x05	; 5
 496:	8d e2       	ldi	r24, 0x2D	; 45
 498:	9b e0       	ldi	r25, 0x0B	; 11
 49a:	f6 d1       	rcall	.+1004   	; 0x888 <__divmodsi4>
 49c:	79 01       	movw	r14, r18
 49e:	8a 01       	movw	r16, r20
 4a0:	e0 92 05 01 	sts	0x0105, r14
 4a4:	f0 92 06 01 	sts	0x0106, r15
 4a8:	00 93 07 01 	sts	0x0107, r16
 4ac:	10 93 08 01 	sts	0x0108, r17
				if (rpm_x10 < 45000)
 4b0:	88 ec       	ldi	r24, 0xC8	; 200
 4b2:	e8 16       	cp	r14, r24
 4b4:	8f ea       	ldi	r24, 0xAF	; 175
 4b6:	f8 06       	cpc	r15, r24
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	08 07       	cpc	r16, r24
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	18 07       	cpc	r17, r24
 4c0:	ac f4       	brge	.+42     	; 0x4ec <__vector_21+0x14e>
					{
						gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = rpm_x10;
 4c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4c4:	e8 2f       	mov	r30, r24
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	31 96       	adiw	r30, 0x01	; 1
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	ea 0d       	add	r30, r10
 4d4:	fb 1d       	adc	r31, r11
 4d6:	e5 5f       	subi	r30, 0xF5	; 245
 4d8:	fe 4f       	sbci	r31, 0xFE	; 254
 4da:	e0 82       	st	Z, r14
 4dc:	f1 82       	std	Z+1, r15	; 0x01
 4de:	02 83       	std	Z+2, r16	; 0x02
 4e0:	13 83       	std	Z+3, r17	; 0x03
 4e2:	8f 5f       	subi	r24, 0xFF	; 255
 4e4:	8c 8f       	std	Y+28, r24	; 0x1c
						if(gl_set[sensor_id].last_rpm_indx >= MAX_NUM_MEAS)
 4e6:	85 30       	cpi	r24, 0x05	; 5
 4e8:	08 f0       	brcs	.+2      	; 0x4ec <__vector_21+0x14e>
						{
							gl_set[sensor_id].last_rpm_indx = 0;
 4ea:	1c 8e       	std	Y+28, r1	; 0x1c
						}
					}
			}
			measurement_done = 1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 57 01 	sts	0x0157, r24
		}
		gl_set[sensor_id].anim_counter++;
 4f2:	86 e2       	ldi	r24, 0x26	; 38
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	c8 9e       	mul	r12, r24
 4f8:	f0 01       	movw	r30, r0
 4fa:	c9 9e       	mul	r12, r25
 4fc:	f0 0d       	add	r31, r0
 4fe:	d8 9e       	mul	r13, r24
 500:	f0 0d       	add	r31, r0
 502:	11 24       	eor	r1, r1
 504:	e5 5f       	subi	r30, 0xF5	; 245
 506:	fe 4f       	sbci	r31, 0xFE	; 254
 508:	84 a1       	ldd	r24, Z+36	; 0x24
 50a:	8f 5f       	subi	r24, 0xFF	; 255
 50c:	84 a3       	std	Z+36, r24	; 0x24
		if (gl_set[sensor_id].anim_counter > 3)
 50e:	84 30       	cpi	r24, 0x04	; 4
 510:	08 f0       	brcs	.+2      	; 0x514 <__vector_21+0x176>
		{
			gl_set[sensor_id].anim_counter = 0;
 512:	14 a2       	std	Z+36, r1	; 0x24
		}
	}

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state == 1)) //a low level is detected
 514:	86 e2       	ldi	r24, 0x26	; 38
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	c8 9e       	mul	r12, r24
 51a:	f0 01       	movw	r30, r0
 51c:	c9 9e       	mul	r12, r25
 51e:	f0 0d       	add	r31, r0
 520:	d8 9e       	mul	r13, r24
 522:	f0 0d       	add	r31, r0
 524:	11 24       	eor	r1, r1
 526:	e5 5f       	subi	r30, 0xF5	; 245
 528:	fe 4f       	sbci	r31, 0xFE	; 254
 52a:	97 8d       	ldd	r25, Z+31	; 0x1f
 52c:	85 8d       	ldd	r24, Z+29	; 0x1d
 52e:	98 17       	cp	r25, r24
 530:	20 f4       	brcc	.+8      	; 0x53a <__vector_21+0x19c>
 532:	80 a1       	ldd	r24, Z+32	; 0x20
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	09 f4       	brne	.+2      	; 0x53a <__vector_21+0x19c>
	{
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
 538:	10 a2       	std	Z+32, r1	; 0x20
	}

	if (delta(gl_set[sensor_id].ir_history_a, gl_set[sensor_id].ir_value) > 10)
 53a:	c6 e2       	ldi	r28, 0x26	; 38
 53c:	d0 e0       	ldi	r29, 0x00	; 0
 53e:	cc 9e       	mul	r12, r28
 540:	f0 01       	movw	r30, r0
 542:	cd 9e       	mul	r12, r29
 544:	f0 0d       	add	r31, r0
 546:	dc 9e       	mul	r13, r28
 548:	f0 0d       	add	r31, r0
 54a:	11 24       	eor	r1, r1
 54c:	e5 5f       	subi	r30, 0xF5	; 245
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	81 a1       	ldd	r24, Z+33	; 0x21
 552:	67 8d       	ldd	r22, Z+31	; 0x1f
 554:	96 dd       	rcall	.-1236   	; 0x82 <delta>
 556:	8b 30       	cpi	r24, 0x0B	; 11
 558:	d8 f0       	brcs	.+54     	; 0x590 <__vector_21+0x1f2>
	{
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
 55a:	80 91 5c 01 	lds	r24, 0x015C
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	8c 9f       	mul	r24, r28
 562:	f0 01       	movw	r30, r0
 564:	8d 9f       	mul	r24, r29
 566:	f0 0d       	add	r31, r0
 568:	9c 9f       	mul	r25, r28
 56a:	f0 0d       	add	r31, r0
 56c:	11 24       	eor	r1, r1
 56e:	e5 5f       	subi	r30, 0xF5	; 245
 570:	fe 4f       	sbci	r31, 0xFE	; 254
 572:	21 a1       	ldd	r18, Z+33	; 0x21
 574:	22 a3       	std	Z+34, r18	; 0x22
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 576:	87 8d       	ldd	r24, Z+31	; 0x1f
 578:	81 a3       	std	Z+33, r24	; 0x21
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a + gl_set[sensor_id].ir_history_b) / 2;
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	82 0f       	add	r24, r18
 57e:	91 1d       	adc	r25, r1
 580:	95 95       	asr	r25
 582:	87 95       	ror	r24
 584:	28 2f       	mov	r18, r24
 586:	83 a3       	std	Z+35, r24	; 0x23
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 588:	2b 5f       	subi	r18, 0xFB	; 251
 58a:	26 8f       	std	Z+30, r18	; 0x1e
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 58c:	2a 50       	subi	r18, 0x0A	; 10
 58e:	25 8f       	std	Z+29, r18	; 0x1d
	}
}
 590:	ff 91       	pop	r31
 592:	ef 91       	pop	r30
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	bf 91       	pop	r27
 59a:	af 91       	pop	r26
 59c:	9f 91       	pop	r25
 59e:	8f 91       	pop	r24
 5a0:	7f 91       	pop	r23
 5a2:	6f 91       	pop	r22
 5a4:	5f 91       	pop	r21
 5a6:	4f 91       	pop	r20
 5a8:	3f 91       	pop	r19
 5aa:	2f 91       	pop	r18
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	bf 90       	pop	r11
 5ba:	af 90       	pop	r10
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <lcd_send_4b_mode>:



void lcd_send_4b_mode(unsigned char data){
	
  LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 5c6:	9a b1       	in	r25, 0x0a	; 10
 5c8:	9f 60       	ori	r25, 0x0F	; 15
 5ca:	9a b9       	out	0x0a, r25	; 10
	
	LCD_EN_PORT |= _BV(LCD_EN);
 5cc:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5ce:	48 e8       	ldi	r20, 0x88	; 136
 5d0:	53 e1       	ldi	r21, 0x13	; 19
 5d2:	fa 01       	movw	r30, r20
 5d4:	31 97       	sbiw	r30, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <lcd_send_4b_mode+0xe>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5d8:	9b b1       	in	r25, 0x0b	; 11
 5da:	90 7f       	andi	r25, 0xF0	; 240
 5dc:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data>>4)<<LCD_SHIFT)&LCD_MASK;
 5de:	2b b1       	in	r18, 0x0b	; 11
 5e0:	98 2f       	mov	r25, r24
 5e2:	92 95       	swap	r25
 5e4:	9f 70       	andi	r25, 0x0F	; 15
 5e6:	92 2b       	or	r25, r18
 5e8:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5ea:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 5ec:	45 9a       	sbi	0x08, 5	; 8
 5ee:	fa 01       	movw	r30, r20
 5f0:	31 97       	sbiw	r30, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <lcd_send_4b_mode+0x2a>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5f4:	9b b1       	in	r25, 0x0b	; 11
 5f6:	90 7f       	andi	r25, 0xF0	; 240
 5f8:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data&LCD_MASK)<<LCD_SHIFT);
 5fa:	9b b1       	in	r25, 0x0b	; 11
 5fc:	8f 70       	andi	r24, 0x0F	; 15
 5fe:	98 2b       	or	r25, r24
 600:	9b b9       	out	0x0b, r25	; 11


	LCD_EN_PORT &= ~(_BV(LCD_EN));
 602:	45 98       	cbi	0x08, 5	; 8
 604:	ca 01       	movw	r24, r20
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <lcd_send_4b_mode+0x40>
	_delay_ms (1);
} 
 60a:	08 95       	ret

0000060c <cls>:
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
		cls();
}
void cls(){     // clear the display
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 60c:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(0x01);   
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	da df       	rcall	.-76     	; 0x5c6 <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 612:	5c 9a       	sbi	0x0b, 4	; 11
}
 614:	08 95       	ret

00000616 <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}


void ini_lcd_4_bit_mode(){
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	c8 e5       	ldi	r28, 0x58	; 88
 61c:	d0 e0       	ldi	r29, 0x00	; 0
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 61e:	fe 01       	movw	r30, r28
 620:	84 91       	lpm	r24, Z+
 622:	d1 df       	rcall	.-94     	; 0x5c6 <lcd_send_4b_mode>
 624:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode(){
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	c0 36       	cpi	r28, 0x60	; 96
 62a:	df 07       	cpc	r29, r31
 62c:	c1 f7       	brne	.-16     	; 0x61e <ini_lcd_4_bit_mode+0x8>
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
   }
   LCD_RS_PORT |= _BV(LCD_RS);
 62e:	5c 9a       	sbi	0x0b, 4	; 11
}
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms (1);
} 

void lcd_ini_sequence()
{
 636:	84 ec       	ldi	r24, 0xC4	; 196
 638:	99 e0       	ldi	r25, 0x09	; 9
 63a:	24 ef       	ldi	r18, 0xF4	; 244
 63c:	31 e0       	ldi	r19, 0x01	; 1
 63e:	f9 01       	movw	r30, r18
 640:	31 97       	sbiw	r30, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 644:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 646:	d9 f7       	brne	.-10     	; 0x63e <lcd_ini_sequence+0x8>
		
		_delay_ms(250); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 648:	e6 df       	rcall	.-52     	; 0x616 <ini_lcd_4_bit_mode>
		cls();
 64a:	e0 df       	rcall	.-64     	; 0x60c <cls>
 64c:	80 e5       	ldi	r24, 0x50	; 80
 64e:	93 ec       	ldi	r25, 0xC3	; 195
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <lcd_ini_sequence+0x1a>
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 654:	e0 df       	rcall	.-64     	; 0x616 <ini_lcd_4_bit_mode>
		cls();
 656:	da df       	rcall	.-76     	; 0x60c <cls>
}
 658:	08 95       	ret

0000065a <locate>:
   LCD_RS_PORT |= _BV(LCD_RS);
}

void locate(unsigned char pos){
   pos = pos | (1 << 7);
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 65a:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(pos);   
 65c:	80 68       	ori	r24, 0x80	; 128
 65e:	b3 df       	rcall	.-154    	; 0x5c6 <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 660:	5c 9a       	sbi	0x0b, 4	; 11
}
 662:	08 95       	ret

00000664 <put_str>:
	{
		lcd_send_4b_mode(' ');  
	}
}

void put_str(uchar pos, char* str){     
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 66e:	f5 df       	rcall	.-22     	; 0x65a <locate>
 670:	c0 e0       	ldi	r28, 0x00	; 0
 672:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i< 16; i++){				
		lcd_send_4b_mode(pgm_read_byte(str + i));
 674:	f8 01       	movw	r30, r16
 676:	ec 0f       	add	r30, r28
 678:	fd 1f       	adc	r31, r29
 67a:	e4 91       	lpm	r30, Z+
 67c:	8e 2f       	mov	r24, r30
 67e:	a3 df       	rcall	.-186    	; 0x5c6 <lcd_send_4b_mode>
 680:	21 96       	adiw	r28, 0x01	; 1
}

void put_str(uchar pos, char* str){     
	uchar i;
	locate(pos);
	for (i = 0; i< 16; i++){				
 682:	c0 31       	cpi	r28, 0x10	; 16
 684:	d1 05       	cpc	r29, r1
 686:	b1 f7       	brne	.-20     	; 0x674 <put_str+0x10>
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 688:	df 91       	pop	r29
 68a:	cf 91       	pop	r28
 68c:	1f 91       	pop	r17
 68e:	0f 91       	pop	r16
 690:	08 95       	ret

00000692 <clr_line>:
   LCD_RS_PORT &= ~(_BV(LCD_RS));
   lcd_send_4b_mode(0x01);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add){     // clear line
 692:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 694:	e2 df       	rcall	.-60     	; 0x65a <locate>
 696:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<16; i++)
	{
		lcd_send_4b_mode(' ');  
 698:	80 e2       	ldi	r24, 0x20	; 32
 69a:	95 df       	rcall	.-214    	; 0x5c6 <lcd_send_4b_mode>
}

void clr_line(uchar start_add){     // clear line
	uchar i;
	locate(start_add);
	for (i=0; i<16; i++)
 69c:	1f 5f       	subi	r17, 0xFF	; 255
 69e:	10 31       	cpi	r17, 0x10	; 16
 6a0:	d9 f7       	brne	.-10     	; 0x698 <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');  
	}
}
 6a2:	1f 91       	pop	r17
 6a4:	08 95       	ret

000006a6 <lcd_contrast>:
void lcd_contrast()
{


	
}
 6a6:	08 95       	ret

000006a8 <format>:

void format(char* line1,char* line2){     // reformat the display
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	8c 01       	movw	r16, r24
 6b6:	7b 01       	movw	r14, r22
    unsigned char i;
		locate(0);
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	cf df       	rcall	.-98     	; 0x65a <locate>
 6bc:	c0 e0       	ldi	r28, 0x00	; 0
 6be:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
 6c0:	f8 01       	movw	r30, r16
 6c2:	ec 0f       	add	r30, r28
 6c4:	fd 1f       	adc	r31, r29
 6c6:	e4 91       	lpm	r30, Z+
 6c8:	8e 2f       	mov	r24, r30
 6ca:	7d df       	rcall	.-262    	; 0x5c6 <lcd_send_4b_mode>
 6cc:	21 96       	adiw	r28, 0x01	; 1
}

void format(char* line1,char* line2){     // reformat the display
    unsigned char i;
		locate(0);
		for (i = 0; i< 16; i++){				
 6ce:	c0 31       	cpi	r28, 0x10	; 16
 6d0:	d1 05       	cpc	r29, r1
 6d2:	b1 f7       	brne	.-20     	; 0x6c0 <format+0x18>
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
 6d4:	80 e4       	ldi	r24, 0x40	; 64
 6d6:	c1 df       	rcall	.-126    	; 0x65a <locate>
 6d8:	c0 e0       	ldi	r28, 0x00	; 0
 6da:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
 6dc:	f7 01       	movw	r30, r14
 6de:	ec 0f       	add	r30, r28
 6e0:	fd 1f       	adc	r31, r29
 6e2:	e4 91       	lpm	r30, Z+
 6e4:	8e 2f       	mov	r24, r30
 6e6:	6f df       	rcall	.-290    	; 0x5c6 <lcd_send_4b_mode>
 6e8:	21 96       	adiw	r28, 0x01	; 1
		locate(0);
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
		for (i = 0; i< 16; i++){
 6ea:	c0 31       	cpi	r28, 0x10	; 16
 6ec:	d1 05       	cpc	r29, r1
 6ee:	b1 f7       	brne	.-20     	; 0x6dc <format+0x34>
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
		}
}
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	ff 90       	pop	r15
 6fa:	ef 90       	pop	r14
 6fc:	08 95       	ret

000006fe <lcd_send_floatx10>:
   lcd_send_4b_mode(pos);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data,uchar location, uchar len, uchar d_len)
{
 6fe:	af 92       	push	r10
 700:	bf 92       	push	r11
 702:	cf 92       	push	r12
 704:	df 92       	push	r13
 706:	ef 92       	push	r14
 708:	ff 92       	push	r15
 70a:	0f 93       	push	r16
 70c:	1f 93       	push	r17
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	60 97       	sbiw	r28, 0x10	; 16
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	f8 94       	cli
 71c:	de bf       	out	0x3e, r29	; 62
 71e:	0f be       	out	0x3f, r0	; 63
 720:	cd bf       	out	0x3d, r28	; 61
 722:	6b 01       	movw	r12, r22
 724:	7c 01       	movw	r14, r24
 726:	14 2f       	mov	r17, r20
 728:	a2 2e       	mov	r10, r18
 72a:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];
	
	uchar i,y,temp,int_len;
	t=0;
 72c:	10 92 00 01 	sts	0x0100, r1

	if (data < 0)
 730:	97 ff       	sbrs	r25, 7
 732:	03 c0       	rjmp	.+6      	; 0x73a <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 734:	8e e4       	ldi	r24, 0x4E	; 78
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	06 c0       	rjmp	.+12     	; 0x746 <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 73a:	ae 01       	movw	r20, r28
 73c:	4f 5f       	subi	r20, 0xFF	; 255
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	2a e0       	ldi	r18, 0x0A	; 10
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	de d0       	rcall	.+444    	; 0x902 <ltoa>
	}

	locate(location);
 746:	81 2f       	mov	r24, r17
 748:	88 df       	rcall	.-240    	; 0x65a <locate>

	i=0;
	if (d_len == 2)
 74a:	82 e0       	ldi	r24, 0x02	; 2
 74c:	b8 16       	cp	r11, r24
 74e:	11 f0       	breq	.+4      	; 0x754 <lcd_send_floatx10+0x56>
 750:	8a e0       	ldi	r24, 0x0A	; 10
 752:	01 c0       	rjmp	.+2      	; 0x756 <lcd_send_floatx10+0x58>
 754:	84 e6       	ldi	r24, 0x64	; 100
		temp = 100;
	}else{
		temp = 10;	
	}

	if( data >= temp){
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	a0 e0       	ldi	r26, 0x00	; 0
 75a:	b0 e0       	ldi	r27, 0x00	; 0
 75c:	c8 16       	cp	r12, r24
 75e:	d9 06       	cpc	r13, r25
 760:	ea 06       	cpc	r14, r26
 762:	fb 06       	cpc	r15, r27
 764:	0c f4       	brge	.+2      	; 0x768 <lcd_send_floatx10+0x6a>
 766:	47 c0       	rjmp	.+142    	; 0x7f6 <lcd_send_floatx10+0xf8>
		if (strlen(buffer)>len)
 768:	fe 01       	movw	r30, r28
 76a:	31 96       	adiw	r30, 0x01	; 1
 76c:	df 01       	movw	r26, r30
 76e:	0d 90       	ld	r0, X+
 770:	00 20       	and	r0, r0
 772:	e9 f7       	brne	.-6      	; 0x76e <lcd_send_floatx10+0x70>
 774:	11 97       	sbiw	r26, 0x01	; 1
 776:	ae 1b       	sub	r26, r30
 778:	bf 0b       	sbc	r27, r31
 77a:	8a 2d       	mov	r24, r10
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	8a 17       	cp	r24, r26
 780:	9b 07       	cpc	r25, r27
 782:	10 f4       	brcc	.+4      	; 0x788 <lcd_send_floatx10+0x8a>
 784:	8a 2d       	mov	r24, r10
 786:	01 c0       	rjmp	.+2      	; 0x78a <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 788:	8a 2f       	mov	r24, r26
 78a:	00 e0       	ldi	r16, 0x00	; 0
		}

		for(i=0; i<(int_len-d_len);i++)
 78c:	e8 2e       	mov	r14, r24
 78e:	ff 24       	eor	r15, r15
 790:	eb 18       	sub	r14, r11
 792:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 794:	6e 01       	movw	r12, r28
 796:	08 94       	sec
 798:	c1 1c       	adc	r12, r1
 79a:	d1 1c       	adc	r13, r1
 79c:	0a c0       	rjmp	.+20     	; 0x7b2 <lcd_send_floatx10+0xb4>
 79e:	ec 0d       	add	r30, r12
 7a0:	fd 1d       	adc	r31, r13
 7a2:	80 81       	ld	r24, Z
 7a4:	10 df       	rcall	.-480    	; 0x5c6 <lcd_send_4b_mode>
			t++;
 7a6:	80 91 00 01 	lds	r24, 0x0100
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	80 93 00 01 	sts	0x0100, r24
		else
		{
			int_len = strlen(buffer);
		}

		for(i=0; i<(int_len-d_len);i++)
 7b0:	0f 5f       	subi	r16, 0xFF	; 255
 7b2:	e0 2f       	mov	r30, r16
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	ee 15       	cp	r30, r14
 7b8:	ff 05       	cpc	r31, r15
 7ba:	8c f3       	brlt	.-30     	; 0x79e <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 7bc:	8e e2       	ldi	r24, 0x2E	; 46
 7be:	03 df       	rcall	.-506    	; 0x5c6 <lcd_send_4b_mode>
		t++;
 7c0:	80 91 00 01 	lds	r24, 0x0100
 7c4:	8f 5f       	subi	r24, 0xFF	; 255
 7c6:	80 93 00 01 	sts	0x0100, r24
 7ca:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<(d_len);y++)
		{
			lcd_send_4b_mode(buffer[i]);
 7cc:	7e 01       	movw	r14, r28
 7ce:	08 94       	sec
 7d0:	e1 1c       	adc	r14, r1
 7d2:	f1 1c       	adc	r15, r1
 7d4:	0b c0       	rjmp	.+22     	; 0x7ec <lcd_send_floatx10+0xee>
 7d6:	f7 01       	movw	r30, r14
 7d8:	e8 0f       	add	r30, r24
 7da:	f1 1d       	adc	r31, r1
 7dc:	80 81       	ld	r24, Z
 7de:	f3 de       	rcall	.-538    	; 0x5c6 <lcd_send_4b_mode>
			i++;	
			t++;
 7e0:	80 91 00 01 	lds	r24, 0x0100
 7e4:	8f 5f       	subi	r24, 0xFF	; 255
 7e6:	80 93 00 01 	sts	0x0100, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<(d_len);y++)
 7ea:	1f 5f       	subi	r17, 0xFF	; 255
 7ec:	81 2f       	mov	r24, r17
 7ee:	80 0f       	add	r24, r16
 7f0:	1b 15       	cp	r17, r11
 7f2:	88 f3       	brcs	.-30     	; 0x7d6 <lcd_send_floatx10+0xd8>
 7f4:	34 c0       	rjmp	.+104    	; 0x85e <lcd_send_floatx10+0x160>
			i++;	
			t++;
		}
		
	}else{
		lcd_send_4b_mode('0');
 7f6:	80 e3       	ldi	r24, 0x30	; 48
 7f8:	e6 de       	rcall	.-564    	; 0x5c6 <lcd_send_4b_mode>
		t++;
 7fa:	80 91 00 01 	lds	r24, 0x0100
 7fe:	8f 5f       	subi	r24, 0xFF	; 255
 800:	80 93 00 01 	sts	0x0100, r24
		lcd_send_4b_mode('.');
 804:	8e e2       	ldi	r24, 0x2E	; 46
 806:	df de       	rcall	.-578    	; 0x5c6 <lcd_send_4b_mode>
		t++;
 808:	80 91 00 01 	lds	r24, 0x0100
 80c:	8f 5f       	subi	r24, 0xFF	; 255
 80e:	80 93 00 01 	sts	0x0100, r24
 812:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<d_len;y++)
		{
			if(y < strlen(buffer))
 814:	7e 01       	movw	r14, r28
 816:	08 94       	sec
 818:	e1 1c       	adc	r14, r1
 81a:	f1 1c       	adc	r15, r1
 81c:	16 c0       	rjmp	.+44     	; 0x84a <lcd_send_floatx10+0x14c>
 81e:	f7 01       	movw	r30, r14
 820:	01 90       	ld	r0, Z+
 822:	00 20       	and	r0, r0
 824:	e9 f7       	brne	.-6      	; 0x820 <lcd_send_floatx10+0x122>
 826:	31 97       	sbiw	r30, 0x01	; 1
 828:	ee 19       	sub	r30, r14
 82a:	ff 09       	sbc	r31, r15
 82c:	a1 2f       	mov	r26, r17
 82e:	b0 e0       	ldi	r27, 0x00	; 0
 830:	ae 17       	cp	r26, r30
 832:	bf 07       	cpc	r27, r31
 834:	48 f4       	brcc	.+18     	; 0x848 <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);	
 836:	ae 0d       	add	r26, r14
 838:	bf 1d       	adc	r27, r15
 83a:	8c 91       	ld	r24, X
 83c:	c4 de       	rcall	.-632    	; 0x5c6 <lcd_send_4b_mode>
				i++;
				t++;
 83e:	80 91 00 01 	lds	r24, 0x0100
 842:	8f 5f       	subi	r24, 0xFF	; 255
 844:	80 93 00 01 	sts	0x0100, r24
	}else{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<d_len;y++)
 848:	1f 5f       	subi	r17, 0xFF	; 255
 84a:	1b 15       	cp	r17, r11
 84c:	40 f3       	brcs	.-48     	; 0x81e <lcd_send_floatx10+0x120>
 84e:	07 c0       	rjmp	.+14     	; 0x85e <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
	{
		lcd_send_4b_mode(' ');
 850:	80 e2       	ldi	r24, 0x20	; 32
 852:	b9 de       	rcall	.-654    	; 0x5c6 <lcd_send_4b_mode>
		t++;
 854:	80 91 00 01 	lds	r24, 0x0100
 858:	8f 5f       	subi	r24, 0xFF	; 255
 85a:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
 85e:	80 91 00 01 	lds	r24, 0x0100
 862:	8a 15       	cp	r24, r10
 864:	a8 f3       	brcs	.-22     	; 0x850 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 866:	60 96       	adiw	r28, 0x10	; 16
 868:	0f b6       	in	r0, 0x3f	; 63
 86a:	f8 94       	cli
 86c:	de bf       	out	0x3e, r29	; 62
 86e:	0f be       	out	0x3f, r0	; 63
 870:	cd bf       	out	0x3d, r28	; 61
 872:	cf 91       	pop	r28
 874:	df 91       	pop	r29
 876:	1f 91       	pop	r17
 878:	0f 91       	pop	r16
 87a:	ff 90       	pop	r15
 87c:	ef 90       	pop	r14
 87e:	df 90       	pop	r13
 880:	cf 90       	pop	r12
 882:	bf 90       	pop	r11
 884:	af 90       	pop	r10
 886:	08 95       	ret

00000888 <__divmodsi4>:
 888:	97 fb       	bst	r25, 7
 88a:	09 2e       	mov	r0, r25
 88c:	05 26       	eor	r0, r21
 88e:	0e d0       	rcall	.+28     	; 0x8ac <__divmodsi4_neg1>
 890:	57 fd       	sbrc	r21, 7
 892:	04 d0       	rcall	.+8      	; 0x89c <__divmodsi4_neg2>
 894:	14 d0       	rcall	.+40     	; 0x8be <__udivmodsi4>
 896:	0a d0       	rcall	.+20     	; 0x8ac <__divmodsi4_neg1>
 898:	00 1c       	adc	r0, r0
 89a:	38 f4       	brcc	.+14     	; 0x8aa <__divmodsi4_exit>

0000089c <__divmodsi4_neg2>:
 89c:	50 95       	com	r21
 89e:	40 95       	com	r20
 8a0:	30 95       	com	r19
 8a2:	21 95       	neg	r18
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	4f 4f       	sbci	r20, 0xFF	; 255
 8a8:	5f 4f       	sbci	r21, 0xFF	; 255

000008aa <__divmodsi4_exit>:
 8aa:	08 95       	ret

000008ac <__divmodsi4_neg1>:
 8ac:	f6 f7       	brtc	.-4      	; 0x8aa <__divmodsi4_exit>
 8ae:	90 95       	com	r25
 8b0:	80 95       	com	r24
 8b2:	70 95       	com	r23
 8b4:	61 95       	neg	r22
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	08 95       	ret

000008be <__udivmodsi4>:
 8be:	a1 e2       	ldi	r26, 0x21	; 33
 8c0:	1a 2e       	mov	r1, r26
 8c2:	aa 1b       	sub	r26, r26
 8c4:	bb 1b       	sub	r27, r27
 8c6:	fd 01       	movw	r30, r26
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <__udivmodsi4_ep>

000008ca <__udivmodsi4_loop>:
 8ca:	aa 1f       	adc	r26, r26
 8cc:	bb 1f       	adc	r27, r27
 8ce:	ee 1f       	adc	r30, r30
 8d0:	ff 1f       	adc	r31, r31
 8d2:	a2 17       	cp	r26, r18
 8d4:	b3 07       	cpc	r27, r19
 8d6:	e4 07       	cpc	r30, r20
 8d8:	f5 07       	cpc	r31, r21
 8da:	20 f0       	brcs	.+8      	; 0x8e4 <__udivmodsi4_ep>
 8dc:	a2 1b       	sub	r26, r18
 8de:	b3 0b       	sbc	r27, r19
 8e0:	e4 0b       	sbc	r30, r20
 8e2:	f5 0b       	sbc	r31, r21

000008e4 <__udivmodsi4_ep>:
 8e4:	66 1f       	adc	r22, r22
 8e6:	77 1f       	adc	r23, r23
 8e8:	88 1f       	adc	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	1a 94       	dec	r1
 8ee:	69 f7       	brne	.-38     	; 0x8ca <__udivmodsi4_loop>
 8f0:	60 95       	com	r22
 8f2:	70 95       	com	r23
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	9b 01       	movw	r18, r22
 8fa:	ac 01       	movw	r20, r24
 8fc:	bd 01       	movw	r22, r26
 8fe:	cf 01       	movw	r24, r30
 900:	08 95       	ret

00000902 <ltoa>:
 902:	fa 01       	movw	r30, r20
 904:	cf 93       	push	r28
 906:	ff 93       	push	r31
 908:	ef 93       	push	r30
 90a:	22 30       	cpi	r18, 0x02	; 2
 90c:	3c f1       	brlt	.+78     	; 0x95c <ltoa+0x5a>
 90e:	25 32       	cpi	r18, 0x25	; 37
 910:	2c f5       	brge	.+74     	; 0x95c <ltoa+0x5a>
 912:	c2 2f       	mov	r28, r18
 914:	e8 94       	clt
 916:	ca 30       	cpi	r28, 0x0A	; 10
 918:	49 f4       	brne	.+18     	; 0x92c <ltoa+0x2a>
 91a:	97 fb       	bst	r25, 7
 91c:	3e f4       	brtc	.+14     	; 0x92c <ltoa+0x2a>
 91e:	90 95       	com	r25
 920:	80 95       	com	r24
 922:	70 95       	com	r23
 924:	61 95       	neg	r22
 926:	7f 4f       	sbci	r23, 0xFF	; 255
 928:	8f 4f       	sbci	r24, 0xFF	; 255
 92a:	9f 4f       	sbci	r25, 0xFF	; 255
 92c:	2c 2f       	mov	r18, r28
 92e:	33 27       	eor	r19, r19
 930:	44 27       	eor	r20, r20
 932:	55 27       	eor	r21, r21
 934:	ff 93       	push	r31
 936:	ef 93       	push	r30
 938:	c2 df       	rcall	.-124    	; 0x8be <__udivmodsi4>
 93a:	ef 91       	pop	r30
 93c:	ff 91       	pop	r31
 93e:	60 5d       	subi	r22, 0xD0	; 208
 940:	6a 33       	cpi	r22, 0x3A	; 58
 942:	0c f0       	brlt	.+2      	; 0x946 <ltoa+0x44>
 944:	69 5d       	subi	r22, 0xD9	; 217
 946:	61 93       	st	Z+, r22
 948:	b9 01       	movw	r22, r18
 94a:	ca 01       	movw	r24, r20
 94c:	60 50       	subi	r22, 0x00	; 0
 94e:	70 40       	sbci	r23, 0x00	; 0
 950:	80 40       	sbci	r24, 0x00	; 0
 952:	90 40       	sbci	r25, 0x00	; 0
 954:	59 f7       	brne	.-42     	; 0x92c <ltoa+0x2a>
 956:	16 f4       	brtc	.+4      	; 0x95c <ltoa+0x5a>
 958:	cd e2       	ldi	r28, 0x2D	; 45
 95a:	c1 93       	st	Z+, r28
 95c:	10 82       	st	Z, r1
 95e:	8f 91       	pop	r24
 960:	9f 91       	pop	r25
 962:	cf 91       	pop	r28
 964:	00 c0       	rjmp	.+0      	; 0x966 <strrev>

00000966 <strrev>:
 966:	dc 01       	movw	r26, r24
 968:	fc 01       	movw	r30, r24
 96a:	67 2f       	mov	r22, r23
 96c:	71 91       	ld	r23, Z+
 96e:	77 23       	and	r23, r23
 970:	e1 f7       	brne	.-8      	; 0x96a <strrev+0x4>
 972:	32 97       	sbiw	r30, 0x02	; 2
 974:	04 c0       	rjmp	.+8      	; 0x97e <strrev+0x18>
 976:	7c 91       	ld	r23, X
 978:	6d 93       	st	X+, r22
 97a:	70 83       	st	Z, r23
 97c:	62 91       	ld	r22, -Z
 97e:	ae 17       	cp	r26, r30
 980:	bf 07       	cpc	r27, r31
 982:	c8 f3       	brcs	.-14     	; 0x976 <strrev+0x10>
 984:	08 95       	ret

00000986 <_exit>:
 986:	f8 94       	cli

00000988 <__stop_program>:
 988:	ff cf       	rjmp	.-2      	; 0x988 <__stop_program>
