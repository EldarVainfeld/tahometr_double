
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000098c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000078  00800100  00800100  00000a00  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000031c  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c42  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000410  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000870  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00002660  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002f9  00000000  00000000  000027a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000498  00000000  00000000  00002a99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	2d c2       	rjmp	.+1114   	; 0x476 <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	36 c2       	rjmp	.+1132   	; 0x498 <__vector_21>
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_clear_bss>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a8 37       	cpi	r26, 0x78	; 120
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	09 d0       	rcall	.+18     	; 0x90 <main>
  7e:	84 c4       	rjmp	.+2312   	; 0x988 <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  82:	68 17       	cp	r22, r24
  84:	10 f4       	brcc	.+4      	; 0x8a <delta+0x8>
	{
		return (v1 - v2);
  86:	86 1b       	sub	r24, r22
  88:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  8a:	68 1b       	sub	r22, r24
  8c:	86 2f       	mov	r24, r22
	}
}
  8e:	08 95       	ret

00000090 <main>:

int main()
{
  90:	2f 92       	push	r2
  92:	3f 92       	push	r3
  94:	4f 92       	push	r4
  96:	5f 92       	push	r5
  98:	6f 92       	push	r6
  9a:	7f 92       	push	r7
  9c:	8f 92       	push	r8
  9e:	9f 92       	push	r9
  a0:	af 92       	push	r10
  a2:	bf 92       	push	r11
  a4:	cf 92       	push	r12
  a6:	df 92       	push	r13
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	df 93       	push	r29
  b2:	cf 93       	push	r28
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	60 97       	sbiw	r28, 0x10	; 16
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	sensor_id = 0;
  c4:	10 92 77 01 	sts	0x0177, r1
	long time_count;
	long rpm_x10, last_rpm_x10 = 0;

	uchar i;
	char animation[4], anim_counter = 0;
	animation[0] = 0xD9;
  c8:	89 ed       	ldi	r24, 0xD9	; 217
  ca:	89 83       	std	Y+1, r24	; 0x01
	animation[1] = 0xC9;
  cc:	89 ec       	ldi	r24, 0xC9	; 201
  ce:	8a 83       	std	Y+2, r24	; 0x02
	animation[2] = 0xDA;
  d0:	8a ed       	ldi	r24, 0xDA	; 218
  d2:	8b 83       	std	Y+3, r24	; 0x03
	animation[3] = 0xC8;
  d4:	88 ec       	ldi	r24, 0xC8	; 200
  d6:	8c 83       	std	Y+4, r24	; 0x04

	setup_timers();
  d8:	b6 d1       	rcall	.+876    	; 0x446 <setup_timers>

	setup_io();
  da:	c5 d1       	rcall	.+906    	; 0x466 <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
  dc:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
  de:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
  e0:	ab d2       	rcall	.+1366   	; 0x638 <lcd_ini_sequence>
	LED_ON
  e2:	57 9a       	sbi	0x0a, 7	; 10
  e4:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
  e6:	3c 9a       	sbi	0x07, 4	; 7
  e8:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
  ea:	55 9a       	sbi	0x0a, 5	; 10
	sei();
  ec:	78 94       	sei
	format(line1, line2);
  ee:	84 e3       	ldi	r24, 0x34	; 52
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	66 e4       	ldi	r22, 0x46	; 70
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	d9 d2       	rcall	.+1458   	; 0x6aa <format>

	gl_set[0].rpm_avg = 0;
  f8:	10 92 03 01 	sts	0x0103, r1
  fc:	10 92 04 01 	sts	0x0104, r1
 100:	10 92 05 01 	sts	0x0105, r1
 104:	10 92 06 01 	sts	0x0106, r1
	gl_set[0].ain_th_low = 20;
 108:	94 e1       	ldi	r25, 0x14	; 20
 10a:	90 93 33 01 	sts	0x0133, r25
	gl_set[0].ain_th_high = 45;
 10e:	8d e2       	ldi	r24, 0x2D	; 45
 110:	80 93 34 01 	sts	0x0134, r24

	gl_set[1].rpm_avg = 0;
 114:	10 92 3a 01 	sts	0x013A, r1
 118:	10 92 3b 01 	sts	0x013B, r1
 11c:	10 92 3c 01 	sts	0x013C, r1
 120:	10 92 3d 01 	sts	0x013D, r1
	gl_set[1].ain_th_low = 20;
 124:	90 93 6a 01 	sts	0x016A, r25
	gl_set[1].ain_th_high = 45;
 128:	80 93 6b 01 	sts	0x016B, r24

	LED_OFF;
 12c:	5f 98       	cbi	0x0b, 7	; 11
	ADMUX = 2 + sensor_id;
 12e:	80 91 77 01 	lds	r24, 0x0177
 132:	8e 5f       	subi	r24, 0xFE	; 254
 134:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 138:	8d ee       	ldi	r24, 0xED	; 237
 13a:	80 93 7a 00 	sts	0x007A, r24
	SENSOR_ON;
 13e:	39 9a       	sbi	0x07, 1	; 7
 140:	41 9a       	sbi	0x08, 1	; 8
	LED_ON;
 142:	57 9a       	sbi	0x0a, 7	; 10
 144:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_CONTRAST = 0;
 146:	18 bc       	out	0x28, r1	; 40
 148:	1d 86       	std	Y+13, r1	; 0x0d
 14a:	1e 86       	std	Y+14, r1	; 0x0e
 14c:	1f 86       	std	Y+15, r1	; 0x0f
 14e:	18 8a       	std	Y+16, r1	; 0x10
 150:	33 24       	eor	r3, r3
 152:	19 86       	std	Y+9, r1	; 0x09
 154:	1a 86       	std	Y+10, r1	; 0x0a
 156:	1b 86       	std	Y+11, r1	; 0x0b
 158:	1c 86       	std	Y+12, r1	; 0x0c
 15a:	1d 82       	std	Y+5, r1	; 0x05
 15c:	1e 82       	std	Y+6, r1	; 0x06
 15e:	1f 82       	std	Y+7, r1	; 0x07
 160:	18 86       	std	Y+8, r1	; 0x08
				sensor_id = 1;
				locate(15);
				lcd_send_4b_mode((uchar)'_');
				locate(79);
				lcd_send_4b_mode((uchar)'2');
				ADMUX = 3;
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	28 2e       	mov	r2, r24
	long int time_with_current_sensor_id = 0;
	long int time_count_prev = 0;

	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
 166:	80 91 73 01 	lds	r24, 0x0173
 16a:	90 91 74 01 	lds	r25, 0x0174
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	3c 01       	movw	r6, r24
 174:	55 24       	eor	r5, r5
 176:	44 24       	eor	r4, r4
 178:	80 91 75 01 	lds	r24, 0x0175
 17c:	90 91 76 01 	lds	r25, 0x0176
 180:	a0 e0       	ldi	r26, 0x00	; 0
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	48 0e       	add	r4, r24
 186:	59 1e       	adc	r5, r25
 188:	6a 1e       	adc	r6, r26
 18a:	7b 1e       	adc	r7, r27
		rpm_x10 = 187500000 / time_count;
 18c:	60 ee       	ldi	r22, 0xE0	; 224
 18e:	75 e0       	ldi	r23, 0x05	; 5
 190:	8d e2       	ldi	r24, 0x2D	; 45
 192:	9b e0       	ldi	r25, 0x0B	; 11
 194:	a3 01       	movw	r20, r6
 196:	92 01       	movw	r18, r4
 198:	78 d3       	rcall	.+1776   	; 0x88a <__divmodsi4>
 19a:	59 01       	movw	r10, r18
 19c:	6a 01       	movw	r12, r20
		if (last_rpm_x10 == 0)
 19e:	ed 84       	ldd	r14, Y+13	; 0x0d
 1a0:	fe 84       	ldd	r15, Y+14	; 0x0e
 1a2:	0f 85       	ldd	r16, Y+15	; 0x0f
 1a4:	18 89       	ldd	r17, Y+16	; 0x10
 1a6:	e1 14       	cp	r14, r1
 1a8:	f1 04       	cpc	r15, r1
 1aa:	01 05       	cpc	r16, r1
 1ac:	11 05       	cpc	r17, r1
 1ae:	09 f5       	brne	.+66     	; 0x1f2 <main+0x162>
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_his[i] = 0;
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	80 91 77 01 	lds	r24, 0x0177
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	ee 0f       	add	r30, r30
 1c6:	ff 1f       	adc	r31, r31
 1c8:	8c 01       	movw	r16, r24
 1ca:	47 e3       	ldi	r20, 0x37	; 55
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	04 9f       	mul	r16, r20
 1d0:	c0 01       	movw	r24, r0
 1d2:	05 9f       	mul	r16, r21
 1d4:	90 0d       	add	r25, r0
 1d6:	14 9f       	mul	r17, r20
 1d8:	90 0d       	add	r25, r0
 1da:	11 24       	eor	r1, r1
 1dc:	e8 0f       	add	r30, r24
 1de:	f9 1f       	adc	r31, r25
 1e0:	ed 5f       	subi	r30, 0xFD	; 253
 1e2:	fe 4f       	sbci	r31, 0xFE	; 254
 1e4:	10 82       	st	Z, r1
 1e6:	11 82       	std	Z+1, r1	; 0x01
 1e8:	12 82       	std	Z+2, r1	; 0x02
 1ea:	13 82       	std	Z+3, r1	; 0x03
	{
		time_count = t_capture + (t_postscale * 65536);
		rpm_x10 = 187500000 / time_count;
		if (last_rpm_x10 == 0)
		{
			for (i = 0; i < MAX_NUM_MEAS; i++)
 1ec:	2a 30       	cpi	r18, 0x0A	; 10
 1ee:	31 05       	cpc	r19, r1
 1f0:	09 f7       	brne	.-62     	; 0x1b4 <main+0x124>
			{
				gl_set[sensor_id].rpm_his[i] = 0;
			}
		}
		if (rpm_x10 > 40000)
 1f2:	51 e4       	ldi	r21, 0x41	; 65
 1f4:	a5 16       	cp	r10, r21
 1f6:	5c e9       	ldi	r21, 0x9C	; 156
 1f8:	b5 06       	cpc	r11, r21
 1fa:	50 e0       	ldi	r21, 0x00	; 0
 1fc:	c5 06       	cpc	r12, r21
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	d5 06       	cpc	r13, r21
 202:	0c f0       	brlt	.+2      	; 0x206 <main+0x176>
 204:	a7 c0       	rjmp	.+334    	; 0x354 <__stack+0x55>
			rpm_x10 = last_rpm_x10;
		if (last_rpm_x10 != rpm_x10)
 206:	6d 85       	ldd	r22, Y+13	; 0x0d
 208:	7e 85       	ldd	r23, Y+14	; 0x0e
 20a:	8f 85       	ldd	r24, Y+15	; 0x0f
 20c:	98 89       	ldd	r25, Y+16	; 0x10
 20e:	6a 15       	cp	r22, r10
 210:	7b 05       	cpc	r23, r11
 212:	8c 05       	cpc	r24, r12
 214:	9d 05       	cpc	r25, r13
 216:	09 f4       	brne	.+2      	; 0x21a <main+0x18a>
 218:	9d c0       	rjmp	.+314    	; 0x354 <__stack+0x55>
		{
			last_rpm_x10 = rpm_x10;

			if(sensor_id == 0) {locate(14);} else {locate(78);}
 21a:	80 91 77 01 	lds	r24, 0x0177
 21e:	88 23       	and	r24, r24
 220:	11 f4       	brne	.+4      	; 0x226 <main+0x196>
 222:	8e e0       	ldi	r24, 0x0E	; 14
 224:	01 c0       	rjmp	.+2      	; 0x228 <main+0x198>
 226:	8e e4       	ldi	r24, 0x4E	; 78
 228:	19 d2       	rcall	.+1074   	; 0x65c <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)anim_counter]);
 22a:	e1 e0       	ldi	r30, 0x01	; 1
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	ec 0f       	add	r30, r28
 230:	fd 1f       	adc	r31, r29
 232:	e3 0d       	add	r30, r3
 234:	f1 1d       	adc	r31, r1
 236:	80 81       	ld	r24, Z
 238:	c7 d1       	rcall	.+910    	; 0x5c8 <lcd_send_4b_mode>
			anim_counter++;
 23a:	33 94       	inc	r3
			if (anim_counter > 3)
 23c:	73 e0       	ldi	r23, 0x03	; 3
 23e:	73 15       	cp	r23, r3
 240:	08 f4       	brcc	.+2      	; 0x244 <main+0x1b4>
 242:	33 24       	eor	r3, r3
				anim_counter = 0;
			if (n_measures < MAX_NUM_MEAS)
 244:	80 91 01 01 	lds	r24, 0x0101
 248:	8a 30       	cpi	r24, 0x0A	; 10
 24a:	18 f4       	brcc	.+6      	; 0x252 <main+0x1c2>
				n_measures++;
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 01 01 	sts	0x0101, r24
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
 256:	80 91 77 01 	lds	r24, 0x0177
 25a:	90 e0       	ldi	r25, 0x00	; 0
		return (v2 - v1);
	}
}

int main()
{
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
				anim_counter = 0;
			if (n_measures < MAX_NUM_MEAS)
				n_measures++;
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
 260:	9a 01       	movw	r18, r20
 262:	22 0f       	add	r18, r18
 264:	33 1f       	adc	r19, r19
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	a7 e3       	ldi	r26, 0x37	; 55
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	8a 9f       	mul	r24, r26
 270:	b0 01       	movw	r22, r0
 272:	8b 9f       	mul	r24, r27
 274:	70 0d       	add	r23, r0
 276:	9a 9f       	mul	r25, r26
 278:	70 0d       	add	r23, r0
 27a:	11 24       	eor	r1, r1
 27c:	26 0f       	add	r18, r22
 27e:	37 1f       	adc	r19, r23
 280:	2d 5f       	subi	r18, 0xFD	; 253
 282:	3e 4f       	sbci	r19, 0xFE	; 254
 284:	fa 01       	movw	r30, r20
 286:	31 96       	adiw	r30, 0x01	; 1
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	ee 0f       	add	r30, r30
 28e:	ff 1f       	adc	r31, r31
 290:	e6 0f       	add	r30, r22
 292:	f7 1f       	adc	r31, r23
 294:	ed 5f       	subi	r30, 0xFD	; 253
 296:	fe 4f       	sbci	r31, 0xFE	; 254
 298:	80 81       	ld	r24, Z
 29a:	91 81       	ldd	r25, Z+1	; 0x01
 29c:	a2 81       	ldd	r26, Z+2	; 0x02
 29e:	b3 81       	ldd	r27, Z+3	; 0x03
 2a0:	f9 01       	movw	r30, r18
 2a2:	80 83       	st	Z, r24
 2a4:	91 83       	std	Z+1, r25	; 0x01
 2a6:	a2 83       	std	Z+2, r26	; 0x02
 2a8:	b3 83       	std	Z+3, r27	; 0x03
			anim_counter++;
			if (anim_counter > 3)
				anim_counter = 0;
			if (n_measures < MAX_NUM_MEAS)
				n_measures++;
			for (i = 0; i < MAX_NUM_MEAS - 1; i++)
 2aa:	49 30       	cpi	r20, 0x09	; 9
 2ac:	51 05       	cpc	r21, r1
 2ae:	99 f6       	brne	.-90     	; 0x256 <main+0x1c6>
			{
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[MAX_NUM_MEAS - 1] = rpm_x10;
 2b0:	fb 01       	movw	r30, r22
 2b2:	ed 5f       	subi	r30, 0xFD	; 253
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	a0 a6       	std	Z+40, r10	; 0x28
 2b8:	b1 a6       	std	Z+41, r11	; 0x29
 2ba:	c2 a6       	std	Z+42, r12	; 0x2a
 2bc:	d3 a6       	std	Z+43, r13	; 0x2b

			gl_set[sensor_id].rpm_avg = 0;
 2be:	10 82       	st	Z, r1
 2c0:	11 82       	std	Z+1, r1	; 0x01
 2c2:	12 82       	std	Z+2, r1	; 0x02
 2c4:	13 82       	std	Z+3, r1	; 0x03
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
 2ca:	80 91 77 01 	lds	r24, 0x0177
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	7c 01       	movw	r14, r24
 2d2:	07 e3       	ldi	r16, 0x37	; 55
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	e0 9e       	mul	r14, r16
 2d8:	c0 01       	movw	r24, r0
 2da:	e1 9e       	mul	r14, r17
 2dc:	90 0d       	add	r25, r0
 2de:	f0 9e       	mul	r15, r16
 2e0:	90 0d       	add	r25, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	53 e0       	ldi	r21, 0x03	; 3
 2e6:	85 2e       	mov	r8, r21
 2e8:	51 e0       	ldi	r21, 0x01	; 1
 2ea:	95 2e       	mov	r9, r21
 2ec:	88 0e       	add	r8, r24
 2ee:	99 1e       	adc	r9, r25
 2f0:	2f 5f       	subi	r18, 0xFF	; 255
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	f9 01       	movw	r30, r18
 2f6:	ee 0f       	add	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	e8 0f       	add	r30, r24
 300:	f9 1f       	adc	r31, r25
 302:	ed 5f       	subi	r30, 0xFD	; 253
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	e0 80       	ld	r14, Z
 308:	f1 80       	ldd	r15, Z+1	; 0x01
 30a:	02 81       	ldd	r16, Z+2	; 0x02
 30c:	13 81       	ldd	r17, Z+3	; 0x03
 30e:	f4 01       	movw	r30, r8
 310:	80 81       	ld	r24, Z
 312:	91 81       	ldd	r25, Z+1	; 0x01
 314:	a2 81       	ldd	r26, Z+2	; 0x02
 316:	b3 81       	ldd	r27, Z+3	; 0x03
 318:	e8 0e       	add	r14, r24
 31a:	f9 1e       	adc	r15, r25
 31c:	0a 1f       	adc	r16, r26
 31e:	1b 1f       	adc	r17, r27
 320:	d4 01       	movw	r26, r8
 322:	ed 92       	st	X+, r14
 324:	fd 92       	st	X+, r15
 326:	0d 93       	st	X+, r16
 328:	1c 93       	st	X, r17
 32a:	13 97       	sbiw	r26, 0x03	; 3
				gl_set[sensor_id].rpm_his[i] = gl_set[sensor_id].rpm_his[i + 1];
			}
			gl_set[sensor_id].rpm_his[MAX_NUM_MEAS - 1] = rpm_x10;

			gl_set[sensor_id].rpm_avg = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
 32c:	2a 30       	cpi	r18, 0x0A	; 10
 32e:	31 05       	cpc	r19, r1
 330:	61 f6       	brne	.-104    	; 0x2ca <main+0x23a>
			{
				gl_set[sensor_id].rpm_avg += gl_set[sensor_id].rpm_his[i];
			}
			gl_set[sensor_id].rpm_avg = gl_set[sensor_id].rpm_avg / n_measures;
 332:	20 91 01 01 	lds	r18, 0x0101
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	c8 01       	movw	r24, r16
 33e:	b7 01       	movw	r22, r14
 340:	a4 d2       	rcall	.+1352   	; 0x88a <__divmodsi4>
 342:	f4 01       	movw	r30, r8
 344:	20 83       	st	Z, r18
 346:	31 83       	std	Z+1, r19	; 0x01
 348:	42 83       	std	Z+2, r20	; 0x02
 34a:	53 83       	std	Z+3, r21	; 0x03
 34c:	ad 86       	std	Y+13, r10	; 0x0d
 34e:	be 86       	std	Y+14, r11	; 0x0e
 350:	cf 86       	std	Y+15, r12	; 0x0f
 352:	d8 8a       	std	Y+16, r13	; 0x10
 354:	89 85       	ldd	r24, Y+9	; 0x09
 356:	9a 85       	ldd	r25, Y+10	; 0x0a
 358:	ab 85       	ldd	r26, Y+11	; 0x0b
 35a:	bc 85       	ldd	r27, Y+12	; 0x0c
 35c:	84 0d       	add	r24, r4
 35e:	95 1d       	adc	r25, r5
 360:	a6 1d       	adc	r26, r6
 362:	b7 1d       	adc	r27, r7
		}

		if(time_count >= time_count_prev)
 364:	ed 80       	ldd	r14, Y+5	; 0x05
 366:	fe 80       	ldd	r15, Y+6	; 0x06
 368:	0f 81       	ldd	r16, Y+7	; 0x07
 36a:	18 85       	ldd	r17, Y+8	; 0x08
 36c:	4e 14       	cp	r4, r14
 36e:	5f 04       	cpc	r5, r15
 370:	60 06       	cpc	r6, r16
 372:	71 06       	cpc	r7, r17
 374:	7c f0       	brlt	.+30     	; 0x394 <__stack+0x95>
		{
			time_with_current_sensor_id += time_count - time_count_prev;
 376:	9c 01       	movw	r18, r24
 378:	ad 01       	movw	r20, r26
 37a:	2e 19       	sub	r18, r14
 37c:	3f 09       	sbc	r19, r15
 37e:	40 0b       	sbc	r20, r16
 380:	51 0b       	sbc	r21, r17
 382:	29 87       	std	Y+9, r18	; 0x09
 384:	3a 87       	std	Y+10, r19	; 0x0a
 386:	4b 87       	std	Y+11, r20	; 0x0b
 388:	5c 87       	std	Y+12, r21	; 0x0c
 38a:	4d 82       	std	Y+5, r4	; 0x05
 38c:	5e 82       	std	Y+6, r5	; 0x06
 38e:	6f 82       	std	Y+7, r6	; 0x07
 390:	78 86       	std	Y+8, r7	; 0x08
 392:	04 c0       	rjmp	.+8      	; 0x39c <__stack+0x9d>
			time_count_prev = time_count;
		}
		else
		{
			time_with_current_sensor_id += time_count;
 394:	89 87       	std	Y+9, r24	; 0x09
 396:	9a 87       	std	Y+10, r25	; 0x0a
 398:	ab 87       	std	Y+11, r26	; 0x0b
 39a:	bc 87       	std	Y+12, r27	; 0x0c
		}
		
		if(time_with_current_sensor_id > 20000000)
 39c:	49 85       	ldd	r20, Y+9	; 0x09
 39e:	5a 85       	ldd	r21, Y+10	; 0x0a
 3a0:	6b 85       	ldd	r22, Y+11	; 0x0b
 3a2:	7c 85       	ldd	r23, Y+12	; 0x0c
 3a4:	41 50       	subi	r20, 0x01	; 1
 3a6:	5d 42       	sbci	r21, 0x2D	; 45
 3a8:	61 43       	sbci	r22, 0x31	; 49
 3aa:	71 40       	sbci	r23, 0x01	; 1
 3ac:	1c f1       	brlt	.+70     	; 0x3f4 <__stack+0xf5>
		{
			time_with_current_sensor_id = 0;
			if(sensor_id==1)
 3ae:	80 91 77 01 	lds	r24, 0x0177
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	71 f4       	brne	.+28     	; 0x3d2 <__stack+0xd3>
			{
				sensor_id = 0;
 3b6:	10 92 77 01 	sts	0x0177, r1
				locate(15);
 3ba:	8f e0       	ldi	r24, 0x0F	; 15
 3bc:	4f d1       	rcall	.+670    	; 0x65c <locate>
				lcd_send_4b_mode((uchar)'1');
 3be:	81 e3       	ldi	r24, 0x31	; 49
 3c0:	03 d1       	rcall	.+518    	; 0x5c8 <lcd_send_4b_mode>
				locate(79);
 3c2:	8f e4       	ldi	r24, 0x4F	; 79
 3c4:	4b d1       	rcall	.+662    	; 0x65c <locate>
				lcd_send_4b_mode((uchar)'_');
 3c6:	8f e5       	ldi	r24, 0x5F	; 95
 3c8:	ff d0       	rcall	.+510    	; 0x5c8 <lcd_send_4b_mode>
				ADMUX = 2;
 3ca:	92 e0       	ldi	r25, 0x02	; 2
 3cc:	90 93 7c 00 	sts	0x007C, r25
 3d0:	0d c0       	rjmp	.+26     	; 0x3ec <__stack+0xed>
			} 
			else
			{
				sensor_id = 1;
 3d2:	a1 e0       	ldi	r26, 0x01	; 1
 3d4:	a0 93 77 01 	sts	0x0177, r26
				locate(15);
 3d8:	8f e0       	ldi	r24, 0x0F	; 15
 3da:	40 d1       	rcall	.+640    	; 0x65c <locate>
				lcd_send_4b_mode((uchar)'_');
 3dc:	8f e5       	ldi	r24, 0x5F	; 95
 3de:	f4 d0       	rcall	.+488    	; 0x5c8 <lcd_send_4b_mode>
				locate(79);
 3e0:	8f e4       	ldi	r24, 0x4F	; 79
 3e2:	3c d1       	rcall	.+632    	; 0x65c <locate>
				lcd_send_4b_mode((uchar)'2');
 3e4:	82 e3       	ldi	r24, 0x32	; 50
 3e6:	f0 d0       	rcall	.+480    	; 0x5c8 <lcd_send_4b_mode>
				ADMUX = 3;
 3e8:	20 92 7c 00 	sts	0x007C, r2
 3ec:	19 86       	std	Y+9, r1	; 0x09
 3ee:	1a 86       	std	Y+10, r1	; 0x0a
 3f0:	1b 86       	std	Y+11, r1	; 0x0b
 3f2:	1c 86       	std	Y+12, r1	; 0x0c
			}
		}

		refresh_counter++;
 3f4:	80 91 71 01 	lds	r24, 0x0171
 3f8:	90 91 72 01 	lds	r25, 0x0172
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	90 93 72 01 	sts	0x0172, r25
 402:	80 93 71 01 	sts	0x0171, r24

		if (refresh_counter > 20000)
 406:	81 52       	subi	r24, 0x21	; 33
 408:	9e 44       	sbci	r25, 0x4E	; 78
 40a:	08 f4       	brcc	.+2      	; 0x40e <__stack+0x10f>
 40c:	ac ce       	rjmp	.-680    	; 0x166 <main+0xd6>
		{
			refresh_counter = 0;
 40e:	10 92 72 01 	sts	0x0172, r1
 412:	10 92 71 01 	sts	0x0171, r1
			lcd_send_floatx10(gl_set[0].rpm_avg, 5, 7, 1); //rpm_x10
 416:	60 91 03 01 	lds	r22, 0x0103
 41a:	70 91 04 01 	lds	r23, 0x0104
 41e:	80 91 05 01 	lds	r24, 0x0105
 422:	90 91 06 01 	lds	r25, 0x0106
 426:	45 e0       	ldi	r20, 0x05	; 5
 428:	27 e0       	ldi	r18, 0x07	; 7
 42a:	01 e0       	ldi	r16, 0x01	; 1
 42c:	69 d1       	rcall	.+722    	; 0x700 <lcd_send_floatx10>
			lcd_send_floatx10(gl_set[1].rpm_avg, 69, 7, 1); //rpm_x10
 42e:	60 91 3a 01 	lds	r22, 0x013A
 432:	70 91 3b 01 	lds	r23, 0x013B
 436:	80 91 3c 01 	lds	r24, 0x013C
 43a:	90 91 3d 01 	lds	r25, 0x013D
 43e:	45 e4       	ldi	r20, 0x45	; 69
 440:	27 e0       	ldi	r18, 0x07	; 7
 442:	5e d1       	rcall	.+700    	; 0x700 <lcd_send_floatx10>
 444:	90 ce       	rjmp	.-736    	; 0x166 <main+0xd6>

00000446 <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1<<COM1B1)|(1<<WGM01)|(1<<WGM00);
 446:	83 e2       	ldi	r24, 0x23	; 35
 448:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00); 
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25; 
 44e:	89 e1       	ldi	r24, 0x19	; 25
 450:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0<<OCIE0A);
 452:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 456:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1<<TOIE1);
 460:	90 93 6f 00 	sts	0x006F, r25


}
 464:	08 95       	ret

00000466 <setup_io>:


void setup_io()
{
	DIDR0 = (1<<ADC2D) | (1<<ADC3D); //disable digital input on ADC2 and ADC3
 466:	8c e0       	ldi	r24, 0x0C	; 12
 468:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1<<PORTB1); //set push button as input
 46c:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1<<PORTB1); //activte the pull up resistor for the push button
 46e:	29 9a       	sbi	0x05, 1	; 5
	
	LCD_EN_PORT |= _BV(LCD_EN);
 470:	45 9a       	sbi	0x08, 5	; 8
  LCD_RS_PORT &= ~(_BV(LCD_RS));	
 472:	5c 98       	cbi	0x0b, 4	; 11
}
 474:	08 95       	ret

00000476 <__vector_13>:
}



ISR(TIMER1_OVF_vect)
{
 476:	1f 92       	push	r1
 478:	0f 92       	push	r0
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	0f 92       	push	r0
 47e:	11 24       	eor	r1, r1
 480:	8f 93       	push	r24
	//LED_ON;
	post_scaller++;
 482:	80 91 02 01 	lds	r24, 0x0102
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	80 93 02 01 	sts	0x0102, r24
}
 48c:	8f 91       	pop	r24
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 498:	1f 92       	push	r1
 49a:	0f 92       	push	r0
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	0f 92       	push	r0
 4a0:	11 24       	eor	r1, r1
 4a2:	2f 93       	push	r18
 4a4:	3f 93       	push	r19
 4a6:	4f 93       	push	r20
 4a8:	5f 93       	push	r21
 4aa:	6f 93       	push	r22
 4ac:	7f 93       	push	r23
 4ae:	8f 93       	push	r24
 4b0:	9f 93       	push	r25
 4b2:	af 93       	push	r26
 4b4:	bf 93       	push	r27
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	ef 93       	push	r30
 4bc:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value 
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC>>2;			
 4be:	80 91 77 01 	lds	r24, 0x0177
 4c2:	48 2f       	mov	r20, r24
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	20 91 78 00 	lds	r18, 0x0078
 4ca:	30 91 79 00 	lds	r19, 0x0079
 4ce:	36 95       	lsr	r19
 4d0:	27 95       	ror	r18
 4d2:	36 95       	lsr	r19
 4d4:	27 95       	ror	r18
 4d6:	87 e3       	ldi	r24, 0x37	; 55
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	48 9f       	mul	r20, r24
 4dc:	f0 01       	movw	r30, r0
 4de:	49 9f       	mul	r20, r25
 4e0:	f0 0d       	add	r31, r0
 4e2:	58 9f       	mul	r21, r24
 4e4:	f0 0d       	add	r31, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	ed 5f       	subi	r30, 0xFD	; 253
 4ea:	fe 4f       	sbci	r31, 0xFE	; 254
 4ec:	22 ab       	std	Z+50, r18	; 0x32
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state==0)) //a cycle is detected 
 4ee:	81 a9       	ldd	r24, Z+49	; 0x31
 4f0:	82 17       	cp	r24, r18
 4f2:	c8 f4       	brcc	.+50     	; 0x526 <__vector_21+0x8e>
 4f4:	83 a9       	ldd	r24, Z+51	; 0x33
 4f6:	88 23       	and	r24, r24
 4f8:	b1 f4       	brne	.+44     	; 0x526 <__vector_21+0x8e>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	83 ab       	std	Z+51, r24	; 0x33
		t_capture=TCNT1;TCNT1 = 0;
 4fe:	80 91 84 00 	lds	r24, 0x0084
 502:	90 91 85 00 	lds	r25, 0x0085
 506:	90 93 76 01 	sts	0x0176, r25
 50a:	80 93 75 01 	sts	0x0175, r24
 50e:	10 92 85 00 	sts	0x0085, r1
 512:	10 92 84 00 	sts	0x0084, r1
		t_postscale=post_scaller; post_scaller=0;
 516:	80 91 02 01 	lds	r24, 0x0102
 51a:	80 93 73 01 	sts	0x0173, r24
 51e:	10 92 74 01 	sts	0x0174, r1
 522:	10 92 02 01 	sts	0x0102, r1
	}

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state==1)) //a low level is detected
 526:	87 e3       	ldi	r24, 0x37	; 55
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	48 9f       	mul	r20, r24
 52c:	f0 01       	movw	r30, r0
 52e:	49 9f       	mul	r20, r25
 530:	f0 0d       	add	r31, r0
 532:	58 9f       	mul	r21, r24
 534:	f0 0d       	add	r31, r0
 536:	11 24       	eor	r1, r1
 538:	ed 5f       	subi	r30, 0xFD	; 253
 53a:	fe 4f       	sbci	r31, 0xFE	; 254
 53c:	92 a9       	ldd	r25, Z+50	; 0x32
 53e:	80 a9       	ldd	r24, Z+48	; 0x30
 540:	98 17       	cp	r25, r24
 542:	20 f4       	brcc	.+8      	; 0x54c <__vector_21+0xb4>
 544:	83 a9       	ldd	r24, Z+51	; 0x33
 546:	81 30       	cpi	r24, 0x01	; 1
 548:	09 f4       	brne	.+2      	; 0x54c <__vector_21+0xb4>
	{
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
 54a:	13 aa       	std	Z+51, r1	; 0x33
	}

	if (delta(gl_set[sensor_id].ir_history_a,gl_set[sensor_id].ir_value) > 10)
 54c:	c7 e3       	ldi	r28, 0x37	; 55
 54e:	d0 e0       	ldi	r29, 0x00	; 0
 550:	4c 9f       	mul	r20, r28
 552:	f0 01       	movw	r30, r0
 554:	4d 9f       	mul	r20, r29
 556:	f0 0d       	add	r31, r0
 558:	5c 9f       	mul	r21, r28
 55a:	f0 0d       	add	r31, r0
 55c:	11 24       	eor	r1, r1
 55e:	ed 5f       	subi	r30, 0xFD	; 253
 560:	fe 4f       	sbci	r31, 0xFE	; 254
 562:	84 a9       	ldd	r24, Z+52	; 0x34
 564:	62 a9       	ldd	r22, Z+50	; 0x32
 566:	8d dd       	rcall	.-1254   	; 0x82 <delta>
 568:	8b 30       	cpi	r24, 0x0B	; 11
 56a:	d8 f0       	brcs	.+54     	; 0x5a2 <__vector_21+0x10a>
	{
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
 56c:	80 91 77 01 	lds	r24, 0x0177
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	8c 9f       	mul	r24, r28
 574:	f0 01       	movw	r30, r0
 576:	8d 9f       	mul	r24, r29
 578:	f0 0d       	add	r31, r0
 57a:	9c 9f       	mul	r25, r28
 57c:	f0 0d       	add	r31, r0
 57e:	11 24       	eor	r1, r1
 580:	ed 5f       	subi	r30, 0xFD	; 253
 582:	fe 4f       	sbci	r31, 0xFE	; 254
 584:	24 a9       	ldd	r18, Z+52	; 0x34
 586:	25 ab       	std	Z+53, r18	; 0x35
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 588:	82 a9       	ldd	r24, Z+50	; 0x32
 58a:	84 ab       	std	Z+52, r24	; 0x34
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a+gl_set[sensor_id].ir_history_b)/2;
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	82 0f       	add	r24, r18
 590:	91 1d       	adc	r25, r1
 592:	95 95       	asr	r25
 594:	87 95       	ror	r24
 596:	28 2f       	mov	r18, r24
 598:	86 ab       	std	Z+54, r24	; 0x36
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 59a:	2b 5f       	subi	r18, 0xFB	; 251
 59c:	21 ab       	std	Z+49, r18	; 0x31
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 59e:	2a 50       	subi	r18, 0x0A	; 10
 5a0:	20 ab       	std	Z+48, r18	; 0x30
	}
}
 5a2:	ff 91       	pop	r31
 5a4:	ef 91       	pop	r30
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <lcd_send_4b_mode>:



void lcd_send_4b_mode(unsigned char data){
	
  LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 5c8:	9a b1       	in	r25, 0x0a	; 10
 5ca:	9f 60       	ori	r25, 0x0F	; 15
 5cc:	9a b9       	out	0x0a, r25	; 10
	
	LCD_EN_PORT |= _BV(LCD_EN);
 5ce:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5d0:	48 e8       	ldi	r20, 0x88	; 136
 5d2:	53 e1       	ldi	r21, 0x13	; 19
 5d4:	fa 01       	movw	r30, r20
 5d6:	31 97       	sbiw	r30, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_send_4b_mode+0xe>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5da:	9b b1       	in	r25, 0x0b	; 11
 5dc:	90 7f       	andi	r25, 0xF0	; 240
 5de:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data>>4)<<LCD_SHIFT)&LCD_MASK;
 5e0:	2b b1       	in	r18, 0x0b	; 11
 5e2:	98 2f       	mov	r25, r24
 5e4:	92 95       	swap	r25
 5e6:	9f 70       	andi	r25, 0x0F	; 15
 5e8:	92 2b       	or	r25, r18
 5ea:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5ec:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 5ee:	45 9a       	sbi	0x08, 5	; 8
 5f0:	fa 01       	movw	r30, r20
 5f2:	31 97       	sbiw	r30, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <lcd_send_4b_mode+0x2a>
	_delay_ms (1);
	
	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5f6:	9b b1       	in	r25, 0x0b	; 11
 5f8:	90 7f       	andi	r25, 0xF0	; 240
 5fa:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |=  ((data&LCD_MASK)<<LCD_SHIFT);
 5fc:	9b b1       	in	r25, 0x0b	; 11
 5fe:	8f 70       	andi	r24, 0x0F	; 15
 600:	98 2b       	or	r25, r24
 602:	9b b9       	out	0x0b, r25	; 11


	LCD_EN_PORT &= ~(_BV(LCD_EN));
 604:	45 98       	cbi	0x08, 5	; 8
 606:	ca 01       	movw	r24, r20
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	f1 f7       	brne	.-4      	; 0x608 <lcd_send_4b_mode+0x40>
	_delay_ms (1);
} 
 60c:	08 95       	ret

0000060e <cls>:
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
		cls();
}
void cls(){     // clear the display
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 60e:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(0x01);   
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	da df       	rcall	.-76     	; 0x5c8 <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 614:	5c 9a       	sbi	0x0b, 4	; 11
}
 616:	08 95       	ret

00000618 <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}


void ini_lcd_4_bit_mode(){
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	c8 e5       	ldi	r28, 0x58	; 88
 61e:	d0 e0       	ldi	r29, 0x00	; 0
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 620:	fe 01       	movw	r30, r28
 622:	84 91       	lpm	r24, Z+
 624:	d1 df       	rcall	.-94     	; 0x5c8 <lcd_send_4b_mode>
 626:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode(){
   unsigned char i;
	 
   
   for (i = 0; i< 8; i++){
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	c0 36       	cpi	r28, 0x60	; 96
 62c:	df 07       	cpc	r29, r31
 62e:	c1 f7       	brne	.-16     	; 0x620 <ini_lcd_4_bit_mode+0x8>
	 	//test = pgm_read_byte(lcd_ini + i);
    lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
   }
   LCD_RS_PORT |= _BV(LCD_RS);
 630:	5c 9a       	sbi	0x0b, 4	; 11
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms (1);
} 

void lcd_ini_sequence()
{
 638:	84 ec       	ldi	r24, 0xC4	; 196
 63a:	99 e0       	ldi	r25, 0x09	; 9
 63c:	24 ef       	ldi	r18, 0xF4	; 244
 63e:	31 e0       	ldi	r19, 0x01	; 1
 640:	f9 01       	movw	r30, r18
 642:	31 97       	sbiw	r30, 0x01	; 1
 644:	f1 f7       	brne	.-4      	; 0x642 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 646:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 648:	d9 f7       	brne	.-10     	; 0x640 <lcd_ini_sequence+0x8>
		
		_delay_ms(250); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 64a:	e6 df       	rcall	.-52     	; 0x618 <ini_lcd_4_bit_mode>
		cls();
 64c:	e0 df       	rcall	.-64     	; 0x60e <cls>
 64e:	80 e5       	ldi	r24, 0x50	; 80
 650:	93 ec       	ldi	r25, 0xC3	; 195
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <lcd_ini_sequence+0x1a>
		_delay_ms(10); //wait for LCD to start up
		ini_lcd_4_bit_mode();
 656:	e0 df       	rcall	.-64     	; 0x618 <ini_lcd_4_bit_mode>
		cls();
 658:	da df       	rcall	.-76     	; 0x60e <cls>
}
 65a:	08 95       	ret

0000065c <locate>:
   LCD_RS_PORT |= _BV(LCD_RS);
}

void locate(unsigned char pos){
   pos = pos | (1 << 7);
   LCD_RS_PORT &= ~(_BV(LCD_RS));
 65c:	5c 98       	cbi	0x0b, 4	; 11
   lcd_send_4b_mode(pos);   
 65e:	80 68       	ori	r24, 0x80	; 128
 660:	b3 df       	rcall	.-154    	; 0x5c8 <lcd_send_4b_mode>
   LCD_RS_PORT |= _BV(LCD_RS);
 662:	5c 9a       	sbi	0x0b, 4	; 11
}
 664:	08 95       	ret

00000666 <put_str>:
	{
		lcd_send_4b_mode(' ');  
	}
}

void put_str(uchar pos, char* str){     
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 670:	f5 df       	rcall	.-22     	; 0x65c <locate>
 672:	c0 e0       	ldi	r28, 0x00	; 0
 674:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i< 16; i++){				
		lcd_send_4b_mode(pgm_read_byte(str + i));
 676:	f8 01       	movw	r30, r16
 678:	ec 0f       	add	r30, r28
 67a:	fd 1f       	adc	r31, r29
 67c:	e4 91       	lpm	r30, Z+
 67e:	8e 2f       	mov	r24, r30
 680:	a3 df       	rcall	.-186    	; 0x5c8 <lcd_send_4b_mode>
 682:	21 96       	adiw	r28, 0x01	; 1
}

void put_str(uchar pos, char* str){     
	uchar i;
	locate(pos);
	for (i = 0; i< 16; i++){				
 684:	c0 31       	cpi	r28, 0x10	; 16
 686:	d1 05       	cpc	r29, r1
 688:	b1 f7       	brne	.-20     	; 0x676 <put_str+0x10>
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <clr_line>:
   LCD_RS_PORT &= ~(_BV(LCD_RS));
   lcd_send_4b_mode(0x01);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add){     // clear line
 694:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 696:	e2 df       	rcall	.-60     	; 0x65c <locate>
 698:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<16; i++)
	{
		lcd_send_4b_mode(' ');  
 69a:	80 e2       	ldi	r24, 0x20	; 32
 69c:	95 df       	rcall	.-214    	; 0x5c8 <lcd_send_4b_mode>
}

void clr_line(uchar start_add){     // clear line
	uchar i;
	locate(start_add);
	for (i=0; i<16; i++)
 69e:	1f 5f       	subi	r17, 0xFF	; 255
 6a0:	10 31       	cpi	r17, 0x10	; 16
 6a2:	d9 f7       	brne	.-10     	; 0x69a <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');  
	}
}
 6a4:	1f 91       	pop	r17
 6a6:	08 95       	ret

000006a8 <lcd_contrast>:
void lcd_contrast()
{


	
}
 6a8:	08 95       	ret

000006aa <format>:

void format(char* line1,char* line2){     // reformat the display
 6aa:	ef 92       	push	r14
 6ac:	ff 92       	push	r15
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	8c 01       	movw	r16, r24
 6b8:	7b 01       	movw	r14, r22
    unsigned char i;
		locate(0);
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	cf df       	rcall	.-98     	; 0x65c <locate>
 6be:	c0 e0       	ldi	r28, 0x00	; 0
 6c0:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
 6c2:	f8 01       	movw	r30, r16
 6c4:	ec 0f       	add	r30, r28
 6c6:	fd 1f       	adc	r31, r29
 6c8:	e4 91       	lpm	r30, Z+
 6ca:	8e 2f       	mov	r24, r30
 6cc:	7d df       	rcall	.-262    	; 0x5c8 <lcd_send_4b_mode>
 6ce:	21 96       	adiw	r28, 0x01	; 1
}

void format(char* line1,char* line2){     // reformat the display
    unsigned char i;
		locate(0);
		for (i = 0; i< 16; i++){				
 6d0:	c0 31       	cpi	r28, 0x10	; 16
 6d2:	d1 05       	cpc	r29, r1
 6d4:	b1 f7       	brne	.-20     	; 0x6c2 <format+0x18>
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
 6d6:	80 e4       	ldi	r24, 0x40	; 64
 6d8:	c1 df       	rcall	.-126    	; 0x65c <locate>
 6da:	c0 e0       	ldi	r28, 0x00	; 0
 6dc:	d0 e0       	ldi	r29, 0x00	; 0
		for (i = 0; i< 16; i++){
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
 6de:	f7 01       	movw	r30, r14
 6e0:	ec 0f       	add	r30, r28
 6e2:	fd 1f       	adc	r31, r29
 6e4:	e4 91       	lpm	r30, Z+
 6e6:	8e 2f       	mov	r24, r30
 6e8:	6f df       	rcall	.-290    	; 0x5c8 <lcd_send_4b_mode>
 6ea:	21 96       	adiw	r28, 0x01	; 1
		locate(0);
		for (i = 0; i< 16; i++){				
			lcd_send_4b_mode(pgm_read_byte(line1 + i));
		}
		locate(64);
		for (i = 0; i< 16; i++){
 6ec:	c0 31       	cpi	r28, 0x10	; 16
 6ee:	d1 05       	cpc	r29, r1
 6f0:	b1 f7       	brne	.-20     	; 0x6de <format+0x34>
			lcd_send_4b_mode(pgm_read_byte(line2 + i));
		}
}
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	1f 91       	pop	r17
 6f8:	0f 91       	pop	r16
 6fa:	ff 90       	pop	r15
 6fc:	ef 90       	pop	r14
 6fe:	08 95       	ret

00000700 <lcd_send_floatx10>:
   lcd_send_4b_mode(pos);   
   LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data,uchar location, uchar len, uchar d_len)
{
 700:	af 92       	push	r10
 702:	bf 92       	push	r11
 704:	cf 92       	push	r12
 706:	df 92       	push	r13
 708:	ef 92       	push	r14
 70a:	ff 92       	push	r15
 70c:	0f 93       	push	r16
 70e:	1f 93       	push	r17
 710:	df 93       	push	r29
 712:	cf 93       	push	r28
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	60 97       	sbiw	r28, 0x10	; 16
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de bf       	out	0x3e, r29	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd bf       	out	0x3d, r28	; 61
 724:	6b 01       	movw	r12, r22
 726:	7c 01       	movw	r14, r24
 728:	14 2f       	mov	r17, r20
 72a:	a2 2e       	mov	r10, r18
 72c:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];
	
	uchar i,y,temp,int_len;
	t=0;
 72e:	10 92 00 01 	sts	0x0100, r1

	if (data < 0)
 732:	97 ff       	sbrs	r25, 7
 734:	03 c0       	rjmp	.+6      	; 0x73c <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 736:	8e e4       	ldi	r24, 0x4E	; 78
 738:	89 83       	std	Y+1, r24	; 0x01
 73a:	06 c0       	rjmp	.+12     	; 0x748 <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 73c:	ae 01       	movw	r20, r28
 73e:	4f 5f       	subi	r20, 0xFF	; 255
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	2a e0       	ldi	r18, 0x0A	; 10
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	de d0       	rcall	.+444    	; 0x904 <ltoa>
	}

	locate(location);
 748:	81 2f       	mov	r24, r17
 74a:	88 df       	rcall	.-240    	; 0x65c <locate>

	i=0;
	if (d_len == 2)
 74c:	82 e0       	ldi	r24, 0x02	; 2
 74e:	b8 16       	cp	r11, r24
 750:	11 f0       	breq	.+4      	; 0x756 <lcd_send_floatx10+0x56>
 752:	8a e0       	ldi	r24, 0x0A	; 10
 754:	01 c0       	rjmp	.+2      	; 0x758 <lcd_send_floatx10+0x58>
 756:	84 e6       	ldi	r24, 0x64	; 100
		temp = 100;
	}else{
		temp = 10;	
	}

	if( data >= temp){
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	a0 e0       	ldi	r26, 0x00	; 0
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	c8 16       	cp	r12, r24
 760:	d9 06       	cpc	r13, r25
 762:	ea 06       	cpc	r14, r26
 764:	fb 06       	cpc	r15, r27
 766:	0c f4       	brge	.+2      	; 0x76a <lcd_send_floatx10+0x6a>
 768:	47 c0       	rjmp	.+142    	; 0x7f8 <lcd_send_floatx10+0xf8>
		if (strlen(buffer)>len)
 76a:	fe 01       	movw	r30, r28
 76c:	31 96       	adiw	r30, 0x01	; 1
 76e:	df 01       	movw	r26, r30
 770:	0d 90       	ld	r0, X+
 772:	00 20       	and	r0, r0
 774:	e9 f7       	brne	.-6      	; 0x770 <lcd_send_floatx10+0x70>
 776:	11 97       	sbiw	r26, 0x01	; 1
 778:	ae 1b       	sub	r26, r30
 77a:	bf 0b       	sbc	r27, r31
 77c:	8a 2d       	mov	r24, r10
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	8a 17       	cp	r24, r26
 782:	9b 07       	cpc	r25, r27
 784:	10 f4       	brcc	.+4      	; 0x78a <lcd_send_floatx10+0x8a>
 786:	8a 2d       	mov	r24, r10
 788:	01 c0       	rjmp	.+2      	; 0x78c <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 78a:	8a 2f       	mov	r24, r26
 78c:	00 e0       	ldi	r16, 0x00	; 0
		}

		for(i=0; i<(int_len-d_len);i++)
 78e:	e8 2e       	mov	r14, r24
 790:	ff 24       	eor	r15, r15
 792:	eb 18       	sub	r14, r11
 794:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 796:	6e 01       	movw	r12, r28
 798:	08 94       	sec
 79a:	c1 1c       	adc	r12, r1
 79c:	d1 1c       	adc	r13, r1
 79e:	0a c0       	rjmp	.+20     	; 0x7b4 <lcd_send_floatx10+0xb4>
 7a0:	ec 0d       	add	r30, r12
 7a2:	fd 1d       	adc	r31, r13
 7a4:	80 81       	ld	r24, Z
 7a6:	10 df       	rcall	.-480    	; 0x5c8 <lcd_send_4b_mode>
			t++;
 7a8:	80 91 00 01 	lds	r24, 0x0100
 7ac:	8f 5f       	subi	r24, 0xFF	; 255
 7ae:	80 93 00 01 	sts	0x0100, r24
		else
		{
			int_len = strlen(buffer);
		}

		for(i=0; i<(int_len-d_len);i++)
 7b2:	0f 5f       	subi	r16, 0xFF	; 255
 7b4:	e0 2f       	mov	r30, r16
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	ee 15       	cp	r30, r14
 7ba:	ff 05       	cpc	r31, r15
 7bc:	8c f3       	brlt	.-30     	; 0x7a0 <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 7be:	8e e2       	ldi	r24, 0x2E	; 46
 7c0:	03 df       	rcall	.-506    	; 0x5c8 <lcd_send_4b_mode>
		t++;
 7c2:	80 91 00 01 	lds	r24, 0x0100
 7c6:	8f 5f       	subi	r24, 0xFF	; 255
 7c8:	80 93 00 01 	sts	0x0100, r24
 7cc:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<(d_len);y++)
		{
			lcd_send_4b_mode(buffer[i]);
 7ce:	7e 01       	movw	r14, r28
 7d0:	08 94       	sec
 7d2:	e1 1c       	adc	r14, r1
 7d4:	f1 1c       	adc	r15, r1
 7d6:	0b c0       	rjmp	.+22     	; 0x7ee <lcd_send_floatx10+0xee>
 7d8:	f7 01       	movw	r30, r14
 7da:	e8 0f       	add	r30, r24
 7dc:	f1 1d       	adc	r31, r1
 7de:	80 81       	ld	r24, Z
 7e0:	f3 de       	rcall	.-538    	; 0x5c8 <lcd_send_4b_mode>
			i++;	
			t++;
 7e2:	80 91 00 01 	lds	r24, 0x0100
 7e6:	8f 5f       	subi	r24, 0xFF	; 255
 7e8:	80 93 00 01 	sts	0x0100, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<(d_len);y++)
 7ec:	1f 5f       	subi	r17, 0xFF	; 255
 7ee:	81 2f       	mov	r24, r17
 7f0:	80 0f       	add	r24, r16
 7f2:	1b 15       	cp	r17, r11
 7f4:	88 f3       	brcs	.-30     	; 0x7d8 <lcd_send_floatx10+0xd8>
 7f6:	34 c0       	rjmp	.+104    	; 0x860 <lcd_send_floatx10+0x160>
			i++;	
			t++;
		}
		
	}else{
		lcd_send_4b_mode('0');
 7f8:	80 e3       	ldi	r24, 0x30	; 48
 7fa:	e6 de       	rcall	.-564    	; 0x5c8 <lcd_send_4b_mode>
		t++;
 7fc:	80 91 00 01 	lds	r24, 0x0100
 800:	8f 5f       	subi	r24, 0xFF	; 255
 802:	80 93 00 01 	sts	0x0100, r24
		lcd_send_4b_mode('.');
 806:	8e e2       	ldi	r24, 0x2E	; 46
 808:	df de       	rcall	.-578    	; 0x5c8 <lcd_send_4b_mode>
		t++;
 80a:	80 91 00 01 	lds	r24, 0x0100
 80e:	8f 5f       	subi	r24, 0xFF	; 255
 810:	80 93 00 01 	sts	0x0100, r24
 814:	10 e0       	ldi	r17, 0x00	; 0
		for(y=0; y<d_len;y++)
		{
			if(y < strlen(buffer))
 816:	7e 01       	movw	r14, r28
 818:	08 94       	sec
 81a:	e1 1c       	adc	r14, r1
 81c:	f1 1c       	adc	r15, r1
 81e:	16 c0       	rjmp	.+44     	; 0x84c <lcd_send_floatx10+0x14c>
 820:	f7 01       	movw	r30, r14
 822:	01 90       	ld	r0, Z+
 824:	00 20       	and	r0, r0
 826:	e9 f7       	brne	.-6      	; 0x822 <lcd_send_floatx10+0x122>
 828:	31 97       	sbiw	r30, 0x01	; 1
 82a:	ee 19       	sub	r30, r14
 82c:	ff 09       	sbc	r31, r15
 82e:	a1 2f       	mov	r26, r17
 830:	b0 e0       	ldi	r27, 0x00	; 0
 832:	ae 17       	cp	r26, r30
 834:	bf 07       	cpc	r27, r31
 836:	48 f4       	brcc	.+18     	; 0x84a <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);	
 838:	ae 0d       	add	r26, r14
 83a:	bf 1d       	adc	r27, r15
 83c:	8c 91       	ld	r24, X
 83e:	c4 de       	rcall	.-632    	; 0x5c8 <lcd_send_4b_mode>
				i++;
				t++;
 840:	80 91 00 01 	lds	r24, 0x0100
 844:	8f 5f       	subi	r24, 0xFF	; 255
 846:	80 93 00 01 	sts	0x0100, r24
	}else{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for(y=0; y<d_len;y++)
 84a:	1f 5f       	subi	r17, 0xFF	; 255
 84c:	1b 15       	cp	r17, r11
 84e:	40 f3       	brcs	.-48     	; 0x820 <lcd_send_floatx10+0x120>
 850:	07 c0       	rjmp	.+14     	; 0x860 <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
	{
		lcd_send_4b_mode(' ');
 852:	80 e2       	ldi	r24, 0x20	; 32
 854:	b9 de       	rcall	.-654    	; 0x5c8 <lcd_send_4b_mode>
		t++;
 856:	80 91 00 01 	lds	r24, 0x0100
 85a:	8f 5f       	subi	r24, 0xFF	; 255
 85c:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t<(len))//was 4
 860:	80 91 00 01 	lds	r24, 0x0100
 864:	8a 15       	cp	r24, r10
 866:	a8 f3       	brcs	.-22     	; 0x852 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 868:	60 96       	adiw	r28, 0x10	; 16
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	f8 94       	cli
 86e:	de bf       	out	0x3e, r29	; 62
 870:	0f be       	out	0x3f, r0	; 63
 872:	cd bf       	out	0x3d, r28	; 61
 874:	cf 91       	pop	r28
 876:	df 91       	pop	r29
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	df 90       	pop	r13
 882:	cf 90       	pop	r12
 884:	bf 90       	pop	r11
 886:	af 90       	pop	r10
 888:	08 95       	ret

0000088a <__divmodsi4>:
 88a:	97 fb       	bst	r25, 7
 88c:	09 2e       	mov	r0, r25
 88e:	05 26       	eor	r0, r21
 890:	0e d0       	rcall	.+28     	; 0x8ae <__divmodsi4_neg1>
 892:	57 fd       	sbrc	r21, 7
 894:	04 d0       	rcall	.+8      	; 0x89e <__divmodsi4_neg2>
 896:	14 d0       	rcall	.+40     	; 0x8c0 <__udivmodsi4>
 898:	0a d0       	rcall	.+20     	; 0x8ae <__divmodsi4_neg1>
 89a:	00 1c       	adc	r0, r0
 89c:	38 f4       	brcc	.+14     	; 0x8ac <__divmodsi4_exit>

0000089e <__divmodsi4_neg2>:
 89e:	50 95       	com	r21
 8a0:	40 95       	com	r20
 8a2:	30 95       	com	r19
 8a4:	21 95       	neg	r18
 8a6:	3f 4f       	sbci	r19, 0xFF	; 255
 8a8:	4f 4f       	sbci	r20, 0xFF	; 255
 8aa:	5f 4f       	sbci	r21, 0xFF	; 255

000008ac <__divmodsi4_exit>:
 8ac:	08 95       	ret

000008ae <__divmodsi4_neg1>:
 8ae:	f6 f7       	brtc	.-4      	; 0x8ac <__divmodsi4_exit>
 8b0:	90 95       	com	r25
 8b2:	80 95       	com	r24
 8b4:	70 95       	com	r23
 8b6:	61 95       	neg	r22
 8b8:	7f 4f       	sbci	r23, 0xFF	; 255
 8ba:	8f 4f       	sbci	r24, 0xFF	; 255
 8bc:	9f 4f       	sbci	r25, 0xFF	; 255
 8be:	08 95       	ret

000008c0 <__udivmodsi4>:
 8c0:	a1 e2       	ldi	r26, 0x21	; 33
 8c2:	1a 2e       	mov	r1, r26
 8c4:	aa 1b       	sub	r26, r26
 8c6:	bb 1b       	sub	r27, r27
 8c8:	fd 01       	movw	r30, r26
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <__udivmodsi4_ep>

000008cc <__udivmodsi4_loop>:
 8cc:	aa 1f       	adc	r26, r26
 8ce:	bb 1f       	adc	r27, r27
 8d0:	ee 1f       	adc	r30, r30
 8d2:	ff 1f       	adc	r31, r31
 8d4:	a2 17       	cp	r26, r18
 8d6:	b3 07       	cpc	r27, r19
 8d8:	e4 07       	cpc	r30, r20
 8da:	f5 07       	cpc	r31, r21
 8dc:	20 f0       	brcs	.+8      	; 0x8e6 <__udivmodsi4_ep>
 8de:	a2 1b       	sub	r26, r18
 8e0:	b3 0b       	sbc	r27, r19
 8e2:	e4 0b       	sbc	r30, r20
 8e4:	f5 0b       	sbc	r31, r21

000008e6 <__udivmodsi4_ep>:
 8e6:	66 1f       	adc	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	1a 94       	dec	r1
 8f0:	69 f7       	brne	.-38     	; 0x8cc <__udivmodsi4_loop>
 8f2:	60 95       	com	r22
 8f4:	70 95       	com	r23
 8f6:	80 95       	com	r24
 8f8:	90 95       	com	r25
 8fa:	9b 01       	movw	r18, r22
 8fc:	ac 01       	movw	r20, r24
 8fe:	bd 01       	movw	r22, r26
 900:	cf 01       	movw	r24, r30
 902:	08 95       	ret

00000904 <ltoa>:
 904:	fa 01       	movw	r30, r20
 906:	cf 93       	push	r28
 908:	ff 93       	push	r31
 90a:	ef 93       	push	r30
 90c:	22 30       	cpi	r18, 0x02	; 2
 90e:	3c f1       	brlt	.+78     	; 0x95e <ltoa+0x5a>
 910:	25 32       	cpi	r18, 0x25	; 37
 912:	2c f5       	brge	.+74     	; 0x95e <ltoa+0x5a>
 914:	c2 2f       	mov	r28, r18
 916:	e8 94       	clt
 918:	ca 30       	cpi	r28, 0x0A	; 10
 91a:	49 f4       	brne	.+18     	; 0x92e <ltoa+0x2a>
 91c:	97 fb       	bst	r25, 7
 91e:	3e f4       	brtc	.+14     	; 0x92e <ltoa+0x2a>
 920:	90 95       	com	r25
 922:	80 95       	com	r24
 924:	70 95       	com	r23
 926:	61 95       	neg	r22
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	8f 4f       	sbci	r24, 0xFF	; 255
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	2c 2f       	mov	r18, r28
 930:	33 27       	eor	r19, r19
 932:	44 27       	eor	r20, r20
 934:	55 27       	eor	r21, r21
 936:	ff 93       	push	r31
 938:	ef 93       	push	r30
 93a:	c2 df       	rcall	.-124    	; 0x8c0 <__udivmodsi4>
 93c:	ef 91       	pop	r30
 93e:	ff 91       	pop	r31
 940:	60 5d       	subi	r22, 0xD0	; 208
 942:	6a 33       	cpi	r22, 0x3A	; 58
 944:	0c f0       	brlt	.+2      	; 0x948 <ltoa+0x44>
 946:	69 5d       	subi	r22, 0xD9	; 217
 948:	61 93       	st	Z+, r22
 94a:	b9 01       	movw	r22, r18
 94c:	ca 01       	movw	r24, r20
 94e:	60 50       	subi	r22, 0x00	; 0
 950:	70 40       	sbci	r23, 0x00	; 0
 952:	80 40       	sbci	r24, 0x00	; 0
 954:	90 40       	sbci	r25, 0x00	; 0
 956:	59 f7       	brne	.-42     	; 0x92e <ltoa+0x2a>
 958:	16 f4       	brtc	.+4      	; 0x95e <ltoa+0x5a>
 95a:	cd e2       	ldi	r28, 0x2D	; 45
 95c:	c1 93       	st	Z+, r28
 95e:	10 82       	st	Z, r1
 960:	8f 91       	pop	r24
 962:	9f 91       	pop	r25
 964:	cf 91       	pop	r28
 966:	00 c0       	rjmp	.+0      	; 0x968 <strrev>

00000968 <strrev>:
 968:	dc 01       	movw	r26, r24
 96a:	fc 01       	movw	r30, r24
 96c:	67 2f       	mov	r22, r23
 96e:	71 91       	ld	r23, Z+
 970:	77 23       	and	r23, r23
 972:	e1 f7       	brne	.-8      	; 0x96c <strrev+0x4>
 974:	32 97       	sbiw	r30, 0x02	; 2
 976:	04 c0       	rjmp	.+8      	; 0x980 <strrev+0x18>
 978:	7c 91       	ld	r23, X
 97a:	6d 93       	st	X+, r22
 97c:	70 83       	st	Z, r23
 97e:	62 91       	ld	r22, -Z
 980:	ae 17       	cp	r26, r30
 982:	bf 07       	cpc	r27, r31
 984:	c8 f3       	brcs	.-14     	; 0x978 <strrev+0x10>
 986:	08 95       	ret

00000988 <_exit>:
 988:	f8 94       	cli

0000098a <__stop_program>:
 98a:	ff cf       	rjmp	.-2      	; 0x98a <__stop_program>
