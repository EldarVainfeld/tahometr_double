
ikatach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000097a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000086  00800100  00800100  000009ee  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000416  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000dab  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000043f  00000000  00000000  00001c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008f6  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000322  00000000  00000000  00002ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000448  00000000  00000000  00002dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2f c0       	rjmp	.+94     	; 0x60 <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	37 c0       	rjmp	.+110    	; 0x80 <__bad_interrupt>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	95 c1       	rjmp	.+810    	; 0x346 <__vector_13>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	2f c0       	rjmp	.+94     	; 0x80 <__bad_interrupt>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	9e c1       	rjmp	.+828    	; 0x368 <__vector_21>
  2c:	29 c0       	rjmp	.+82     	; 0x80 <__bad_interrupt>
  2e:	28 c0       	rjmp	.+80     	; 0x80 <__bad_interrupt>
  30:	27 c0       	rjmp	.+78     	; 0x80 <__bad_interrupt>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>

00000034 <line1>:
  34:	31 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     1RPM:           
  44:	20 00                                                .

00000046 <line2>:
  46:	32 52 50 4d 3a 20 20 20 20 20 20 20 20 20 20 20     2RPM:           
  56:	20 00                                                .

00000058 <lcd_ini>:
  58:	03 03 03 02 28 0f 0c 06                             ....(...

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d2 e0       	ldi	r29, 0x02	; 2
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_clear_bss>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a6 38       	cpi	r26, 0x86	; 134
  78:	b1 07       	cpc	r27, r17
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	2f d0       	rcall	.+94     	; 0xdc <main>
  7e:	7b c4       	rjmp	.+2294   	; 0x976 <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <delta>:
char PROGMEM line1[] = "1RPM:            ";
char PROGMEM line2[] = "2RPM:            ";

uchar delta(uchar v1, uchar v2)
{
	if (v1 > v2)
  82:	68 17       	cp	r22, r24
  84:	10 f4       	brcc	.+4      	; 0x8a <delta+0x8>
	{
		return (v1 - v2);
  86:	86 1b       	sub	r24, r22
  88:	08 95       	ret
	}
	else
	{
		return (v2 - v1);
  8a:	68 1b       	sub	r22, r24
  8c:	86 2f       	mov	r24, r22
	}
}
  8e:	08 95       	ret

00000090 <switch_sensor>:
void switch_sensor()
{
	if (sensor_id == 1)
  90:	80 91 85 01 	lds	r24, 0x0185
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	61 f4       	brne	.+24     	; 0xb0 <switch_sensor+0x20>
	{
		sensor_id = 0;
  98:	10 92 85 01 	sts	0x0185, r1
		locate(15);
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	d5 d2       	rcall	.+1450   	; 0x64a <locate>
		lcd_send_4b_mode((uchar)'1');
  a0:	81 e3       	ldi	r24, 0x31	; 49
  a2:	89 d2       	rcall	.+1298   	; 0x5b6 <lcd_send_4b_mode>
		locate(79);
  a4:	8f e4       	ldi	r24, 0x4F	; 79
  a6:	d1 d2       	rcall	.+1442   	; 0x64a <locate>
		lcd_send_4b_mode((uchar)'_');
  a8:	8f e5       	ldi	r24, 0x5F	; 95
  aa:	85 d2       	rcall	.+1290   	; 0x5b6 <lcd_send_4b_mode>
		ADMUX = 2;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	0c c0       	rjmp	.+24     	; 0xc8 <switch_sensor+0x38>
	}
	else
	{
		sensor_id = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	80 93 85 01 	sts	0x0185, r24
		locate(15);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	c8 d2       	rcall	.+1424   	; 0x64a <locate>
		lcd_send_4b_mode((uchar)'_');
  ba:	8f e5       	ldi	r24, 0x5F	; 95
  bc:	7c d2       	rcall	.+1272   	; 0x5b6 <lcd_send_4b_mode>
		locate(79);
  be:	8f e4       	ldi	r24, 0x4F	; 79
  c0:	c4 d2       	rcall	.+1416   	; 0x64a <locate>
		lcd_send_4b_mode((uchar)'2');
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	78 d2       	rcall	.+1264   	; 0x5b6 <lcd_send_4b_mode>
		ADMUX = 3;
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	80 93 7c 00 	sts	0x007C, r24
	}
	measurement_started = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 0b 01 	sts	0x010B, r24
	measurement_zero = 0;
  d2:	10 92 05 01 	sts	0x0105, r1
	measurement_done = 0;
  d6:	10 92 80 01 	sts	0x0180, r1
}
  da:	08 95       	ret

000000dc <main>:

int main()
{
  dc:	9f 92       	push	r9
  de:	af 92       	push	r10
  e0:	bf 92       	push	r11
  e2:	cf 92       	push	r12
  e4:	df 92       	push	r13
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	df 93       	push	r29
  f0:	cf 93       	push	r28
  f2:	00 d0       	rcall	.+0      	; 0xf4 <main+0x18>
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x1a>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
	sensor_id = 0;
  fa:	10 92 85 01 	sts	0x0185, r1
	long time_count;
	long rpm_sum;

	uchar i, j;
	char animation[4];
	animation[0] = 0xD9;
  fe:	89 ed       	ldi	r24, 0xD9	; 217
 100:	89 83       	std	Y+1, r24	; 0x01
	animation[1] = 0xC9;
 102:	89 ec       	ldi	r24, 0xC9	; 201
 104:	8a 83       	std	Y+2, r24	; 0x02
	animation[2] = 0xDA;
 106:	8a ed       	ldi	r24, 0xDA	; 218
 108:	8b 83       	std	Y+3, r24	; 0x03
	animation[3] = 0xC8;
 10a:	88 ec       	ldi	r24, 0xC8	; 200
 10c:	8c 83       	std	Y+4, r24	; 0x04

	setup_timers();
 10e:	03 d1       	rcall	.+518    	; 0x316 <setup_timers>

	setup_io();
 110:	12 d1       	rcall	.+548    	; 0x336 <setup_io>

	LCD_EN_DDR |= _BV(LCD_EN);
 112:	3d 9a       	sbi	0x07, 5	; 7
	LCD_RS_DDR |= _BV(LCD_RS);
 114:	54 9a       	sbi	0x0a, 4	; 10
	lcd_ini_sequence();
 116:	87 d2       	rcall	.+1294   	; 0x626 <lcd_ini_sequence>
	LED_ON
 118:	57 9a       	sbi	0x0a, 7	; 10
 11a:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_BL_ON
 11c:	3c 9a       	sbi	0x07, 4	; 7
 11e:	44 9a       	sbi	0x08, 4	; 8
	LCD_CONTRAST_ON
 120:	55 9a       	sbi	0x0a, 5	; 10
	sei();
 122:	78 94       	sei
	format(line1, line2);
 124:	84 e3       	ldi	r24, 0x34	; 52
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	66 e4       	ldi	r22, 0x46	; 70
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	b5 d2       	rcall	.+1386   	; 0x698 <format>
 12e:	ec e3       	ldi	r30, 0x3C	; 60
 130:	f1 e0       	ldi	r31, 0x01	; 1
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
		gl_set[j].ain_th_low = 20;
 136:	64 e1       	ldi	r22, 0x14	; 20
		gl_set[j].ain_th_high = 45;
 138:	9d e2       	ldi	r25, 0x2D	; 45
 13a:	4a e3       	ldi	r20, 0x3A	; 58
 13c:	50 e0       	ldi	r21, 0x00	; 0
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
	{
		gl_set[j].rpm_avg = 0;
 13e:	f0 97       	sbiw	r30, 0x30	; 48
 140:	10 82       	st	Z, r1
 142:	11 82       	std	Z+1, r1	; 0x01
 144:	12 82       	std	Z+2, r1	; 0x02
 146:	13 82       	std	Z+3, r1	; 0x03
 148:	f0 96       	adiw	r30, 0x30	; 48
		gl_set[j].ain_th_low = 20;
 14a:	61 83       	std	Z+1, r22	; 0x01
		gl_set[j].ain_th_high = 45;
 14c:	92 83       	std	Z+2, r25	; 0x02
 14e:	24 9f       	mul	r18, r20
 150:	d0 01       	movw	r26, r0
 152:	25 9f       	mul	r18, r21
 154:	b0 0d       	add	r27, r0
 156:	34 9f       	mul	r19, r20
 158:	b0 0d       	add	r27, r0
 15a:	11 24       	eor	r1, r1
 15c:	a0 5f       	subi	r26, 0xF0	; 240
 15e:	be 4f       	sbci	r27, 0xFE	; 254
 160:	80 e0       	ldi	r24, 0x00	; 0

		for (i = 0; i < MAX_NUM_MEAS; i++)
		{
			gl_set[j].rpm_his[i] = 0;
 162:	1d 92       	st	X+, r1
 164:	1d 92       	st	X+, r1
 166:	1d 92       	st	X+, r1
 168:	1d 92       	st	X+, r1
	{
		gl_set[j].rpm_avg = 0;
		gl_set[j].ain_th_low = 20;
		gl_set[j].ain_th_high = 45;

		for (i = 0; i < MAX_NUM_MEAS; i++)
 16a:	8f 5f       	subi	r24, 0xFF	; 255
 16c:	8a 30       	cpi	r24, 0x0A	; 10
 16e:	c9 f7       	brne	.-14     	; 0x162 <main+0x86>
		{
			gl_set[j].rpm_his[i] = 0;
		}
		gl_set[j].last_rpm_indx = 0;
 170:	10 82       	st	Z, r1
		gl_set[j].anim_counter = 0;
 172:	10 86       	std	Z+8, r1	; 0x08
		gl_set[j].anim_counter_old = 0;
 174:	11 86       	std	Z+9, r1	; 0x09
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	fa 96       	adiw	r30, 0x3a	; 58
	LCD_BL_ON
	LCD_CONTRAST_ON
	sei();
	format(line1, line2);

	for (j = 0; j < 2; j++)
 17c:	22 30       	cpi	r18, 0x02	; 2
 17e:	31 05       	cpc	r19, r1
 180:	f1 f6       	brne	.-68     	; 0x13e <main+0x62>
		gl_set[j].last_rpm_indx = 0;
		gl_set[j].anim_counter = 0;
		gl_set[j].anim_counter_old = 0;
	}

	LED_OFF;
 182:	5f 98       	cbi	0x0b, 7	; 11
	switch_sensor();
 184:	85 df       	rcall	.-246    	; 0x90 <switch_sensor>
	ADCSRA = (1 << ADEN) | (1 << ADATE) | (1 << ADIE) | (1 << ADSC) | 5;
 186:	8d ee       	ldi	r24, 0xED	; 237
 188:	80 93 7a 00 	sts	0x007A, r24
	SENSOR_ON;
 18c:	39 9a       	sbi	0x07, 1	; 7
 18e:	41 9a       	sbi	0x08, 1	; 8
	LED_ON;
 190:	57 9a       	sbi	0x0a, 7	; 10
 192:	5f 9a       	sbi	0x0b, 7	; 11
	LCD_CONTRAST = 0;
 194:	18 bc       	out	0x28, r1	; 40
	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 196:	3a e3       	ldi	r19, 0x3A	; 58
 198:	c3 2e       	mov	r12, r19
 19a:	d1 2c       	mov	r13, r1
			measurement_done = 1;
 19c:	99 24       	eor	r9, r9
 19e:	93 94       	inc	r9
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
			locate(14);
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);
 1a0:	5e 01       	movw	r10, r28
 1a2:	08 94       	sec
 1a4:	a1 1c       	adc	r10, r1
 1a6:	b1 1c       	adc	r11, r1
	LCD_CONTRAST = 0;

	while (1)
	{
		time_count = t_capture + (t_postscale * 65536);
		if (time_count > 312500)
 1a8:	80 91 81 01 	lds	r24, 0x0181
 1ac:	90 91 82 01 	lds	r25, 0x0182
 1b0:	a0 e0       	ldi	r26, 0x00	; 0
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	dc 01       	movw	r26, r24
 1b6:	99 27       	eor	r25, r25
 1b8:	88 27       	eor	r24, r24
 1ba:	20 91 83 01 	lds	r18, 0x0183
 1be:	30 91 84 01 	lds	r19, 0x0184
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	50 e0       	ldi	r21, 0x00	; 0
 1c6:	82 0f       	add	r24, r18
 1c8:	93 1f       	adc	r25, r19
 1ca:	a4 1f       	adc	r26, r20
 1cc:	b5 1f       	adc	r27, r21
 1ce:	85 5b       	subi	r24, 0xB5	; 181
 1d0:	94 4c       	sbci	r25, 0xC4	; 196
 1d2:	a4 40       	sbci	r26, 0x04	; 4
 1d4:	b0 40       	sbci	r27, 0x00	; 0
 1d6:	24 f1       	brlt	.+72     	; 0x220 <main+0x144>
		{
			gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = 0;
 1d8:	80 91 85 01 	lds	r24, 0x0185
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	8c 9d       	mul	r24, r12
 1e0:	90 01       	movw	r18, r0
 1e2:	8d 9d       	mul	r24, r13
 1e4:	30 0d       	add	r19, r0
 1e6:	9c 9d       	mul	r25, r12
 1e8:	30 0d       	add	r19, r0
 1ea:	11 24       	eor	r1, r1
 1ec:	d9 01       	movw	r26, r18
 1ee:	a4 5f       	subi	r26, 0xF4	; 244
 1f0:	be 4f       	sbci	r27, 0xFE	; 254
 1f2:	d0 96       	adiw	r26, 0x30	; 48
 1f4:	8c 91       	ld	r24, X
 1f6:	d0 97       	sbiw	r26, 0x30	; 48
 1f8:	e8 2f       	mov	r30, r24
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	31 96       	adiw	r30, 0x01	; 1
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e2 0f       	add	r30, r18
 208:	f3 1f       	adc	r31, r19
 20a:	e4 5f       	subi	r30, 0xF4	; 244
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	10 82       	st	Z, r1
 210:	11 82       	std	Z+1, r1	; 0x01
 212:	12 82       	std	Z+2, r1	; 0x02
 214:	13 82       	std	Z+3, r1	; 0x03
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	d0 96       	adiw	r26, 0x30	; 48
 21a:	8c 93       	st	X, r24
			measurement_done = 1;
 21c:	90 92 80 01 	sts	0x0180, r9
		}
		if (measurement_done)
 220:	80 91 80 01 	lds	r24, 0x0180
 224:	88 23       	and	r24, r24
 226:	09 f4       	brne	.+2      	; 0x22a <main+0x14e>
 228:	52 c0       	rjmp	.+164    	; 0x2ce <main+0x1f2>
		{
			rpm_sum = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
			{
				rpm_sum += gl_set[sensor_id].rpm_his[i];
 22a:	80 91 85 01 	lds	r24, 0x0185
 22e:	e8 2e       	mov	r14, r24
 230:	ff 24       	eor	r15, r15
 232:	ec 9c       	mul	r14, r12
 234:	f0 01       	movw	r30, r0
 236:	ed 9c       	mul	r14, r13
 238:	f0 0d       	add	r31, r0
 23a:	fc 9c       	mul	r15, r12
 23c:	f0 0d       	add	r31, r0
 23e:	11 24       	eor	r1, r1
 240:	e0 5f       	subi	r30, 0xF0	; 240
 242:	fe 4f       	sbci	r31, 0xFE	; 254
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	81 91       	ld	r24, Z+
 250:	91 91       	ld	r25, Z+
 252:	a1 91       	ld	r26, Z+
 254:	b1 91       	ld	r27, Z+
 256:	28 0f       	add	r18, r24
 258:	39 1f       	adc	r19, r25
 25a:	4a 1f       	adc	r20, r26
 25c:	5b 1f       	adc	r21, r27
			measurement_done = 1;
		}
		if (measurement_done)
		{
			rpm_sum = 0;
			for (i = 0; i < MAX_NUM_MEAS; i++)
 25e:	6f 5f       	subi	r22, 0xFF	; 255
 260:	6a 30       	cpi	r22, 0x0A	; 10
 262:	a9 f7       	brne	.-22     	; 0x24e <main+0x172>
			{
				rpm_sum += gl_set[sensor_id].rpm_his[i];
			}
			gl_set[sensor_id].rpm_avg = rpm_sum / MAX_NUM_MEAS;
 264:	ec 9c       	mul	r14, r12
 266:	80 01       	movw	r16, r0
 268:	ed 9c       	mul	r14, r13
 26a:	10 0d       	add	r17, r0
 26c:	fc 9c       	mul	r15, r12
 26e:	10 0d       	add	r17, r0
 270:	11 24       	eor	r1, r1
 272:	04 5f       	subi	r16, 0xF4	; 244
 274:	1e 4f       	sbci	r17, 0xFE	; 254
 276:	ca 01       	movw	r24, r20
 278:	b9 01       	movw	r22, r18
 27a:	2a e0       	ldi	r18, 0x0A	; 10
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	fa d2       	rcall	.+1524   	; 0x878 <__divmodsi4>
 284:	f8 01       	movw	r30, r16
 286:	20 83       	st	Z, r18
 288:	31 83       	std	Z+1, r19	; 0x01
 28a:	42 83       	std	Z+2, r20	; 0x02
 28c:	53 83       	std	Z+3, r21	; 0x03
			switch (sensor_id)
 28e:	80 91 85 01 	lds	r24, 0x0185
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <main+0x1c0>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	c9 f4       	brne	.+50     	; 0x2cc <main+0x1f0>
 29a:	0c c0       	rjmp	.+24     	; 0x2b4 <main+0x1d8>
			{
			case 0:
				lcd_send_floatx10(gl_set[0].rpm_avg, 5, 7, 1); //rpm_x10
 29c:	60 91 0c 01 	lds	r22, 0x010C
 2a0:	70 91 0d 01 	lds	r23, 0x010D
 2a4:	80 91 0e 01 	lds	r24, 0x010E
 2a8:	90 91 0f 01 	lds	r25, 0x010F
 2ac:	45 e0       	ldi	r20, 0x05	; 5
 2ae:	27 e0       	ldi	r18, 0x07	; 7
 2b0:	01 e0       	ldi	r16, 0x01	; 1
 2b2:	1d d2       	rcall	.+1082   	; 0x6ee <lcd_send_floatx10>
			case 1:
				lcd_send_floatx10(gl_set[1].rpm_avg, 69, 7, 1); //rpm_x10
 2b4:	60 91 46 01 	lds	r22, 0x0146
 2b8:	70 91 47 01 	lds	r23, 0x0147
 2bc:	80 91 48 01 	lds	r24, 0x0148
 2c0:	90 91 49 01 	lds	r25, 0x0149
 2c4:	45 e4       	ldi	r20, 0x45	; 69
 2c6:	27 e0       	ldi	r18, 0x07	; 7
 2c8:	01 e0       	ldi	r16, 0x01	; 1
 2ca:	11 d2       	rcall	.+1058   	; 0x6ee <lcd_send_floatx10>
			}
			switch_sensor();
 2cc:	e1 de       	rcall	.-574    	; 0x90 <switch_sensor>
		}
		if (gl_set[0].anim_counter != gl_set[0].anim_counter_old)
 2ce:	90 91 44 01 	lds	r25, 0x0144
 2d2:	80 91 45 01 	lds	r24, 0x0145
 2d6:	98 17       	cp	r25, r24
 2d8:	59 f0       	breq	.+22     	; 0x2f0 <main+0x214>
		{
			gl_set[0].anim_counter_old = gl_set[0].anim_counter;
 2da:	90 93 45 01 	sts	0x0145, r25
			locate(14);
 2de:	8e e0       	ldi	r24, 0x0E	; 14
 2e0:	b4 d1       	rcall	.+872    	; 0x64a <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);
 2e2:	80 91 44 01 	lds	r24, 0x0144
 2e6:	f5 01       	movw	r30, r10
 2e8:	e8 0f       	add	r30, r24
 2ea:	f1 1d       	adc	r31, r1
 2ec:	80 81       	ld	r24, Z
 2ee:	63 d1       	rcall	.+710    	; 0x5b6 <lcd_send_4b_mode>
		}
		if (gl_set[1].anim_counter != gl_set[1].anim_counter_old)
 2f0:	90 91 7e 01 	lds	r25, 0x017E
 2f4:	80 91 7f 01 	lds	r24, 0x017F
 2f8:	98 17       	cp	r25, r24
 2fa:	09 f4       	brne	.+2      	; 0x2fe <main+0x222>
 2fc:	55 cf       	rjmp	.-342    	; 0x1a8 <main+0xcc>
		{
			gl_set[1].anim_counter_old = gl_set[1].anim_counter;
 2fe:	90 93 7f 01 	sts	0x017F, r25
			locate(78);
 302:	8e e4       	ldi	r24, 0x4E	; 78
 304:	a2 d1       	rcall	.+836    	; 0x64a <locate>
			lcd_send_4b_mode((uchar)animation[(uchar)gl_set[0].anim_counter]);
 306:	80 91 44 01 	lds	r24, 0x0144
 30a:	f5 01       	movw	r30, r10
 30c:	e8 0f       	add	r30, r24
 30e:	f1 1d       	adc	r31, r1
 310:	80 81       	ld	r24, Z
 312:	51 d1       	rcall	.+674    	; 0x5b6 <lcd_send_4b_mode>
 314:	49 cf       	rjmp	.-366    	; 0x1a8 <main+0xcc>

00000316 <setup_timers>:
#include "header.h"

void setup_timers()
{
	//setup timer 0 for contast pwm
	TCCR0A = (1 << COM1B1) | (1 << WGM01) | (1 << WGM00);
 316:	83 e2       	ldi	r24, 0x23	; 35
 318:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS00);
 31a:	91 e0       	ldi	r25, 0x01	; 1
 31c:	95 bd       	out	0x25, r25	; 37
	OCR0B = 25;
 31e:	89 e1       	ldi	r24, 0x19	; 25
 320:	88 bd       	out	0x28, r24	; 40
	TIMSK0 = (0 << OCIE0A);
 322:	10 92 6e 00 	sts	0x006E, r1

	//Setup timer1 for RPM counting
	TCCR1A = 0;
 326:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 3;
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 = (1 << TOIE1);
 330:	90 93 6f 00 	sts	0x006F, r25
}
 334:	08 95       	ret

00000336 <setup_io>:

void setup_io()
{
	DIDR0 = (1 << ADC2D) | (1 << ADC3D); //disable digital input on ADC2 and ADC3
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	80 93 7e 00 	sts	0x007E, r24
	DDRB &= ~(1 << PORTB1);				 //set push button as input
 33c:	21 98       	cbi	0x04, 1	; 4
	PORTB |= (1 << PORTB1);				 //activte the pull up resistor for the push button
 33e:	29 9a       	sbi	0x05, 1	; 5

	LCD_EN_PORT |= _BV(LCD_EN);
 340:	45 9a       	sbi	0x08, 5	; 8
	LCD_RS_PORT &= ~(_BV(LCD_RS));
 342:	5c 98       	cbi	0x0b, 4	; 11
}
 344:	08 95       	ret

00000346 <__vector_13>:
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
	}
}

ISR(TIMER1_OVF_vect)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
	//LED_ON;
	post_scaller++;
 352:	80 91 0a 01 	lds	r24, 0x010A
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 0a 01 	sts	0x010A, r24
}
 35c:	8f 91       	pop	r24
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_21>:
// ISRs

#include "header.h"

ISR(ADC_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
	// gl_set[sensor_id].ain_th_high : High theshold (rizing hysteresis)
	// gl_set[sensor_id].ain_th_low : Low theshold (falling hysteresis)
	// t_capture & t_postscale : reading of the time elapsed since last detected cycle
	// gl_set[sensor_id].ir_history_b and gl_set[sensor_id].ir_history_a: hold the last two values of gl_set[sensor_id].ir_value
	// gl_set[sensor_id].last_state : used to remember which hysteresis level to use
	gl_set[sensor_id].ir_value = ADC >> 2;
 396:	80 91 85 01 	lds	r24, 0x0185
 39a:	c8 2f       	mov	r28, r24
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	20 91 78 00 	lds	r18, 0x0078
 3a2:	30 91 79 00 	lds	r19, 0x0079
 3a6:	36 95       	lsr	r19
 3a8:	27 95       	ror	r18
 3aa:	36 95       	lsr	r19
 3ac:	27 95       	ror	r18
 3ae:	8a e3       	ldi	r24, 0x3A	; 58
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	c8 9f       	mul	r28, r24
 3b4:	f0 01       	movw	r30, r0
 3b6:	c9 9f       	mul	r28, r25
 3b8:	f0 0d       	add	r31, r0
 3ba:	d8 9f       	mul	r29, r24
 3bc:	f0 0d       	add	r31, r0
 3be:	11 24       	eor	r1, r1
 3c0:	e4 5f       	subi	r30, 0xF4	; 244
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	23 ab       	std	Z+51, r18	; 0x33
	if ((gl_set[sensor_id].ir_value > gl_set[sensor_id].ain_th_high) && (gl_set[sensor_id].last_state == 0)) //a cycle is detected
 3c6:	82 a9       	ldd	r24, Z+50	; 0x32
 3c8:	82 17       	cp	r24, r18
 3ca:	08 f0       	brcs	.+2      	; 0x3ce <__vector_21+0x66>
 3cc:	9d c0       	rjmp	.+314    	; 0x508 <__vector_21+0x1a0>
 3ce:	84 a9       	ldd	r24, Z+52	; 0x34
 3d0:	88 23       	and	r24, r24
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <__vector_21+0x6e>
 3d4:	99 c0       	rjmp	.+306    	; 0x508 <__vector_21+0x1a0>
	{
		gl_set[sensor_id].last_state = 1; //for next edge detection, use the falling hysteresis for next detection
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	84 ab       	std	Z+52, r24	; 0x34
		t_capture = TCNT1;
 3da:	60 91 84 00 	lds	r22, 0x0084
 3de:	70 91 85 00 	lds	r23, 0x0085
 3e2:	70 93 84 01 	sts	0x0184, r23
 3e6:	60 93 83 01 	sts	0x0183, r22
		TCNT1 = 0;
 3ea:	10 92 85 00 	sts	0x0085, r1
 3ee:	10 92 84 00 	sts	0x0084, r1
		t_postscale = post_scaller;
 3f2:	80 91 0a 01 	lds	r24, 0x010A
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	30 93 82 01 	sts	0x0182, r19
 3fe:	20 93 81 01 	sts	0x0181, r18
		post_scaller = 0;
 402:	10 92 0a 01 	sts	0x010A, r1
		if (measurement_started && measurement_zero)
 406:	80 91 0b 01 	lds	r24, 0x010B
 40a:	88 23       	and	r24, r24
 40c:	39 f0       	breq	.+14     	; 0x41c <__vector_21+0xb4>
 40e:	80 91 05 01 	lds	r24, 0x0105
 412:	88 23       	and	r24, r24
 414:	19 f0       	breq	.+6      	; 0x41c <__vector_21+0xb4>
		{
			measurement_started = 0;
 416:	10 92 0b 01 	sts	0x010B, r1
 41a:	65 c0       	rjmp	.+202    	; 0x4e6 <__vector_21+0x17e>
		}
		else if (!measurement_done && measurement_zero)
 41c:	80 91 80 01 	lds	r24, 0x0180
 420:	88 23       	and	r24, r24
 422:	09 f0       	breq	.+2      	; 0x426 <__vector_21+0xbe>
 424:	60 c0       	rjmp	.+192    	; 0x4e6 <__vector_21+0x17e>
 426:	80 91 05 01 	lds	r24, 0x0105
 42a:	88 23       	and	r24, r24
 42c:	09 f4       	brne	.+2      	; 0x430 <__vector_21+0xc8>
 42e:	5b c0       	rjmp	.+182    	; 0x4e6 <__vector_21+0x17e>
		{
			time_count = t_capture + (t_postscale * 65536);
 430:	c9 01       	movw	r24, r18
 432:	a0 e0       	ldi	r26, 0x00	; 0
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	ac 01       	movw	r20, r24
 438:	33 27       	eor	r19, r19
 43a:	22 27       	eor	r18, r18
 43c:	cb 01       	movw	r24, r22
 43e:	a0 e0       	ldi	r26, 0x00	; 0
 440:	b0 e0       	ldi	r27, 0x00	; 0
 442:	28 0f       	add	r18, r24
 444:	39 1f       	adc	r19, r25
 446:	4a 1f       	adc	r20, r26
 448:	5b 1f       	adc	r21, r27
 44a:	20 93 01 01 	sts	0x0101, r18
 44e:	30 93 02 01 	sts	0x0102, r19
 452:	40 93 03 01 	sts	0x0103, r20
 456:	50 93 04 01 	sts	0x0104, r21
			if (time_count)
 45a:	21 15       	cp	r18, r1
 45c:	31 05       	cpc	r19, r1
 45e:	41 05       	cpc	r20, r1
 460:	51 05       	cpc	r21, r1
 462:	f1 f1       	breq	.+124    	; 0x4e0 <__vector_21+0x178>
			{
				rpm_x10 = 187500000 / time_count;
 464:	60 ee       	ldi	r22, 0xE0	; 224
 466:	75 e0       	ldi	r23, 0x05	; 5
 468:	8d e2       	ldi	r24, 0x2D	; 45
 46a:	9b e0       	ldi	r25, 0x0B	; 11
 46c:	05 d2       	rcall	.+1034   	; 0x878 <__divmodsi4>
 46e:	79 01       	movw	r14, r18
 470:	8a 01       	movw	r16, r20
 472:	e0 92 06 01 	sts	0x0106, r14
 476:	f0 92 07 01 	sts	0x0107, r15
 47a:	00 93 08 01 	sts	0x0108, r16
 47e:	10 93 09 01 	sts	0x0109, r17
				if (rpm_x10 < 35000)
 482:	88 eb       	ldi	r24, 0xB8	; 184
 484:	e8 16       	cp	r14, r24
 486:	88 e8       	ldi	r24, 0x88	; 136
 488:	f8 06       	cpc	r15, r24
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	08 07       	cpc	r16, r24
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	18 07       	cpc	r17, r24
 492:	34 f5       	brge	.+76     	; 0x4e0 <__vector_21+0x178>
				{
					gl_set[sensor_id].rpm_his[gl_set[sensor_id].last_rpm_indx++] = rpm_x10;
 494:	8a e3       	ldi	r24, 0x3A	; 58
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	c8 9f       	mul	r28, r24
 49a:	90 01       	movw	r18, r0
 49c:	c9 9f       	mul	r28, r25
 49e:	30 0d       	add	r19, r0
 4a0:	d8 9f       	mul	r29, r24
 4a2:	30 0d       	add	r19, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	d9 01       	movw	r26, r18
 4a8:	a4 5f       	subi	r26, 0xF4	; 244
 4aa:	be 4f       	sbci	r27, 0xFE	; 254
 4ac:	d0 96       	adiw	r26, 0x30	; 48
 4ae:	8c 91       	ld	r24, X
 4b0:	d0 97       	sbiw	r26, 0x30	; 48
 4b2:	e8 2f       	mov	r30, r24
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	31 96       	adiw	r30, 0x01	; 1
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	e2 0f       	add	r30, r18
 4c2:	f3 1f       	adc	r31, r19
 4c4:	e4 5f       	subi	r30, 0xF4	; 244
 4c6:	fe 4f       	sbci	r31, 0xFE	; 254
 4c8:	e0 82       	st	Z, r14
 4ca:	f1 82       	std	Z+1, r15	; 0x01
 4cc:	02 83       	std	Z+2, r16	; 0x02
 4ce:	13 83       	std	Z+3, r17	; 0x03
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	d0 96       	adiw	r26, 0x30	; 48
 4d4:	8c 93       	st	X, r24
 4d6:	d0 97       	sbiw	r26, 0x30	; 48
					if (gl_set[sensor_id].last_rpm_indx >= MAX_NUM_MEAS)
 4d8:	8a 30       	cpi	r24, 0x0A	; 10
 4da:	10 f0       	brcs	.+4      	; 0x4e0 <__vector_21+0x178>
					{
						gl_set[sensor_id].last_rpm_indx = 0;
 4dc:	d0 96       	adiw	r26, 0x30	; 48
 4de:	1c 92       	st	X, r1
					}
				}
			}
			measurement_done = 1;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	80 93 80 01 	sts	0x0180, r24
		}
		gl_set[sensor_id].anim_counter++;
 4e6:	8a e3       	ldi	r24, 0x3A	; 58
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	c8 9f       	mul	r28, r24
 4ec:	f0 01       	movw	r30, r0
 4ee:	c9 9f       	mul	r28, r25
 4f0:	f0 0d       	add	r31, r0
 4f2:	d8 9f       	mul	r29, r24
 4f4:	f0 0d       	add	r31, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	e4 5f       	subi	r30, 0xF4	; 244
 4fa:	fe 4f       	sbci	r31, 0xFE	; 254
 4fc:	80 ad       	ldd	r24, Z+56	; 0x38
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	80 af       	std	Z+56, r24	; 0x38
		if (gl_set[sensor_id].anim_counter > 3)
 502:	84 30       	cpi	r24, 0x04	; 4
 504:	08 f0       	brcs	.+2      	; 0x508 <__vector_21+0x1a0>
		{
			gl_set[sensor_id].anim_counter = 0;
 506:	10 ae       	std	Z+56, r1	; 0x38
		}
	}

	if ((gl_set[sensor_id].ir_value < gl_set[sensor_id].ain_th_low) && (gl_set[sensor_id].last_state == 1)) //a low level is detected
 508:	8a e3       	ldi	r24, 0x3A	; 58
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	c8 9f       	mul	r28, r24
 50e:	f0 01       	movw	r30, r0
 510:	c9 9f       	mul	r28, r25
 512:	f0 0d       	add	r31, r0
 514:	d8 9f       	mul	r29, r24
 516:	f0 0d       	add	r31, r0
 518:	11 24       	eor	r1, r1
 51a:	e4 5f       	subi	r30, 0xF4	; 244
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	93 a9       	ldd	r25, Z+51	; 0x33
 520:	81 a9       	ldd	r24, Z+49	; 0x31
 522:	98 17       	cp	r25, r24
 524:	30 f4       	brcc	.+12     	; 0x532 <__vector_21+0x1ca>
 526:	84 a9       	ldd	r24, Z+52	; 0x34
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	19 f4       	brne	.+6      	; 0x532 <__vector_21+0x1ca>
	{
		gl_set[sensor_id].last_state = 0; //for next edge detection, use the rising hysteresis for next detection
 52c:	14 aa       	std	Z+52, r1	; 0x34
		measurement_zero = 1; // we found the low level and now waiting for high
 52e:	80 93 05 01 	sts	0x0105, r24
	}

	if (delta(gl_set[sensor_id].ir_history_a, gl_set[sensor_id].ir_value) > 10)
 532:	0a e3       	ldi	r16, 0x3A	; 58
 534:	10 e0       	ldi	r17, 0x00	; 0
 536:	c0 9f       	mul	r28, r16
 538:	f0 01       	movw	r30, r0
 53a:	c1 9f       	mul	r28, r17
 53c:	f0 0d       	add	r31, r0
 53e:	d0 9f       	mul	r29, r16
 540:	f0 0d       	add	r31, r0
 542:	11 24       	eor	r1, r1
 544:	e4 5f       	subi	r30, 0xF4	; 244
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	85 a9       	ldd	r24, Z+53	; 0x35
 54a:	63 a9       	ldd	r22, Z+51	; 0x33
 54c:	9a dd       	rcall	.-1228   	; 0x82 <delta>
 54e:	8b 30       	cpi	r24, 0x0B	; 11
 550:	d8 f0       	brcs	.+54     	; 0x588 <__vector_21+0x220>
	{
		gl_set[sensor_id].ir_history_b = gl_set[sensor_id].ir_history_a;
 552:	80 91 85 01 	lds	r24, 0x0185
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	80 9f       	mul	r24, r16
 55a:	f0 01       	movw	r30, r0
 55c:	81 9f       	mul	r24, r17
 55e:	f0 0d       	add	r31, r0
 560:	90 9f       	mul	r25, r16
 562:	f0 0d       	add	r31, r0
 564:	11 24       	eor	r1, r1
 566:	e4 5f       	subi	r30, 0xF4	; 244
 568:	fe 4f       	sbci	r31, 0xFE	; 254
 56a:	25 a9       	ldd	r18, Z+53	; 0x35
 56c:	26 ab       	std	Z+54, r18	; 0x36
		gl_set[sensor_id].ir_history_a = gl_set[sensor_id].ir_value;
 56e:	83 a9       	ldd	r24, Z+51	; 0x33
 570:	85 ab       	std	Z+53, r24	; 0x35
		gl_set[sensor_id].ir_avg = (gl_set[sensor_id].ir_history_a + gl_set[sensor_id].ir_history_b) / 2;
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	82 0f       	add	r24, r18
 576:	91 1d       	adc	r25, r1
 578:	95 95       	asr	r25
 57a:	87 95       	ror	r24
 57c:	28 2f       	mov	r18, r24
 57e:	87 ab       	std	Z+55, r24	; 0x37
		gl_set[sensor_id].ain_th_high = gl_set[sensor_id].ir_avg + 5;
 580:	2b 5f       	subi	r18, 0xFB	; 251
 582:	22 ab       	std	Z+50, r18	; 0x32
		gl_set[sensor_id].ain_th_low = gl_set[sensor_id].ir_avg - 5;
 584:	2a 50       	subi	r18, 0x0A	; 10
 586:	21 ab       	std	Z+49, r18	; 0x31
	}
}
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	bf 91       	pop	r27
 592:	af 91       	pop	r26
 594:	9f 91       	pop	r25
 596:	8f 91       	pop	r24
 598:	7f 91       	pop	r23
 59a:	6f 91       	pop	r22
 59c:	5f 91       	pop	r21
 59e:	4f 91       	pop	r20
 5a0:	3f 91       	pop	r19
 5a2:	2f 91       	pop	r18
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	ff 90       	pop	r15
 5aa:	ef 90       	pop	r14
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <lcd_send_4b_mode>:
char PROGMEM lcd_ini[8] = {0x03, 0x03, 0x03, 0x02, 0x28, 0x0F, 0x0C, 0x06};

void lcd_send_4b_mode(unsigned char data)
{

	LCD_DDR |= (LCD_MASK); //ensure data pins are set as outputs (in case it is a shared bus)
 5b6:	9a b1       	in	r25, 0x0a	; 10
 5b8:	9f 60       	ori	r25, 0x0F	; 15
 5ba:	9a b9       	out	0x0a, r25	; 10

	LCD_EN_PORT |= _BV(LCD_EN);
 5bc:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 5be:	48 e8       	ldi	r20, 0x88	; 136
 5c0:	53 e1       	ldi	r21, 0x13	; 19
 5c2:	fa 01       	movw	r30, r20
 5c4:	31 97       	sbiw	r30, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <lcd_send_4b_mode+0xe>
	_delay_ms(1);

	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5c8:	9b b1       	in	r25, 0x0b	; 11
 5ca:	90 7f       	andi	r25, 0xF0	; 240
 5cc:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |= ((data >> 4) << LCD_SHIFT) & LCD_MASK;
 5ce:	2b b1       	in	r18, 0x0b	; 11
 5d0:	98 2f       	mov	r25, r24
 5d2:	92 95       	swap	r25
 5d4:	9f 70       	andi	r25, 0x0F	; 15
 5d6:	92 2b       	or	r25, r18
 5d8:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5da:	45 98       	cbi	0x08, 5	; 8
	//_delay_ms (1);

	LCD_EN_PORT |= _BV(LCD_EN);
 5dc:	45 9a       	sbi	0x08, 5	; 8
 5de:	fa 01       	movw	r30, r20
 5e0:	31 97       	sbiw	r30, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <lcd_send_4b_mode+0x2a>
	_delay_ms(1);

	LCD_PORT &= ~(LCD_MASK); //erase previous data
 5e4:	9b b1       	in	r25, 0x0b	; 11
 5e6:	90 7f       	andi	r25, 0xF0	; 240
 5e8:	9b b9       	out	0x0b, r25	; 11
	LCD_PORT |= ((data & LCD_MASK) << LCD_SHIFT);
 5ea:	9b b1       	in	r25, 0x0b	; 11
 5ec:	8f 70       	andi	r24, 0x0F	; 15
 5ee:	98 2b       	or	r25, r24
 5f0:	9b b9       	out	0x0b, r25	; 11

	LCD_EN_PORT &= ~(_BV(LCD_EN));
 5f2:	45 98       	cbi	0x08, 5	; 8
 5f4:	ca 01       	movw	r24, r20
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	f1 f7       	brne	.-4      	; 0x5f6 <lcd_send_4b_mode+0x40>
	_delay_ms(1);
}
 5fa:	08 95       	ret

000005fc <cls>:
	ini_lcd_4_bit_mode();
	cls();
}
void cls()
{ // clear the display
	LCD_RS_PORT &= ~(_BV(LCD_RS));
 5fc:	5c 98       	cbi	0x0b, 4	; 11
	lcd_send_4b_mode(0x01);
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	da df       	rcall	.-76     	; 0x5b6 <lcd_send_4b_mode>
	LCD_RS_PORT |= _BV(LCD_RS);
 602:	5c 9a       	sbi	0x0b, 4	; 11
}
 604:	08 95       	ret

00000606 <ini_lcd_4_bit_mode>:
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}

void ini_lcd_4_bit_mode()
{
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	c8 e5       	ldi	r28, 0x58	; 88
 60c:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char i;

	for (i = 0; i < 8; i++)
	{
		//test = pgm_read_byte(lcd_ini + i);
		lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
 60e:	fe 01       	movw	r30, r28
 610:	84 91       	lpm	r24, Z+
 612:	d1 df       	rcall	.-94     	; 0x5b6 <lcd_send_4b_mode>
 614:	21 96       	adiw	r28, 0x01	; 1

void ini_lcd_4_bit_mode()
{
	unsigned char i;

	for (i = 0; i < 8; i++)
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	c0 36       	cpi	r28, 0x60	; 96
 61a:	df 07       	cpc	r29, r31
 61c:	c1 f7       	brne	.-16     	; 0x60e <ini_lcd_4_bit_mode+0x8>
	{
		//test = pgm_read_byte(lcd_ini + i);
		lcd_send_4b_mode(pgm_read_byte(lcd_ini + i));
	}
	LCD_RS_PORT |= _BV(LCD_RS);
 61e:	5c 9a       	sbi	0x0b, 4	; 11
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <lcd_ini_sequence>:
	LCD_EN_PORT &= ~(_BV(LCD_EN));
	_delay_ms(1);
}

void lcd_ini_sequence()
{
 626:	84 ec       	ldi	r24, 0xC4	; 196
 628:	99 e0       	ldi	r25, 0x09	; 9
 62a:	24 ef       	ldi	r18, 0xF4	; 244
 62c:	31 e0       	ldi	r19, 0x01	; 1
 62e:	f9 01       	movw	r30, r18
 630:	31 97       	sbiw	r30, 0x01	; 1
 632:	f1 f7       	brne	.-4      	; 0x630 <lcd_ini_sequence+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 634:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 636:	d9 f7       	brne	.-10     	; 0x62e <lcd_ini_sequence+0x8>

	_delay_ms(250); //wait for LCD to start up
	ini_lcd_4_bit_mode();
 638:	e6 df       	rcall	.-52     	; 0x606 <ini_lcd_4_bit_mode>
	cls();
 63a:	e0 df       	rcall	.-64     	; 0x5fc <cls>
 63c:	80 e5       	ldi	r24, 0x50	; 80
 63e:	93 ec       	ldi	r25, 0xC3	; 195
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <lcd_ini_sequence+0x1a>
	_delay_ms(10); //wait for LCD to start up
	ini_lcd_4_bit_mode();
 644:	e0 df       	rcall	.-64     	; 0x606 <ini_lcd_4_bit_mode>
	cls();
 646:	da df       	rcall	.-76     	; 0x5fc <cls>
}
 648:	08 95       	ret

0000064a <locate>:
}

void locate(unsigned char pos)
{
	pos = pos | (1 << 7);
	LCD_RS_PORT &= ~(_BV(LCD_RS));
 64a:	5c 98       	cbi	0x0b, 4	; 11
	lcd_send_4b_mode(pos);
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	b3 df       	rcall	.-154    	; 0x5b6 <lcd_send_4b_mode>
	LCD_RS_PORT |= _BV(LCD_RS);
 650:	5c 9a       	sbi	0x0b, 4	; 11
}
 652:	08 95       	ret

00000654 <put_str>:
		lcd_send_4b_mode(' ');
	}
}

void put_str(uchar pos, char *str)
{
 654:	0f 93       	push	r16
 656:	1f 93       	push	r17
 658:	cf 93       	push	r28
 65a:	df 93       	push	r29
 65c:	8b 01       	movw	r16, r22
	uchar i;
	locate(pos);
 65e:	f5 df       	rcall	.-22     	; 0x64a <locate>
 660:	c0 e0       	ldi	r28, 0x00	; 0
 662:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < 16; i++)
	{
		lcd_send_4b_mode(pgm_read_byte(str + i));
 664:	f8 01       	movw	r30, r16
 666:	ec 0f       	add	r30, r28
 668:	fd 1f       	adc	r31, r29
 66a:	e4 91       	lpm	r30, Z+
 66c:	8e 2f       	mov	r24, r30
 66e:	a3 df       	rcall	.-186    	; 0x5b6 <lcd_send_4b_mode>
 670:	21 96       	adiw	r28, 0x01	; 1

void put_str(uchar pos, char *str)
{
	uchar i;
	locate(pos);
	for (i = 0; i < 16; i++)
 672:	c0 31       	cpi	r28, 0x10	; 16
 674:	d1 05       	cpc	r29, r1
 676:	b1 f7       	brne	.-20     	; 0x664 <put_str+0x10>
	{
		lcd_send_4b_mode(pgm_read_byte(str + i));
	}
}
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	1f 91       	pop	r17
 67e:	0f 91       	pop	r16
 680:	08 95       	ret

00000682 <clr_line>:
	lcd_send_4b_mode(0x01);
	LCD_RS_PORT |= _BV(LCD_RS);
}

void clr_line(uchar start_add)
{ // clear line
 682:	1f 93       	push	r17
	uchar i;
	locate(start_add);
 684:	e2 df       	rcall	.-60     	; 0x64a <locate>
 686:	10 e0       	ldi	r17, 0x00	; 0
	for (i = 0; i < 16; i++)
	{
		lcd_send_4b_mode(' ');
 688:	80 e2       	ldi	r24, 0x20	; 32
 68a:	95 df       	rcall	.-214    	; 0x5b6 <lcd_send_4b_mode>

void clr_line(uchar start_add)
{ // clear line
	uchar i;
	locate(start_add);
	for (i = 0; i < 16; i++)
 68c:	1f 5f       	subi	r17, 0xFF	; 255
 68e:	10 31       	cpi	r17, 0x10	; 16
 690:	d9 f7       	brne	.-10     	; 0x688 <clr_line+0x6>
	{
		lcd_send_4b_mode(' ');
	}
}
 692:	1f 91       	pop	r17
 694:	08 95       	ret

00000696 <lcd_contrast>:
   LCD_RS_PORT |= _BV(LCD_RS);
}*/

void lcd_contrast()
{
}
 696:	08 95       	ret

00000698 <format>:

void format(char *line1, char *line2)
{ // reformat the display
 698:	ef 92       	push	r14
 69a:	ff 92       	push	r15
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	8c 01       	movw	r16, r24
 6a6:	7b 01       	movw	r14, r22
	unsigned char i;
	locate(0);
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	cf df       	rcall	.-98     	; 0x64a <locate>
 6ac:	c0 e0       	ldi	r28, 0x00	; 0
 6ae:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < 16; i++)
	{
		lcd_send_4b_mode(pgm_read_byte(line1 + i));
 6b0:	f8 01       	movw	r30, r16
 6b2:	ec 0f       	add	r30, r28
 6b4:	fd 1f       	adc	r31, r29
 6b6:	e4 91       	lpm	r30, Z+
 6b8:	8e 2f       	mov	r24, r30
 6ba:	7d df       	rcall	.-262    	; 0x5b6 <lcd_send_4b_mode>
 6bc:	21 96       	adiw	r28, 0x01	; 1

void format(char *line1, char *line2)
{ // reformat the display
	unsigned char i;
	locate(0);
	for (i = 0; i < 16; i++)
 6be:	c0 31       	cpi	r28, 0x10	; 16
 6c0:	d1 05       	cpc	r29, r1
 6c2:	b1 f7       	brne	.-20     	; 0x6b0 <format+0x18>
	{
		lcd_send_4b_mode(pgm_read_byte(line1 + i));
	}
	locate(64);
 6c4:	80 e4       	ldi	r24, 0x40	; 64
 6c6:	c1 df       	rcall	.-126    	; 0x64a <locate>
 6c8:	c0 e0       	ldi	r28, 0x00	; 0
 6ca:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < 16; i++)
	{
		lcd_send_4b_mode(pgm_read_byte(line2 + i));
 6cc:	f7 01       	movw	r30, r14
 6ce:	ec 0f       	add	r30, r28
 6d0:	fd 1f       	adc	r31, r29
 6d2:	e4 91       	lpm	r30, Z+
 6d4:	8e 2f       	mov	r24, r30
 6d6:	6f df       	rcall	.-290    	; 0x5b6 <lcd_send_4b_mode>
 6d8:	21 96       	adiw	r28, 0x01	; 1
	for (i = 0; i < 16; i++)
	{
		lcd_send_4b_mode(pgm_read_byte(line1 + i));
	}
	locate(64);
	for (i = 0; i < 16; i++)
 6da:	c0 31       	cpi	r28, 0x10	; 16
 6dc:	d1 05       	cpc	r29, r1
 6de:	b1 f7       	brne	.-20     	; 0x6cc <format+0x34>
	{
		lcd_send_4b_mode(pgm_read_byte(line2 + i));
	}
}
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	ff 90       	pop	r15
 6ea:	ef 90       	pop	r14
 6ec:	08 95       	ret

000006ee <lcd_send_floatx10>:
	lcd_send_4b_mode(pos);
	LCD_RS_PORT |= _BV(LCD_RS);
}

void lcd_send_floatx10(long data, uchar location, uchar len, uchar d_len)
{
 6ee:	af 92       	push	r10
 6f0:	bf 92       	push	r11
 6f2:	cf 92       	push	r12
 6f4:	df 92       	push	r13
 6f6:	ef 92       	push	r14
 6f8:	ff 92       	push	r15
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	df 93       	push	r29
 700:	cf 93       	push	r28
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	60 97       	sbiw	r28, 0x10	; 16
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	de bf       	out	0x3e, r29	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	cd bf       	out	0x3d, r28	; 61
 712:	6b 01       	movw	r12, r22
 714:	7c 01       	movw	r14, r24
 716:	14 2f       	mov	r17, r20
 718:	a2 2e       	mov	r10, r18
 71a:	b0 2e       	mov	r11, r16
	//d_len = number of digits after the decimal point
	char buffer[16];

	uchar i, y, temp, int_len;
	t = 0;
 71c:	10 92 00 01 	sts	0x0100, r1

	if (data < 0)
 720:	97 ff       	sbrs	r25, 7
 722:	03 c0       	rjmp	.+6      	; 0x72a <lcd_send_floatx10+0x3c>
	{
		buffer[0] = 'N';
 724:	8e e4       	ldi	r24, 0x4E	; 78
 726:	89 83       	std	Y+1, r24	; 0x01
 728:	06 c0       	rjmp	.+12     	; 0x736 <lcd_send_floatx10+0x48>
	}
	else
	{
		ltoa((long)(data), buffer, 10);
 72a:	ae 01       	movw	r20, r28
 72c:	4f 5f       	subi	r20, 0xFF	; 255
 72e:	5f 4f       	sbci	r21, 0xFF	; 255
 730:	2a e0       	ldi	r18, 0x0A	; 10
 732:	30 e0       	ldi	r19, 0x00	; 0
 734:	de d0       	rcall	.+444    	; 0x8f2 <ltoa>
	}

	locate(location);
 736:	81 2f       	mov	r24, r17
 738:	88 df       	rcall	.-240    	; 0x64a <locate>

	i = 0;
	if (d_len == 2)
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	b8 16       	cp	r11, r24
 73e:	11 f0       	breq	.+4      	; 0x744 <lcd_send_floatx10+0x56>
 740:	8a e0       	ldi	r24, 0x0A	; 10
 742:	01 c0       	rjmp	.+2      	; 0x746 <lcd_send_floatx10+0x58>
 744:	84 e6       	ldi	r24, 0x64	; 100
	else
	{
		temp = 10;
	}

	if (data >= temp)
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	a0 e0       	ldi	r26, 0x00	; 0
 74a:	b0 e0       	ldi	r27, 0x00	; 0
 74c:	c8 16       	cp	r12, r24
 74e:	d9 06       	cpc	r13, r25
 750:	ea 06       	cpc	r14, r26
 752:	fb 06       	cpc	r15, r27
 754:	0c f4       	brge	.+2      	; 0x758 <lcd_send_floatx10+0x6a>
 756:	47 c0       	rjmp	.+142    	; 0x7e6 <lcd_send_floatx10+0xf8>
	{
		if (strlen(buffer) > len)
 758:	fe 01       	movw	r30, r28
 75a:	31 96       	adiw	r30, 0x01	; 1
 75c:	df 01       	movw	r26, r30
 75e:	0d 90       	ld	r0, X+
 760:	00 20       	and	r0, r0
 762:	e9 f7       	brne	.-6      	; 0x75e <lcd_send_floatx10+0x70>
 764:	11 97       	sbiw	r26, 0x01	; 1
 766:	ae 1b       	sub	r26, r30
 768:	bf 0b       	sbc	r27, r31
 76a:	8a 2d       	mov	r24, r10
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	8a 17       	cp	r24, r26
 770:	9b 07       	cpc	r25, r27
 772:	10 f4       	brcc	.+4      	; 0x778 <lcd_send_floatx10+0x8a>
 774:	8a 2d       	mov	r24, r10
 776:	01 c0       	rjmp	.+2      	; 0x77a <lcd_send_floatx10+0x8c>
		{
			int_len = len;
		}
		else
		{
			int_len = strlen(buffer);
 778:	8a 2f       	mov	r24, r26
 77a:	00 e0       	ldi	r16, 0x00	; 0
		}

		for (i = 0; i < (int_len - d_len); i++)
 77c:	e8 2e       	mov	r14, r24
 77e:	ff 24       	eor	r15, r15
 780:	eb 18       	sub	r14, r11
 782:	f1 08       	sbc	r15, r1
		{
			lcd_send_4b_mode(buffer[i]);
 784:	6e 01       	movw	r12, r28
 786:	08 94       	sec
 788:	c1 1c       	adc	r12, r1
 78a:	d1 1c       	adc	r13, r1
 78c:	0a c0       	rjmp	.+20     	; 0x7a2 <lcd_send_floatx10+0xb4>
 78e:	ec 0d       	add	r30, r12
 790:	fd 1d       	adc	r31, r13
 792:	80 81       	ld	r24, Z
 794:	10 df       	rcall	.-480    	; 0x5b6 <lcd_send_4b_mode>
			t++;
 796:	80 91 00 01 	lds	r24, 0x0100
 79a:	8f 5f       	subi	r24, 0xFF	; 255
 79c:	80 93 00 01 	sts	0x0100, r24
		else
		{
			int_len = strlen(buffer);
		}

		for (i = 0; i < (int_len - d_len); i++)
 7a0:	0f 5f       	subi	r16, 0xFF	; 255
 7a2:	e0 2f       	mov	r30, r16
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	ee 15       	cp	r30, r14
 7a8:	ff 05       	cpc	r31, r15
 7aa:	8c f3       	brlt	.-30     	; 0x78e <lcd_send_floatx10+0xa0>
		{
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
 7ac:	8e e2       	ldi	r24, 0x2E	; 46
 7ae:	03 df       	rcall	.-506    	; 0x5b6 <lcd_send_4b_mode>
		t++;
 7b0:	80 91 00 01 	lds	r24, 0x0100
 7b4:	8f 5f       	subi	r24, 0xFF	; 255
 7b6:	80 93 00 01 	sts	0x0100, r24
 7ba:	10 e0       	ldi	r17, 0x00	; 0
		for (y = 0; y < (d_len); y++)
		{
			lcd_send_4b_mode(buffer[i]);
 7bc:	7e 01       	movw	r14, r28
 7be:	08 94       	sec
 7c0:	e1 1c       	adc	r14, r1
 7c2:	f1 1c       	adc	r15, r1
 7c4:	0b c0       	rjmp	.+22     	; 0x7dc <lcd_send_floatx10+0xee>
 7c6:	f7 01       	movw	r30, r14
 7c8:	e8 0f       	add	r30, r24
 7ca:	f1 1d       	adc	r31, r1
 7cc:	80 81       	ld	r24, Z
 7ce:	f3 de       	rcall	.-538    	; 0x5b6 <lcd_send_4b_mode>
			i++;
			t++;
 7d0:	80 91 00 01 	lds	r24, 0x0100
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	80 93 00 01 	sts	0x0100, r24
			lcd_send_4b_mode(buffer[i]);
			t++;
		}
		lcd_send_4b_mode('.');
		t++;
		for (y = 0; y < (d_len); y++)
 7da:	1f 5f       	subi	r17, 0xFF	; 255
 7dc:	81 2f       	mov	r24, r17
 7de:	80 0f       	add	r24, r16
 7e0:	1b 15       	cp	r17, r11
 7e2:	88 f3       	brcs	.-30     	; 0x7c6 <lcd_send_floatx10+0xd8>
 7e4:	34 c0       	rjmp	.+104    	; 0x84e <lcd_send_floatx10+0x160>
			t++;
		}
	}
	else
	{
		lcd_send_4b_mode('0');
 7e6:	80 e3       	ldi	r24, 0x30	; 48
 7e8:	e6 de       	rcall	.-564    	; 0x5b6 <lcd_send_4b_mode>
		t++;
 7ea:	80 91 00 01 	lds	r24, 0x0100
 7ee:	8f 5f       	subi	r24, 0xFF	; 255
 7f0:	80 93 00 01 	sts	0x0100, r24
		lcd_send_4b_mode('.');
 7f4:	8e e2       	ldi	r24, 0x2E	; 46
 7f6:	df de       	rcall	.-578    	; 0x5b6 <lcd_send_4b_mode>
		t++;
 7f8:	80 91 00 01 	lds	r24, 0x0100
 7fc:	8f 5f       	subi	r24, 0xFF	; 255
 7fe:	80 93 00 01 	sts	0x0100, r24
 802:	10 e0       	ldi	r17, 0x00	; 0
		for (y = 0; y < d_len; y++)
		{
			if (y < strlen(buffer))
 804:	7e 01       	movw	r14, r28
 806:	08 94       	sec
 808:	e1 1c       	adc	r14, r1
 80a:	f1 1c       	adc	r15, r1
 80c:	16 c0       	rjmp	.+44     	; 0x83a <lcd_send_floatx10+0x14c>
 80e:	f7 01       	movw	r30, r14
 810:	01 90       	ld	r0, Z+
 812:	00 20       	and	r0, r0
 814:	e9 f7       	brne	.-6      	; 0x810 <lcd_send_floatx10+0x122>
 816:	31 97       	sbiw	r30, 0x01	; 1
 818:	ee 19       	sub	r30, r14
 81a:	ff 09       	sbc	r31, r15
 81c:	a1 2f       	mov	r26, r17
 81e:	b0 e0       	ldi	r27, 0x00	; 0
 820:	ae 17       	cp	r26, r30
 822:	bf 07       	cpc	r27, r31
 824:	48 f4       	brcc	.+18     	; 0x838 <lcd_send_floatx10+0x14a>
			{
				lcd_send_4b_mode(buffer[y]);
 826:	ae 0d       	add	r26, r14
 828:	bf 1d       	adc	r27, r15
 82a:	8c 91       	ld	r24, X
 82c:	c4 de       	rcall	.-632    	; 0x5b6 <lcd_send_4b_mode>
				i++;
				t++;
 82e:	80 91 00 01 	lds	r24, 0x0100
 832:	8f 5f       	subi	r24, 0xFF	; 255
 834:	80 93 00 01 	sts	0x0100, r24
	{
		lcd_send_4b_mode('0');
		t++;
		lcd_send_4b_mode('.');
		t++;
		for (y = 0; y < d_len; y++)
 838:	1f 5f       	subi	r17, 0xFF	; 255
 83a:	1b 15       	cp	r17, r11
 83c:	40 f3       	brcs	.-48     	; 0x80e <lcd_send_floatx10+0x120>
 83e:	07 c0       	rjmp	.+14     	; 0x84e <lcd_send_floatx10+0x160>
	}

	//fill remaining digits with spaaces
	while (t < (len)) //was 4
	{
		lcd_send_4b_mode(' ');
 840:	80 e2       	ldi	r24, 0x20	; 32
 842:	b9 de       	rcall	.-654    	; 0x5b6 <lcd_send_4b_mode>
		t++;
 844:	80 91 00 01 	lds	r24, 0x0100
 848:	8f 5f       	subi	r24, 0xFF	; 255
 84a:	80 93 00 01 	sts	0x0100, r24
			}
		}
	}

	//fill remaining digits with spaaces
	while (t < (len)) //was 4
 84e:	80 91 00 01 	lds	r24, 0x0100
 852:	8a 15       	cp	r24, r10
 854:	a8 f3       	brcs	.-22     	; 0x840 <lcd_send_floatx10+0x152>
	{
		lcd_send_4b_mode(' ');
		t++;
	}
}
 856:	60 96       	adiw	r28, 0x10	; 16
 858:	0f b6       	in	r0, 0x3f	; 63
 85a:	f8 94       	cli
 85c:	de bf       	out	0x3e, r29	; 62
 85e:	0f be       	out	0x3f, r0	; 63
 860:	cd bf       	out	0x3d, r28	; 61
 862:	cf 91       	pop	r28
 864:	df 91       	pop	r29
 866:	1f 91       	pop	r17
 868:	0f 91       	pop	r16
 86a:	ff 90       	pop	r15
 86c:	ef 90       	pop	r14
 86e:	df 90       	pop	r13
 870:	cf 90       	pop	r12
 872:	bf 90       	pop	r11
 874:	af 90       	pop	r10
 876:	08 95       	ret

00000878 <__divmodsi4>:
 878:	97 fb       	bst	r25, 7
 87a:	09 2e       	mov	r0, r25
 87c:	05 26       	eor	r0, r21
 87e:	0e d0       	rcall	.+28     	; 0x89c <__divmodsi4_neg1>
 880:	57 fd       	sbrc	r21, 7
 882:	04 d0       	rcall	.+8      	; 0x88c <__divmodsi4_neg2>
 884:	14 d0       	rcall	.+40     	; 0x8ae <__udivmodsi4>
 886:	0a d0       	rcall	.+20     	; 0x89c <__divmodsi4_neg1>
 888:	00 1c       	adc	r0, r0
 88a:	38 f4       	brcc	.+14     	; 0x89a <__divmodsi4_exit>

0000088c <__divmodsi4_neg2>:
 88c:	50 95       	com	r21
 88e:	40 95       	com	r20
 890:	30 95       	com	r19
 892:	21 95       	neg	r18
 894:	3f 4f       	sbci	r19, 0xFF	; 255
 896:	4f 4f       	sbci	r20, 0xFF	; 255
 898:	5f 4f       	sbci	r21, 0xFF	; 255

0000089a <__divmodsi4_exit>:
 89a:	08 95       	ret

0000089c <__divmodsi4_neg1>:
 89c:	f6 f7       	brtc	.-4      	; 0x89a <__divmodsi4_exit>
 89e:	90 95       	com	r25
 8a0:	80 95       	com	r24
 8a2:	70 95       	com	r23
 8a4:	61 95       	neg	r22
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	8f 4f       	sbci	r24, 0xFF	; 255
 8aa:	9f 4f       	sbci	r25, 0xFF	; 255
 8ac:	08 95       	ret

000008ae <__udivmodsi4>:
 8ae:	a1 e2       	ldi	r26, 0x21	; 33
 8b0:	1a 2e       	mov	r1, r26
 8b2:	aa 1b       	sub	r26, r26
 8b4:	bb 1b       	sub	r27, r27
 8b6:	fd 01       	movw	r30, r26
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <__udivmodsi4_ep>

000008ba <__udivmodsi4_loop>:
 8ba:	aa 1f       	adc	r26, r26
 8bc:	bb 1f       	adc	r27, r27
 8be:	ee 1f       	adc	r30, r30
 8c0:	ff 1f       	adc	r31, r31
 8c2:	a2 17       	cp	r26, r18
 8c4:	b3 07       	cpc	r27, r19
 8c6:	e4 07       	cpc	r30, r20
 8c8:	f5 07       	cpc	r31, r21
 8ca:	20 f0       	brcs	.+8      	; 0x8d4 <__udivmodsi4_ep>
 8cc:	a2 1b       	sub	r26, r18
 8ce:	b3 0b       	sbc	r27, r19
 8d0:	e4 0b       	sbc	r30, r20
 8d2:	f5 0b       	sbc	r31, r21

000008d4 <__udivmodsi4_ep>:
 8d4:	66 1f       	adc	r22, r22
 8d6:	77 1f       	adc	r23, r23
 8d8:	88 1f       	adc	r24, r24
 8da:	99 1f       	adc	r25, r25
 8dc:	1a 94       	dec	r1
 8de:	69 f7       	brne	.-38     	; 0x8ba <__udivmodsi4_loop>
 8e0:	60 95       	com	r22
 8e2:	70 95       	com	r23
 8e4:	80 95       	com	r24
 8e6:	90 95       	com	r25
 8e8:	9b 01       	movw	r18, r22
 8ea:	ac 01       	movw	r20, r24
 8ec:	bd 01       	movw	r22, r26
 8ee:	cf 01       	movw	r24, r30
 8f0:	08 95       	ret

000008f2 <ltoa>:
 8f2:	fa 01       	movw	r30, r20
 8f4:	cf 93       	push	r28
 8f6:	ff 93       	push	r31
 8f8:	ef 93       	push	r30
 8fa:	22 30       	cpi	r18, 0x02	; 2
 8fc:	3c f1       	brlt	.+78     	; 0x94c <ltoa+0x5a>
 8fe:	25 32       	cpi	r18, 0x25	; 37
 900:	2c f5       	brge	.+74     	; 0x94c <ltoa+0x5a>
 902:	c2 2f       	mov	r28, r18
 904:	e8 94       	clt
 906:	ca 30       	cpi	r28, 0x0A	; 10
 908:	49 f4       	brne	.+18     	; 0x91c <ltoa+0x2a>
 90a:	97 fb       	bst	r25, 7
 90c:	3e f4       	brtc	.+14     	; 0x91c <ltoa+0x2a>
 90e:	90 95       	com	r25
 910:	80 95       	com	r24
 912:	70 95       	com	r23
 914:	61 95       	neg	r22
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	8f 4f       	sbci	r24, 0xFF	; 255
 91a:	9f 4f       	sbci	r25, 0xFF	; 255
 91c:	2c 2f       	mov	r18, r28
 91e:	33 27       	eor	r19, r19
 920:	44 27       	eor	r20, r20
 922:	55 27       	eor	r21, r21
 924:	ff 93       	push	r31
 926:	ef 93       	push	r30
 928:	c2 df       	rcall	.-124    	; 0x8ae <__udivmodsi4>
 92a:	ef 91       	pop	r30
 92c:	ff 91       	pop	r31
 92e:	60 5d       	subi	r22, 0xD0	; 208
 930:	6a 33       	cpi	r22, 0x3A	; 58
 932:	0c f0       	brlt	.+2      	; 0x936 <ltoa+0x44>
 934:	69 5d       	subi	r22, 0xD9	; 217
 936:	61 93       	st	Z+, r22
 938:	b9 01       	movw	r22, r18
 93a:	ca 01       	movw	r24, r20
 93c:	60 50       	subi	r22, 0x00	; 0
 93e:	70 40       	sbci	r23, 0x00	; 0
 940:	80 40       	sbci	r24, 0x00	; 0
 942:	90 40       	sbci	r25, 0x00	; 0
 944:	59 f7       	brne	.-42     	; 0x91c <ltoa+0x2a>
 946:	16 f4       	brtc	.+4      	; 0x94c <ltoa+0x5a>
 948:	cd e2       	ldi	r28, 0x2D	; 45
 94a:	c1 93       	st	Z+, r28
 94c:	10 82       	st	Z, r1
 94e:	8f 91       	pop	r24
 950:	9f 91       	pop	r25
 952:	cf 91       	pop	r28
 954:	00 c0       	rjmp	.+0      	; 0x956 <strrev>

00000956 <strrev>:
 956:	dc 01       	movw	r26, r24
 958:	fc 01       	movw	r30, r24
 95a:	67 2f       	mov	r22, r23
 95c:	71 91       	ld	r23, Z+
 95e:	77 23       	and	r23, r23
 960:	e1 f7       	brne	.-8      	; 0x95a <strrev+0x4>
 962:	32 97       	sbiw	r30, 0x02	; 2
 964:	04 c0       	rjmp	.+8      	; 0x96e <strrev+0x18>
 966:	7c 91       	ld	r23, X
 968:	6d 93       	st	X+, r22
 96a:	70 83       	st	Z, r23
 96c:	62 91       	ld	r22, -Z
 96e:	ae 17       	cp	r26, r30
 970:	bf 07       	cpc	r27, r31
 972:	c8 f3       	brcs	.-14     	; 0x966 <strrev+0x10>
 974:	08 95       	ret

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
